Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit_or_empty
Rule 1     abstract_declarator_opt -> empty
Rule 2     abstract_declarator_opt -> abstract_declarator
Rule 3     assignment_expression_opt -> empty
Rule 4     assignment_expression_opt -> assignment_expression
Rule 5     block_item_list_opt -> empty
Rule 6     block_item_list_opt -> block_item_list
Rule 7     declaration_list_opt -> empty
Rule 8     declaration_list_opt -> declaration_list
Rule 9     declaration_specifiers_opt -> empty
Rule 10    declaration_specifiers_opt -> declaration_specifiers
Rule 11    designation_opt -> empty
Rule 12    designation_opt -> designation
Rule 13    expression_opt -> empty
Rule 14    expression_opt -> expression
Rule 15    identifier_list_opt -> empty
Rule 16    identifier_list_opt -> identifier_list
Rule 17    init_declarator_list_opt -> empty
Rule 18    init_declarator_list_opt -> init_declarator_list
Rule 19    parameter_type_list_opt -> empty
Rule 20    parameter_type_list_opt -> parameter_type_list
Rule 21    specifier_qualifier_list_opt -> empty
Rule 22    specifier_qualifier_list_opt -> specifier_qualifier_list
Rule 23    struct_declarator_list_opt -> empty
Rule 24    struct_declarator_list_opt -> struct_declarator_list
Rule 25    type_qualifier_list_opt -> empty
Rule 26    type_qualifier_list_opt -> type_qualifier_list
Rule 27    translation_unit_or_empty -> translation_unit
Rule 28    translation_unit_or_empty -> empty
Rule 29    translation_unit -> external_declaration
Rule 30    translation_unit -> translation_unit external_declaration
Rule 31    external_declaration -> function_definition
Rule 32    external_declaration -> declaration
Rule 33    external_declaration -> pp_directive
Rule 34    external_declaration -> SEMI
Rule 35    pp_directive -> PPHASH
Rule 36    function_definition -> declarator declaration_list_opt compound_statement
Rule 37    function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement
Rule 38    statement -> labeled_statement
Rule 39    statement -> expression_statement
Rule 40    statement -> compound_statement
Rule 41    statement -> selection_statement
Rule 42    statement -> iteration_statement
Rule 43    statement -> jump_statement
Rule 44    decl_body -> declaration_specifiers init_declarator_list_opt
Rule 45    declaration -> decl_body SEMI
Rule 46    declaration_list -> declaration
Rule 47    declaration_list -> declaration_list declaration
Rule 48    declaration_specifiers -> type_qualifier declaration_specifiers_opt
Rule 49    declaration_specifiers -> type_specifier declaration_specifiers_opt
Rule 50    declaration_specifiers -> storage_class_specifier declaration_specifiers_opt
Rule 51    declaration_specifiers -> function_specifier declaration_specifiers_opt
Rule 52    storage_class_specifier -> AUTO
Rule 53    storage_class_specifier -> REGISTER
Rule 54    storage_class_specifier -> STATIC
Rule 55    storage_class_specifier -> EXTERN
Rule 56    storage_class_specifier -> TYPEDEF
Rule 57    function_specifier -> INLINE
Rule 58    type_specifier -> VOID
Rule 59    type_specifier -> _BOOL
Rule 60    type_specifier -> CHAR
Rule 61    type_specifier -> SHORT
Rule 62    type_specifier -> INT
Rule 63    type_specifier -> LONG
Rule 64    type_specifier -> FLOAT
Rule 65    type_specifier -> DOUBLE
Rule 66    type_specifier -> _COMPLEX
Rule 67    type_specifier -> SIGNED
Rule 68    type_specifier -> UNSIGNED
Rule 69    type_specifier -> typedef_name
Rule 70    type_specifier -> enum_specifier
Rule 71    type_specifier -> struct_or_union_specifier
Rule 72    type_qualifier -> CONST
Rule 73    type_qualifier -> RESTRICT
Rule 74    type_qualifier -> VOLATILE
Rule 75    init_declarator_list -> init_declarator
Rule 76    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 77    init_declarator -> declarator
Rule 78    init_declarator -> declarator EQUALS initializer
Rule 79    specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt
Rule 80    specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt
Rule 81    struct_or_union_specifier -> struct_or_union ID
Rule 82    struct_or_union_specifier -> struct_or_union TYPEID
Rule 83    struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close
Rule 84    struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close
Rule 85    struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close
Rule 86    struct_or_union -> STRUCT
Rule 87    struct_or_union -> UNION
Rule 88    struct_declaration_list -> struct_declaration
Rule 89    struct_declaration_list -> struct_declaration_list struct_declaration
Rule 90    struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI
Rule 91    struct_declarator_list -> struct_declarator
Rule 92    struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 93    struct_declarator -> declarator
Rule 94    struct_declarator -> declarator COLON constant_expression
Rule 95    struct_declarator -> COLON constant_expression
Rule 96    enum_specifier -> ENUM ID
Rule 97    enum_specifier -> ENUM TYPEID
Rule 98    enum_specifier -> ENUM brace_open enumerator_list brace_close
Rule 99    enum_specifier -> ENUM ID brace_open enumerator_list brace_close
Rule 100   enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close
Rule 101   enumerator_list -> enumerator
Rule 102   enumerator_list -> enumerator_list COMMA
Rule 103   enumerator_list -> enumerator_list COMMA enumerator
Rule 104   enumerator -> ID
Rule 105   enumerator -> ID EQUALS constant_expression
Rule 106   declarator -> direct_declarator
Rule 107   declarator -> pointer direct_declarator
Rule 108   direct_declarator -> ID
Rule 109   direct_declarator -> LPAREN declarator RPAREN
Rule 110   direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET
Rule 111   direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET
Rule 112   direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 113   direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN
Rule 114   pointer -> TIMES type_qualifier_list_opt
Rule 115   pointer -> TIMES type_qualifier_list_opt pointer
Rule 116   type_qualifier_list -> type_qualifier
Rule 117   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 118   parameter_type_list -> parameter_list
Rule 119   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 120   parameter_list -> parameter_declaration
Rule 121   parameter_list -> parameter_list COMMA parameter_declaration
Rule 122   parameter_declaration -> declaration_specifiers declarator
Rule 123   parameter_declaration -> declaration_specifiers abstract_declarator_opt
Rule 124   identifier_list -> identifier
Rule 125   identifier_list -> identifier_list COMMA identifier
Rule 126   initializer -> assignment_expression
Rule 127   initializer -> brace_open initializer_list brace_close
Rule 128   initializer -> brace_open initializer_list COMMA brace_close
Rule 129   initializer_list -> designation_opt initializer
Rule 130   initializer_list -> initializer_list COMMA designation_opt initializer
Rule 131   designation -> designator_list EQUALS
Rule 132   designator_list -> designator
Rule 133   designator_list -> designator_list designator
Rule 134   designator -> LBRACKET constant_expression RBRACKET
Rule 135   designator -> PERIOD identifier
Rule 136   type_name -> specifier_qualifier_list abstract_declarator_opt
Rule 137   abstract_declarator -> pointer
Rule 138   abstract_declarator -> pointer direct_abstract_declarator
Rule 139   abstract_declarator -> direct_abstract_declarator
Rule 140   direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 141   direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
Rule 142   direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET
Rule 143   direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET
Rule 144   direct_abstract_declarator -> LBRACKET TIMES RBRACKET
Rule 145   direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
Rule 146   direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN
Rule 147   block_item -> declaration
Rule 148   block_item -> statement
Rule 149   block_item_list -> block_item
Rule 150   block_item_list -> block_item_list block_item
Rule 151   compound_statement -> brace_open block_item_list_opt brace_close
Rule 152   labeled_statement -> ID COLON statement
Rule 153   labeled_statement -> CASE constant_expression COLON statement
Rule 154   labeled_statement -> DEFAULT COLON statement
Rule 155   selection_statement -> IF LPAREN expression RPAREN statement
Rule 156   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 157   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 158   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 159   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI
Rule 160   iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 161   iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
Rule 162   jump_statement -> GOTO ID SEMI
Rule 163   jump_statement -> BREAK SEMI
Rule 164   jump_statement -> CONTINUE SEMI
Rule 165   jump_statement -> RETURN expression SEMI
Rule 166   jump_statement -> RETURN SEMI
Rule 167   expression_statement -> expression_opt SEMI
Rule 168   expression -> assignment_expression
Rule 169   expression -> expression COMMA assignment_expression
Rule 170   typedef_name -> TYPEID
Rule 171   assignment_expression -> conditional_expression
Rule 172   assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 173   assignment_operator -> EQUALS
Rule 174   assignment_operator -> XOREQUAL
Rule 175   assignment_operator -> TIMESEQUAL
Rule 176   assignment_operator -> DIVEQUAL
Rule 177   assignment_operator -> MODEQUAL
Rule 178   assignment_operator -> PLUSEQUAL
Rule 179   assignment_operator -> MINUSEQUAL
Rule 180   assignment_operator -> LSHIFTEQUAL
Rule 181   assignment_operator -> RSHIFTEQUAL
Rule 182   assignment_operator -> ANDEQUAL
Rule 183   assignment_operator -> OREQUAL
Rule 184   constant_expression -> conditional_expression
Rule 185   conditional_expression -> binary_expression
Rule 186   conditional_expression -> binary_expression CONDOP expression COLON conditional_expression
Rule 187   binary_expression -> cast_expression
Rule 188   binary_expression -> binary_expression TIMES binary_expression
Rule 189   binary_expression -> binary_expression DIVIDE binary_expression
Rule 190   binary_expression -> binary_expression MOD binary_expression
Rule 191   binary_expression -> binary_expression PLUS binary_expression
Rule 192   binary_expression -> binary_expression MINUS binary_expression
Rule 193   binary_expression -> binary_expression RSHIFT binary_expression
Rule 194   binary_expression -> binary_expression LSHIFT binary_expression
Rule 195   binary_expression -> binary_expression LT binary_expression
Rule 196   binary_expression -> binary_expression LE binary_expression
Rule 197   binary_expression -> binary_expression GE binary_expression
Rule 198   binary_expression -> binary_expression GT binary_expression
Rule 199   binary_expression -> binary_expression EQ binary_expression
Rule 200   binary_expression -> binary_expression NE binary_expression
Rule 201   binary_expression -> binary_expression AND binary_expression
Rule 202   binary_expression -> binary_expression OR binary_expression
Rule 203   binary_expression -> binary_expression XOR binary_expression
Rule 204   binary_expression -> binary_expression LAND binary_expression
Rule 205   binary_expression -> binary_expression LOR binary_expression
Rule 206   cast_expression -> unary_expression
Rule 207   cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 208   unary_expression -> postfix_expression
Rule 209   unary_expression -> PLUSPLUS unary_expression
Rule 210   unary_expression -> MINUSMINUS unary_expression
Rule 211   unary_expression -> unary_operator cast_expression
Rule 212   unary_expression -> SIZEOF unary_expression
Rule 213   unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 214   unary_operator -> AND
Rule 215   unary_operator -> TIMES
Rule 216   unary_operator -> PLUS
Rule 217   unary_operator -> MINUS
Rule 218   unary_operator -> NOT
Rule 219   unary_operator -> LNOT
Rule 220   postfix_expression -> primary_expression
Rule 221   postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 222   postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 223   postfix_expression -> postfix_expression LPAREN RPAREN
Rule 224   postfix_expression -> postfix_expression PERIOD identifier
Rule 225   postfix_expression -> postfix_expression ARROW identifier
Rule 226   postfix_expression -> postfix_expression PLUSPLUS
Rule 227   postfix_expression -> postfix_expression MINUSMINUS
Rule 228   postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close
Rule 229   postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
Rule 230   primary_expression -> identifier
Rule 231   primary_expression -> constant
Rule 232   primary_expression -> unified_string_literal
Rule 233   primary_expression -> unified_wstring_literal
Rule 234   primary_expression -> LPAREN expression RPAREN
Rule 235   argument_expression_list -> assignment_expression
Rule 236   argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 237   identifier -> ID
Rule 238   constant -> INT_CONST_DEC
Rule 239   constant -> INT_CONST_OCT
Rule 240   constant -> INT_CONST_HEX
Rule 241   constant -> FLOAT_CONST
Rule 242   constant -> HEX_FLOAT_CONST
Rule 243   constant -> CHAR_CONST
Rule 244   constant -> WCHAR_CONST
Rule 245   unified_string_literal -> STRING_LITERAL
Rule 246   unified_string_literal -> unified_string_literal STRING_LITERAL
Rule 247   unified_wstring_literal -> WSTRING_LITERAL
Rule 248   unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL
Rule 249   brace_open -> LBRACE
Rule 250   brace_close -> RBRACE
Rule 251   empty -> <empty>

Terminals, with rules where they appear

AND                  : 201 214
ANDEQUAL             : 182
ARROW                : 225
AUTO                 : 52
BREAK                : 163
CASE                 : 153
CHAR                 : 60
CHAR_CONST           : 243
COLON                : 94 95 152 153 154 186
COMMA                : 76 92 102 103 119 121 125 128 130 169 229 236
CONDOP               : 186
CONST                : 72
CONTINUE             : 164
DEFAULT              : 154
DIVEQUAL             : 176
DIVIDE               : 189
DO                   : 159
DOUBLE               : 65
ELLIPSIS             : 119
ELSE                 : 156
ENUM                 : 96 97 98 99 100
EQ                   : 199
EQUALS               : 78 105 131 173
EXTERN               : 55
FLOAT                : 64
FLOAT_CONST          : 241
FOR                  : 160 161
GE                   : 197
GOTO                 : 162
GT                   : 198
HEX_FLOAT_CONST      : 242
ID                   : 81 84 96 99 104 105 108 152 162 237
IF                   : 155 156
INLINE               : 57
INT                  : 62
INT_CONST_DEC        : 238
INT_CONST_HEX        : 240
INT_CONST_OCT        : 239
LAND                 : 204
LBRACE               : 249
LBRACKET             : 110 111 134 141 142 143 144 221
LE                   : 196
LNOT                 : 219
LONG                 : 63
LOR                  : 205
LPAREN               : 109 112 113 140 145 146 155 156 157 158 159 160 161 207 213 222 223 228 229 234
LSHIFT               : 194
LSHIFTEQUAL          : 180
LT                   : 195
MINUS                : 192 217
MINUSEQUAL           : 179
MINUSMINUS           : 210 227
MOD                  : 190
MODEQUAL             : 177
NE                   : 200
NOT                  : 218
OR                   : 202
OREQUAL              : 183
PERIOD               : 135 224
PLUS                 : 191 216
PLUSEQUAL            : 178
PLUSPLUS             : 209 226
PPHASH               : 35
RBRACE               : 250
RBRACKET             : 110 111 134 141 142 143 144 221
REGISTER             : 53
RESTRICT             : 73
RETURN               : 165 166
RPAREN               : 109 112 113 140 145 146 155 156 157 158 159 160 161 207 213 222 223 228 229 234
RSHIFT               : 193
RSHIFTEQUAL          : 181
SEMI                 : 34 45 90 159 160 160 161 162 163 164 165 166 167
SHORT                : 61
SIGNED               : 67
SIZEOF               : 212 213
STATIC               : 54
STRING_LITERAL       : 245 246
STRUCT               : 86
SWITCH               : 157
TIMES                : 111 114 115 143 144 188 215
TIMESEQUAL           : 175
TYPEDEF              : 56
TYPEID               : 82 85 97 100 170
UNION                : 87
UNSIGNED             : 68
VOID                 : 58
VOLATILE             : 74
WCHAR_CONST          : 244
WHILE                : 158 159
WSTRING_LITERAL      : 247 248
XOR                  : 203
XOREQUAL             : 174
_BOOL                : 59
_COMPLEX             : 66
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 2 140
abstract_declarator_opt : 123 136
argument_expression_list : 222 236
assignment_expression : 4 126 168 169 172 235 236
assignment_expression_opt : 110 141 142
assignment_operator  : 172
binary_expression    : 185 186 188 188 189 189 190 190 191 191 192 192 193 193 194 194 195 195 196 196 197 197 198 198 199 199 200 200 201 201 202 202 203 203 204 204 205 205
block_item           : 149 150
block_item_list      : 6 150
block_item_list_opt  : 151
brace_close          : 83 84 85 98 99 100 127 128 151 228 229
brace_open           : 83 84 85 98 99 100 127 128 151 228 229
cast_expression      : 187 207 211
compound_statement   : 36 37 40
conditional_expression : 171 184 186
constant             : 231
constant_expression  : 94 95 105 134 153
decl_body            : 45
declaration          : 32 46 47 147 161
declaration_list     : 8 47
declaration_list_opt : 36 37
declaration_specifiers : 10 37 44 122 123
declaration_specifiers_opt : 48 49 50 51
declarator           : 36 37 77 78 93 94 109 122
designation          : 12
designation_opt      : 129 130
designator           : 132 133
designator_list      : 131 133
direct_abstract_declarator : 138 139 141 143 145
direct_declarator    : 106 107 110 111 112 113
empty                : 1 3 5 7 9 11 13 15 17 19 21 23 25 28
enum_specifier       : 70
enumerator           : 101 103
enumerator_list      : 98 99 100 102 103
expression           : 14 155 156 157 158 159 165 169 186 221 234
expression_opt       : 160 160 160 161 161 167
expression_statement : 39
external_declaration : 29 30
function_definition  : 31
function_specifier   : 51
identifier           : 124 125 135 224 225 230
identifier_list      : 16 125
identifier_list_opt  : 113
init_declarator      : 75 76
init_declarator_list : 18 76
init_declarator_list_opt : 44
initializer          : 78 129 130
initializer_list     : 127 128 130 228 229
iteration_statement  : 42
jump_statement       : 43
labeled_statement    : 38
parameter_declaration : 120 121
parameter_list       : 118 119 121
parameter_type_list  : 20 112
parameter_type_list_opt : 145 146
pointer              : 107 115 137 138
postfix_expression   : 208 221 222 223 224 225 226 227
pp_directive         : 33
primary_expression   : 220
selection_statement  : 41
specifier_qualifier_list : 22 90 136
specifier_qualifier_list_opt : 79 80
statement            : 148 152 153 154 155 156 156 157 158 159 160 161
storage_class_specifier : 50
struct_declaration   : 88 89
struct_declaration_list : 83 84 85 89
struct_declarator    : 91 92
struct_declarator_list : 24 92
struct_declarator_list_opt : 90
struct_or_union      : 81 82 83 84 85
struct_or_union_specifier : 71
translation_unit     : 27 30
translation_unit_or_empty : 0
type_name            : 207 213 228 229
type_qualifier       : 48 79 116 117
type_qualifier_list  : 26 117
type_qualifier_list_opt : 114 115
type_specifier       : 49 80
typedef_name         : 69
unary_expression     : 172 206 209 210 212
unary_operator       : 211
unified_string_literal : 232 246
unified_wstring_literal : 233 248

Parsing method: LALR

state 0

    (0) S' -> . translation_unit_or_empty
    (27) translation_unit_or_empty -> . translation_unit
    (28) translation_unit_or_empty -> . empty
    (29) translation_unit -> . external_declaration
    (30) translation_unit -> . translation_unit external_declaration
    (251) empty -> .
    (31) external_declaration -> . function_definition
    (32) external_declaration -> . declaration
    (33) external_declaration -> . pp_directive
    (34) external_declaration -> . SEMI
    (36) function_definition -> . declarator declaration_list_opt compound_statement
    (37) function_definition -> . declaration_specifiers declarator declaration_list_opt compound_statement
    (45) declaration -> . decl_body SEMI
    (35) pp_directive -> . PPHASH
    (106) declarator -> . direct_declarator
    (107) declarator -> . pointer direct_declarator
    (48) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (49) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (50) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (51) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (44) decl_body -> . declaration_specifiers init_declarator_list_opt
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . LPAREN declarator RPAREN
    (110) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (111) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (112) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (113) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (114) pointer -> . TIMES type_qualifier_list_opt
    (115) pointer -> . TIMES type_qualifier_list_opt pointer
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (52) storage_class_specifier -> . AUTO
    (53) storage_class_specifier -> . REGISTER
    (54) storage_class_specifier -> . STATIC
    (55) storage_class_specifier -> . EXTERN
    (56) storage_class_specifier -> . TYPEDEF
    (57) function_specifier -> . INLINE
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    $end            reduce using rule 251 (empty -> .)
    SEMI            shift and go to state 17
    PPHASH          shift and go to state 21
    ID              shift and go to state 46
    LPAREN          shift and go to state 32
    TIMES           shift and go to state 11
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    AUTO            shift and go to state 35
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 4
    EXTERN          shift and go to state 34
    TYPEDEF         shift and go to state 42
    INLINE          shift and go to state 16
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    pointer                        shift and go to state 28
    struct_or_union_specifier      shift and go to state 31
    translation_unit               shift and go to state 5
    struct_or_union                shift and go to state 29
    storage_class_specifier        shift and go to state 7
    enum_specifier                 shift and go to state 8
    external_declaration           shift and go to state 12
    function_definition            shift and go to state 6
    decl_body                      shift and go to state 38
    type_qualifier                 shift and go to state 39
    pp_directive                   shift and go to state 13
    declarator                     shift and go to state 25
    type_specifier                 shift and go to state 14
    declaration                    shift and go to state 18
    typedef_name                   shift and go to state 48
    function_specifier             shift and go to state 20
    empty                          shift and go to state 24
    translation_unit_or_empty      shift and go to state 47
    declaration_specifiers         shift and go to state 41
    direct_declarator              shift and go to state 44

state 1

    (65) type_specifier -> DOUBLE .

    CONST           reduce using rule 65 (type_specifier -> DOUBLE .)
    RESTRICT        reduce using rule 65 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 65 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 65 (type_specifier -> DOUBLE .)
    _BOOL           reduce using rule 65 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 65 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 65 (type_specifier -> DOUBLE .)
    INT             reduce using rule 65 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 65 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 65 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 65 (type_specifier -> DOUBLE .)
    _COMPLEX        reduce using rule 65 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 65 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 65 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 65 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 65 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 65 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 65 (type_specifier -> DOUBLE .)
    TYPEDEF         reduce using rule 65 (type_specifier -> DOUBLE .)
    INLINE          reduce using rule 65 (type_specifier -> DOUBLE .)
    TYPEID          reduce using rule 65 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 65 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 65 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 65 (type_specifier -> DOUBLE .)
    ID              reduce using rule 65 (type_specifier -> DOUBLE .)
    LPAREN          reduce using rule 65 (type_specifier -> DOUBLE .)
    TIMES           reduce using rule 65 (type_specifier -> DOUBLE .)
    LBRACKET        reduce using rule 65 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 65 (type_specifier -> DOUBLE .)
    RPAREN          reduce using rule 65 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 65 (type_specifier -> DOUBLE .)
    SEMI            reduce using rule 65 (type_specifier -> DOUBLE .)


state 2

    (62) type_specifier -> INT .

    CONST           reduce using rule 62 (type_specifier -> INT .)
    RESTRICT        reduce using rule 62 (type_specifier -> INT .)
    VOLATILE        reduce using rule 62 (type_specifier -> INT .)
    VOID            reduce using rule 62 (type_specifier -> INT .)
    _BOOL           reduce using rule 62 (type_specifier -> INT .)
    CHAR            reduce using rule 62 (type_specifier -> INT .)
    SHORT           reduce using rule 62 (type_specifier -> INT .)
    INT             reduce using rule 62 (type_specifier -> INT .)
    LONG            reduce using rule 62 (type_specifier -> INT .)
    FLOAT           reduce using rule 62 (type_specifier -> INT .)
    DOUBLE          reduce using rule 62 (type_specifier -> INT .)
    _COMPLEX        reduce using rule 62 (type_specifier -> INT .)
    SIGNED          reduce using rule 62 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 62 (type_specifier -> INT .)
    AUTO            reduce using rule 62 (type_specifier -> INT .)
    REGISTER        reduce using rule 62 (type_specifier -> INT .)
    STATIC          reduce using rule 62 (type_specifier -> INT .)
    EXTERN          reduce using rule 62 (type_specifier -> INT .)
    TYPEDEF         reduce using rule 62 (type_specifier -> INT .)
    INLINE          reduce using rule 62 (type_specifier -> INT .)
    TYPEID          reduce using rule 62 (type_specifier -> INT .)
    ENUM            reduce using rule 62 (type_specifier -> INT .)
    STRUCT          reduce using rule 62 (type_specifier -> INT .)
    UNION           reduce using rule 62 (type_specifier -> INT .)
    ID              reduce using rule 62 (type_specifier -> INT .)
    LPAREN          reduce using rule 62 (type_specifier -> INT .)
    TIMES           reduce using rule 62 (type_specifier -> INT .)
    LBRACKET        reduce using rule 62 (type_specifier -> INT .)
    COMMA           reduce using rule 62 (type_specifier -> INT .)
    RPAREN          reduce using rule 62 (type_specifier -> INT .)
    COLON           reduce using rule 62 (type_specifier -> INT .)
    SEMI            reduce using rule 62 (type_specifier -> INT .)


state 3

    (67) type_specifier -> SIGNED .

    CONST           reduce using rule 67 (type_specifier -> SIGNED .)
    RESTRICT        reduce using rule 67 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 67 (type_specifier -> SIGNED .)
    VOID            reduce using rule 67 (type_specifier -> SIGNED .)
    _BOOL           reduce using rule 67 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 67 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 67 (type_specifier -> SIGNED .)
    INT             reduce using rule 67 (type_specifier -> SIGNED .)
    LONG            reduce using rule 67 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 67 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 67 (type_specifier -> SIGNED .)
    _COMPLEX        reduce using rule 67 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 67 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 67 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 67 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 67 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 67 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 67 (type_specifier -> SIGNED .)
    TYPEDEF         reduce using rule 67 (type_specifier -> SIGNED .)
    INLINE          reduce using rule 67 (type_specifier -> SIGNED .)
    TYPEID          reduce using rule 67 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 67 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 67 (type_specifier -> SIGNED .)
    UNION           reduce using rule 67 (type_specifier -> SIGNED .)
    ID              reduce using rule 67 (type_specifier -> SIGNED .)
    LPAREN          reduce using rule 67 (type_specifier -> SIGNED .)
    TIMES           reduce using rule 67 (type_specifier -> SIGNED .)
    LBRACKET        reduce using rule 67 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 67 (type_specifier -> SIGNED .)
    RPAREN          reduce using rule 67 (type_specifier -> SIGNED .)
    COLON           reduce using rule 67 (type_specifier -> SIGNED .)
    SEMI            reduce using rule 67 (type_specifier -> SIGNED .)


state 4

    (54) storage_class_specifier -> STATIC .

    CONST           reduce using rule 54 (storage_class_specifier -> STATIC .)
    RESTRICT        reduce using rule 54 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 54 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 54 (storage_class_specifier -> STATIC .)
    _BOOL           reduce using rule 54 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 54 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 54 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 54 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 54 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 54 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 54 (storage_class_specifier -> STATIC .)
    _COMPLEX        reduce using rule 54 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 54 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 54 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 54 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 54 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 54 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 54 (storage_class_specifier -> STATIC .)
    TYPEDEF         reduce using rule 54 (storage_class_specifier -> STATIC .)
    INLINE          reduce using rule 54 (storage_class_specifier -> STATIC .)
    TYPEID          reduce using rule 54 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 54 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 54 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 54 (storage_class_specifier -> STATIC .)
    ID              reduce using rule 54 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 54 (storage_class_specifier -> STATIC .)
    TIMES           reduce using rule 54 (storage_class_specifier -> STATIC .)
    SEMI            reduce using rule 54 (storage_class_specifier -> STATIC .)
    LBRACKET        reduce using rule 54 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 54 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 54 (storage_class_specifier -> STATIC .)


state 5

    (27) translation_unit_or_empty -> translation_unit .
    (30) translation_unit -> translation_unit . external_declaration
    (31) external_declaration -> . function_definition
    (32) external_declaration -> . declaration
    (33) external_declaration -> . pp_directive
    (34) external_declaration -> . SEMI
    (36) function_definition -> . declarator declaration_list_opt compound_statement
    (37) function_definition -> . declaration_specifiers declarator declaration_list_opt compound_statement
    (45) declaration -> . decl_body SEMI
    (35) pp_directive -> . PPHASH
    (106) declarator -> . direct_declarator
    (107) declarator -> . pointer direct_declarator
    (48) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (49) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (50) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (51) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (44) decl_body -> . declaration_specifiers init_declarator_list_opt
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . LPAREN declarator RPAREN
    (110) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (111) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (112) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (113) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (114) pointer -> . TIMES type_qualifier_list_opt
    (115) pointer -> . TIMES type_qualifier_list_opt pointer
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (52) storage_class_specifier -> . AUTO
    (53) storage_class_specifier -> . REGISTER
    (54) storage_class_specifier -> . STATIC
    (55) storage_class_specifier -> . EXTERN
    (56) storage_class_specifier -> . TYPEDEF
    (57) function_specifier -> . INLINE
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    $end            reduce using rule 27 (translation_unit_or_empty -> translation_unit .)
    SEMI            shift and go to state 17
    PPHASH          shift and go to state 21
    ID              shift and go to state 46
    LPAREN          shift and go to state 32
    TIMES           shift and go to state 11
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    AUTO            shift and go to state 35
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 4
    EXTERN          shift and go to state 34
    TYPEDEF         shift and go to state 42
    INLINE          shift and go to state 16
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    pointer                        shift and go to state 28
    struct_or_union_specifier      shift and go to state 31
    struct_or_union                shift and go to state 29
    storage_class_specifier        shift and go to state 7
    enum_specifier                 shift and go to state 8
    decl_body                      shift and go to state 38
    function_definition            shift and go to state 6
    external_declaration           shift and go to state 50
    type_qualifier                 shift and go to state 39
    pp_directive                   shift and go to state 13
    type_specifier                 shift and go to state 14
    declaration                    shift and go to state 18
    typedef_name                   shift and go to state 48
    function_specifier             shift and go to state 20
    declarator                     shift and go to state 25
    declaration_specifiers         shift and go to state 41
    direct_declarator              shift and go to state 44

state 6

    (31) external_declaration -> function_definition .

    SEMI            reduce using rule 31 (external_declaration -> function_definition .)
    PPHASH          reduce using rule 31 (external_declaration -> function_definition .)
    ID              reduce using rule 31 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 31 (external_declaration -> function_definition .)
    TIMES           reduce using rule 31 (external_declaration -> function_definition .)
    CONST           reduce using rule 31 (external_declaration -> function_definition .)
    RESTRICT        reduce using rule 31 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 31 (external_declaration -> function_definition .)
    VOID            reduce using rule 31 (external_declaration -> function_definition .)
    _BOOL           reduce using rule 31 (external_declaration -> function_definition .)
    CHAR            reduce using rule 31 (external_declaration -> function_definition .)
    SHORT           reduce using rule 31 (external_declaration -> function_definition .)
    INT             reduce using rule 31 (external_declaration -> function_definition .)
    LONG            reduce using rule 31 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 31 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 31 (external_declaration -> function_definition .)
    _COMPLEX        reduce using rule 31 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 31 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 31 (external_declaration -> function_definition .)
    AUTO            reduce using rule 31 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 31 (external_declaration -> function_definition .)
    STATIC          reduce using rule 31 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 31 (external_declaration -> function_definition .)
    TYPEDEF         reduce using rule 31 (external_declaration -> function_definition .)
    INLINE          reduce using rule 31 (external_declaration -> function_definition .)
    TYPEID          reduce using rule 31 (external_declaration -> function_definition .)
    ENUM            reduce using rule 31 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 31 (external_declaration -> function_definition .)
    UNION           reduce using rule 31 (external_declaration -> function_definition .)
    $end            reduce using rule 31 (external_declaration -> function_definition .)


state 7

    (50) declaration_specifiers -> storage_class_specifier . declaration_specifiers_opt
    (9) declaration_specifiers_opt -> . empty
    (10) declaration_specifiers_opt -> . declaration_specifiers
    (251) empty -> .
    (48) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (49) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (50) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (51) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (52) storage_class_specifier -> . AUTO
    (53) storage_class_specifier -> . REGISTER
    (54) storage_class_specifier -> . STATIC
    (55) storage_class_specifier -> . EXTERN
    (56) storage_class_specifier -> . TYPEDEF
    (57) function_specifier -> . INLINE
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    ID              reduce using rule 251 (empty -> .)
    LPAREN          reduce using rule 251 (empty -> .)
    TIMES           reduce using rule 251 (empty -> .)
    SEMI            reduce using rule 251 (empty -> .)
    LBRACKET        reduce using rule 251 (empty -> .)
    COMMA           reduce using rule 251 (empty -> .)
    RPAREN          reduce using rule 251 (empty -> .)
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    AUTO            shift and go to state 35
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 4
    EXTERN          shift and go to state 34
    TYPEDEF         shift and go to state 42
    INLINE          shift and go to state 16
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    declaration_specifiers_opt     shift and go to state 51
    struct_or_union_specifier      shift and go to state 31
    storage_class_specifier        shift and go to state 7
    empty                          shift and go to state 53
    enum_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 39
    declaration_specifiers         shift and go to state 52
    typedef_name                   shift and go to state 48
    function_specifier             shift and go to state 20
    type_specifier                 shift and go to state 14
    struct_or_union                shift and go to state 29

state 8

    (70) type_specifier -> enum_specifier .

    CONST           reduce using rule 70 (type_specifier -> enum_specifier .)
    RESTRICT        reduce using rule 70 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 70 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 70 (type_specifier -> enum_specifier .)
    _BOOL           reduce using rule 70 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 70 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 70 (type_specifier -> enum_specifier .)
    INT             reduce using rule 70 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 70 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 70 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 70 (type_specifier -> enum_specifier .)
    _COMPLEX        reduce using rule 70 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 70 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 70 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 70 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 70 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 70 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 70 (type_specifier -> enum_specifier .)
    TYPEDEF         reduce using rule 70 (type_specifier -> enum_specifier .)
    INLINE          reduce using rule 70 (type_specifier -> enum_specifier .)
    TYPEID          reduce using rule 70 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 70 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 70 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 70 (type_specifier -> enum_specifier .)
    ID              reduce using rule 70 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 70 (type_specifier -> enum_specifier .)
    TIMES           reduce using rule 70 (type_specifier -> enum_specifier .)
    LBRACKET        reduce using rule 70 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 70 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 70 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 70 (type_specifier -> enum_specifier .)
    SEMI            reduce using rule 70 (type_specifier -> enum_specifier .)


state 9

    (96) enum_specifier -> ENUM . ID
    (97) enum_specifier -> ENUM . TYPEID
    (98) enum_specifier -> ENUM . brace_open enumerator_list brace_close
    (99) enum_specifier -> ENUM . ID brace_open enumerator_list brace_close
    (100) enum_specifier -> ENUM . TYPEID brace_open enumerator_list brace_close
    (249) brace_open -> . LBRACE

    ID              shift and go to state 55
    TYPEID          shift and go to state 56
    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 57

state 10

    (63) type_specifier -> LONG .

    CONST           reduce using rule 63 (type_specifier -> LONG .)
    RESTRICT        reduce using rule 63 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 63 (type_specifier -> LONG .)
    VOID            reduce using rule 63 (type_specifier -> LONG .)
    _BOOL           reduce using rule 63 (type_specifier -> LONG .)
    CHAR            reduce using rule 63 (type_specifier -> LONG .)
    SHORT           reduce using rule 63 (type_specifier -> LONG .)
    INT             reduce using rule 63 (type_specifier -> LONG .)
    LONG            reduce using rule 63 (type_specifier -> LONG .)
    FLOAT           reduce using rule 63 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 63 (type_specifier -> LONG .)
    _COMPLEX        reduce using rule 63 (type_specifier -> LONG .)
    SIGNED          reduce using rule 63 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 63 (type_specifier -> LONG .)
    AUTO            reduce using rule 63 (type_specifier -> LONG .)
    REGISTER        reduce using rule 63 (type_specifier -> LONG .)
    STATIC          reduce using rule 63 (type_specifier -> LONG .)
    EXTERN          reduce using rule 63 (type_specifier -> LONG .)
    TYPEDEF         reduce using rule 63 (type_specifier -> LONG .)
    INLINE          reduce using rule 63 (type_specifier -> LONG .)
    TYPEID          reduce using rule 63 (type_specifier -> LONG .)
    ENUM            reduce using rule 63 (type_specifier -> LONG .)
    STRUCT          reduce using rule 63 (type_specifier -> LONG .)
    UNION           reduce using rule 63 (type_specifier -> LONG .)
    ID              reduce using rule 63 (type_specifier -> LONG .)
    LPAREN          reduce using rule 63 (type_specifier -> LONG .)
    TIMES           reduce using rule 63 (type_specifier -> LONG .)
    LBRACKET        reduce using rule 63 (type_specifier -> LONG .)
    COMMA           reduce using rule 63 (type_specifier -> LONG .)
    RPAREN          reduce using rule 63 (type_specifier -> LONG .)
    COLON           reduce using rule 63 (type_specifier -> LONG .)
    SEMI            reduce using rule 63 (type_specifier -> LONG .)


state 11

    (114) pointer -> TIMES . type_qualifier_list_opt
    (115) pointer -> TIMES . type_qualifier_list_opt pointer
    (25) type_qualifier_list_opt -> . empty
    (26) type_qualifier_list_opt -> . type_qualifier_list
    (251) empty -> .
    (116) type_qualifier_list -> . type_qualifier
    (117) type_qualifier_list -> . type_qualifier_list type_qualifier
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE

    TIMES           reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)
    LPAREN          reduce using rule 251 (empty -> .)
    LBRACKET        reduce using rule 251 (empty -> .)
    COMMA           reduce using rule 251 (empty -> .)
    RPAREN          reduce using rule 251 (empty -> .)
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37

    empty                          shift and go to state 58
    type_qualifier_list_opt        shift and go to state 60
    type_qualifier_list            shift and go to state 59
    type_qualifier                 shift and go to state 61

state 12

    (29) translation_unit -> external_declaration .

    SEMI            reduce using rule 29 (translation_unit -> external_declaration .)
    PPHASH          reduce using rule 29 (translation_unit -> external_declaration .)
    ID              reduce using rule 29 (translation_unit -> external_declaration .)
    LPAREN          reduce using rule 29 (translation_unit -> external_declaration .)
    TIMES           reduce using rule 29 (translation_unit -> external_declaration .)
    CONST           reduce using rule 29 (translation_unit -> external_declaration .)
    RESTRICT        reduce using rule 29 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 29 (translation_unit -> external_declaration .)
    VOID            reduce using rule 29 (translation_unit -> external_declaration .)
    _BOOL           reduce using rule 29 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 29 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 29 (translation_unit -> external_declaration .)
    INT             reduce using rule 29 (translation_unit -> external_declaration .)
    LONG            reduce using rule 29 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 29 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 29 (translation_unit -> external_declaration .)
    _COMPLEX        reduce using rule 29 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 29 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 29 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 29 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 29 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 29 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 29 (translation_unit -> external_declaration .)
    TYPEDEF         reduce using rule 29 (translation_unit -> external_declaration .)
    INLINE          reduce using rule 29 (translation_unit -> external_declaration .)
    TYPEID          reduce using rule 29 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 29 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 29 (translation_unit -> external_declaration .)
    UNION           reduce using rule 29 (translation_unit -> external_declaration .)
    $end            reduce using rule 29 (translation_unit -> external_declaration .)


state 13

    (33) external_declaration -> pp_directive .

    SEMI            reduce using rule 33 (external_declaration -> pp_directive .)
    PPHASH          reduce using rule 33 (external_declaration -> pp_directive .)
    ID              reduce using rule 33 (external_declaration -> pp_directive .)
    LPAREN          reduce using rule 33 (external_declaration -> pp_directive .)
    TIMES           reduce using rule 33 (external_declaration -> pp_directive .)
    CONST           reduce using rule 33 (external_declaration -> pp_directive .)
    RESTRICT        reduce using rule 33 (external_declaration -> pp_directive .)
    VOLATILE        reduce using rule 33 (external_declaration -> pp_directive .)
    VOID            reduce using rule 33 (external_declaration -> pp_directive .)
    _BOOL           reduce using rule 33 (external_declaration -> pp_directive .)
    CHAR            reduce using rule 33 (external_declaration -> pp_directive .)
    SHORT           reduce using rule 33 (external_declaration -> pp_directive .)
    INT             reduce using rule 33 (external_declaration -> pp_directive .)
    LONG            reduce using rule 33 (external_declaration -> pp_directive .)
    FLOAT           reduce using rule 33 (external_declaration -> pp_directive .)
    DOUBLE          reduce using rule 33 (external_declaration -> pp_directive .)
    _COMPLEX        reduce using rule 33 (external_declaration -> pp_directive .)
    SIGNED          reduce using rule 33 (external_declaration -> pp_directive .)
    UNSIGNED        reduce using rule 33 (external_declaration -> pp_directive .)
    AUTO            reduce using rule 33 (external_declaration -> pp_directive .)
    REGISTER        reduce using rule 33 (external_declaration -> pp_directive .)
    STATIC          reduce using rule 33 (external_declaration -> pp_directive .)
    EXTERN          reduce using rule 33 (external_declaration -> pp_directive .)
    TYPEDEF         reduce using rule 33 (external_declaration -> pp_directive .)
    INLINE          reduce using rule 33 (external_declaration -> pp_directive .)
    TYPEID          reduce using rule 33 (external_declaration -> pp_directive .)
    ENUM            reduce using rule 33 (external_declaration -> pp_directive .)
    STRUCT          reduce using rule 33 (external_declaration -> pp_directive .)
    UNION           reduce using rule 33 (external_declaration -> pp_directive .)
    $end            reduce using rule 33 (external_declaration -> pp_directive .)


state 14

    (49) declaration_specifiers -> type_specifier . declaration_specifiers_opt
    (9) declaration_specifiers_opt -> . empty
    (10) declaration_specifiers_opt -> . declaration_specifiers
    (251) empty -> .
    (48) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (49) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (50) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (51) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (52) storage_class_specifier -> . AUTO
    (53) storage_class_specifier -> . REGISTER
    (54) storage_class_specifier -> . STATIC
    (55) storage_class_specifier -> . EXTERN
    (56) storage_class_specifier -> . TYPEDEF
    (57) function_specifier -> . INLINE
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    ID              reduce using rule 251 (empty -> .)
    LPAREN          reduce using rule 251 (empty -> .)
    TIMES           reduce using rule 251 (empty -> .)
    SEMI            reduce using rule 251 (empty -> .)
    LBRACKET        reduce using rule 251 (empty -> .)
    COMMA           reduce using rule 251 (empty -> .)
    RPAREN          reduce using rule 251 (empty -> .)
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    AUTO            shift and go to state 35
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 4
    EXTERN          shift and go to state 34
    TYPEDEF         shift and go to state 42
    INLINE          shift and go to state 16
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    declaration_specifiers_opt     shift and go to state 62
    struct_or_union_specifier      shift and go to state 31
    storage_class_specifier        shift and go to state 7
    empty                          shift and go to state 53
    enum_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 39
    declaration_specifiers         shift and go to state 52
    typedef_name                   shift and go to state 48
    function_specifier             shift and go to state 20
    type_specifier                 shift and go to state 14
    struct_or_union                shift and go to state 29

state 15

    (59) type_specifier -> _BOOL .

    CONST           reduce using rule 59 (type_specifier -> _BOOL .)
    RESTRICT        reduce using rule 59 (type_specifier -> _BOOL .)
    VOLATILE        reduce using rule 59 (type_specifier -> _BOOL .)
    VOID            reduce using rule 59 (type_specifier -> _BOOL .)
    _BOOL           reduce using rule 59 (type_specifier -> _BOOL .)
    CHAR            reduce using rule 59 (type_specifier -> _BOOL .)
    SHORT           reduce using rule 59 (type_specifier -> _BOOL .)
    INT             reduce using rule 59 (type_specifier -> _BOOL .)
    LONG            reduce using rule 59 (type_specifier -> _BOOL .)
    FLOAT           reduce using rule 59 (type_specifier -> _BOOL .)
    DOUBLE          reduce using rule 59 (type_specifier -> _BOOL .)
    _COMPLEX        reduce using rule 59 (type_specifier -> _BOOL .)
    SIGNED          reduce using rule 59 (type_specifier -> _BOOL .)
    UNSIGNED        reduce using rule 59 (type_specifier -> _BOOL .)
    AUTO            reduce using rule 59 (type_specifier -> _BOOL .)
    REGISTER        reduce using rule 59 (type_specifier -> _BOOL .)
    STATIC          reduce using rule 59 (type_specifier -> _BOOL .)
    EXTERN          reduce using rule 59 (type_specifier -> _BOOL .)
    TYPEDEF         reduce using rule 59 (type_specifier -> _BOOL .)
    INLINE          reduce using rule 59 (type_specifier -> _BOOL .)
    TYPEID          reduce using rule 59 (type_specifier -> _BOOL .)
    ENUM            reduce using rule 59 (type_specifier -> _BOOL .)
    STRUCT          reduce using rule 59 (type_specifier -> _BOOL .)
    UNION           reduce using rule 59 (type_specifier -> _BOOL .)
    ID              reduce using rule 59 (type_specifier -> _BOOL .)
    LPAREN          reduce using rule 59 (type_specifier -> _BOOL .)
    TIMES           reduce using rule 59 (type_specifier -> _BOOL .)
    LBRACKET        reduce using rule 59 (type_specifier -> _BOOL .)
    COMMA           reduce using rule 59 (type_specifier -> _BOOL .)
    RPAREN          reduce using rule 59 (type_specifier -> _BOOL .)
    COLON           reduce using rule 59 (type_specifier -> _BOOL .)
    SEMI            reduce using rule 59 (type_specifier -> _BOOL .)


state 16

    (57) function_specifier -> INLINE .

    CONST           reduce using rule 57 (function_specifier -> INLINE .)
    RESTRICT        reduce using rule 57 (function_specifier -> INLINE .)
    VOLATILE        reduce using rule 57 (function_specifier -> INLINE .)
    VOID            reduce using rule 57 (function_specifier -> INLINE .)
    _BOOL           reduce using rule 57 (function_specifier -> INLINE .)
    CHAR            reduce using rule 57 (function_specifier -> INLINE .)
    SHORT           reduce using rule 57 (function_specifier -> INLINE .)
    INT             reduce using rule 57 (function_specifier -> INLINE .)
    LONG            reduce using rule 57 (function_specifier -> INLINE .)
    FLOAT           reduce using rule 57 (function_specifier -> INLINE .)
    DOUBLE          reduce using rule 57 (function_specifier -> INLINE .)
    _COMPLEX        reduce using rule 57 (function_specifier -> INLINE .)
    SIGNED          reduce using rule 57 (function_specifier -> INLINE .)
    UNSIGNED        reduce using rule 57 (function_specifier -> INLINE .)
    AUTO            reduce using rule 57 (function_specifier -> INLINE .)
    REGISTER        reduce using rule 57 (function_specifier -> INLINE .)
    STATIC          reduce using rule 57 (function_specifier -> INLINE .)
    EXTERN          reduce using rule 57 (function_specifier -> INLINE .)
    TYPEDEF         reduce using rule 57 (function_specifier -> INLINE .)
    INLINE          reduce using rule 57 (function_specifier -> INLINE .)
    TYPEID          reduce using rule 57 (function_specifier -> INLINE .)
    ENUM            reduce using rule 57 (function_specifier -> INLINE .)
    STRUCT          reduce using rule 57 (function_specifier -> INLINE .)
    UNION           reduce using rule 57 (function_specifier -> INLINE .)
    ID              reduce using rule 57 (function_specifier -> INLINE .)
    LPAREN          reduce using rule 57 (function_specifier -> INLINE .)
    TIMES           reduce using rule 57 (function_specifier -> INLINE .)
    LBRACKET        reduce using rule 57 (function_specifier -> INLINE .)
    COMMA           reduce using rule 57 (function_specifier -> INLINE .)
    RPAREN          reduce using rule 57 (function_specifier -> INLINE .)
    SEMI            reduce using rule 57 (function_specifier -> INLINE .)


state 17

    (34) external_declaration -> SEMI .

    SEMI            reduce using rule 34 (external_declaration -> SEMI .)
    PPHASH          reduce using rule 34 (external_declaration -> SEMI .)
    ID              reduce using rule 34 (external_declaration -> SEMI .)
    LPAREN          reduce using rule 34 (external_declaration -> SEMI .)
    TIMES           reduce using rule 34 (external_declaration -> SEMI .)
    CONST           reduce using rule 34 (external_declaration -> SEMI .)
    RESTRICT        reduce using rule 34 (external_declaration -> SEMI .)
    VOLATILE        reduce using rule 34 (external_declaration -> SEMI .)
    VOID            reduce using rule 34 (external_declaration -> SEMI .)
    _BOOL           reduce using rule 34 (external_declaration -> SEMI .)
    CHAR            reduce using rule 34 (external_declaration -> SEMI .)
    SHORT           reduce using rule 34 (external_declaration -> SEMI .)
    INT             reduce using rule 34 (external_declaration -> SEMI .)
    LONG            reduce using rule 34 (external_declaration -> SEMI .)
    FLOAT           reduce using rule 34 (external_declaration -> SEMI .)
    DOUBLE          reduce using rule 34 (external_declaration -> SEMI .)
    _COMPLEX        reduce using rule 34 (external_declaration -> SEMI .)
    SIGNED          reduce using rule 34 (external_declaration -> SEMI .)
    UNSIGNED        reduce using rule 34 (external_declaration -> SEMI .)
    AUTO            reduce using rule 34 (external_declaration -> SEMI .)
    REGISTER        reduce using rule 34 (external_declaration -> SEMI .)
    STATIC          reduce using rule 34 (external_declaration -> SEMI .)
    EXTERN          reduce using rule 34 (external_declaration -> SEMI .)
    TYPEDEF         reduce using rule 34 (external_declaration -> SEMI .)
    INLINE          reduce using rule 34 (external_declaration -> SEMI .)
    TYPEID          reduce using rule 34 (external_declaration -> SEMI .)
    ENUM            reduce using rule 34 (external_declaration -> SEMI .)
    STRUCT          reduce using rule 34 (external_declaration -> SEMI .)
    UNION           reduce using rule 34 (external_declaration -> SEMI .)
    $end            reduce using rule 34 (external_declaration -> SEMI .)


state 18

    (32) external_declaration -> declaration .

    SEMI            reduce using rule 32 (external_declaration -> declaration .)
    PPHASH          reduce using rule 32 (external_declaration -> declaration .)
    ID              reduce using rule 32 (external_declaration -> declaration .)
    LPAREN          reduce using rule 32 (external_declaration -> declaration .)
    TIMES           reduce using rule 32 (external_declaration -> declaration .)
    CONST           reduce using rule 32 (external_declaration -> declaration .)
    RESTRICT        reduce using rule 32 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 32 (external_declaration -> declaration .)
    VOID            reduce using rule 32 (external_declaration -> declaration .)
    _BOOL           reduce using rule 32 (external_declaration -> declaration .)
    CHAR            reduce using rule 32 (external_declaration -> declaration .)
    SHORT           reduce using rule 32 (external_declaration -> declaration .)
    INT             reduce using rule 32 (external_declaration -> declaration .)
    LONG            reduce using rule 32 (external_declaration -> declaration .)
    FLOAT           reduce using rule 32 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 32 (external_declaration -> declaration .)
    _COMPLEX        reduce using rule 32 (external_declaration -> declaration .)
    SIGNED          reduce using rule 32 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 32 (external_declaration -> declaration .)
    AUTO            reduce using rule 32 (external_declaration -> declaration .)
    REGISTER        reduce using rule 32 (external_declaration -> declaration .)
    STATIC          reduce using rule 32 (external_declaration -> declaration .)
    EXTERN          reduce using rule 32 (external_declaration -> declaration .)
    TYPEDEF         reduce using rule 32 (external_declaration -> declaration .)
    INLINE          reduce using rule 32 (external_declaration -> declaration .)
    TYPEID          reduce using rule 32 (external_declaration -> declaration .)
    ENUM            reduce using rule 32 (external_declaration -> declaration .)
    STRUCT          reduce using rule 32 (external_declaration -> declaration .)
    UNION           reduce using rule 32 (external_declaration -> declaration .)
    $end            reduce using rule 32 (external_declaration -> declaration .)


state 19

    (60) type_specifier -> CHAR .

    CONST           reduce using rule 60 (type_specifier -> CHAR .)
    RESTRICT        reduce using rule 60 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 60 (type_specifier -> CHAR .)
    VOID            reduce using rule 60 (type_specifier -> CHAR .)
    _BOOL           reduce using rule 60 (type_specifier -> CHAR .)
    CHAR            reduce using rule 60 (type_specifier -> CHAR .)
    SHORT           reduce using rule 60 (type_specifier -> CHAR .)
    INT             reduce using rule 60 (type_specifier -> CHAR .)
    LONG            reduce using rule 60 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 60 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 60 (type_specifier -> CHAR .)
    _COMPLEX        reduce using rule 60 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 60 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 60 (type_specifier -> CHAR .)
    AUTO            reduce using rule 60 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 60 (type_specifier -> CHAR .)
    STATIC          reduce using rule 60 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 60 (type_specifier -> CHAR .)
    TYPEDEF         reduce using rule 60 (type_specifier -> CHAR .)
    INLINE          reduce using rule 60 (type_specifier -> CHAR .)
    TYPEID          reduce using rule 60 (type_specifier -> CHAR .)
    ENUM            reduce using rule 60 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 60 (type_specifier -> CHAR .)
    UNION           reduce using rule 60 (type_specifier -> CHAR .)
    ID              reduce using rule 60 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 60 (type_specifier -> CHAR .)
    TIMES           reduce using rule 60 (type_specifier -> CHAR .)
    LBRACKET        reduce using rule 60 (type_specifier -> CHAR .)
    COMMA           reduce using rule 60 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 60 (type_specifier -> CHAR .)
    COLON           reduce using rule 60 (type_specifier -> CHAR .)
    SEMI            reduce using rule 60 (type_specifier -> CHAR .)


state 20

    (51) declaration_specifiers -> function_specifier . declaration_specifiers_opt
    (9) declaration_specifiers_opt -> . empty
    (10) declaration_specifiers_opt -> . declaration_specifiers
    (251) empty -> .
    (48) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (49) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (50) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (51) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (52) storage_class_specifier -> . AUTO
    (53) storage_class_specifier -> . REGISTER
    (54) storage_class_specifier -> . STATIC
    (55) storage_class_specifier -> . EXTERN
    (56) storage_class_specifier -> . TYPEDEF
    (57) function_specifier -> . INLINE
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    ID              reduce using rule 251 (empty -> .)
    LPAREN          reduce using rule 251 (empty -> .)
    TIMES           reduce using rule 251 (empty -> .)
    SEMI            reduce using rule 251 (empty -> .)
    LBRACKET        reduce using rule 251 (empty -> .)
    COMMA           reduce using rule 251 (empty -> .)
    RPAREN          reduce using rule 251 (empty -> .)
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    AUTO            shift and go to state 35
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 4
    EXTERN          shift and go to state 34
    TYPEDEF         shift and go to state 42
    INLINE          shift and go to state 16
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    declaration_specifiers_opt     shift and go to state 63
    struct_or_union_specifier      shift and go to state 31
    storage_class_specifier        shift and go to state 7
    empty                          shift and go to state 53
    enum_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 39
    declaration_specifiers         shift and go to state 52
    typedef_name                   shift and go to state 48
    function_specifier             shift and go to state 20
    type_specifier                 shift and go to state 14
    struct_or_union                shift and go to state 29

state 21

    (35) pp_directive -> PPHASH .

    SEMI            reduce using rule 35 (pp_directive -> PPHASH .)
    PPHASH          reduce using rule 35 (pp_directive -> PPHASH .)
    ID              reduce using rule 35 (pp_directive -> PPHASH .)
    LPAREN          reduce using rule 35 (pp_directive -> PPHASH .)
    TIMES           reduce using rule 35 (pp_directive -> PPHASH .)
    CONST           reduce using rule 35 (pp_directive -> PPHASH .)
    RESTRICT        reduce using rule 35 (pp_directive -> PPHASH .)
    VOLATILE        reduce using rule 35 (pp_directive -> PPHASH .)
    VOID            reduce using rule 35 (pp_directive -> PPHASH .)
    _BOOL           reduce using rule 35 (pp_directive -> PPHASH .)
    CHAR            reduce using rule 35 (pp_directive -> PPHASH .)
    SHORT           reduce using rule 35 (pp_directive -> PPHASH .)
    INT             reduce using rule 35 (pp_directive -> PPHASH .)
    LONG            reduce using rule 35 (pp_directive -> PPHASH .)
    FLOAT           reduce using rule 35 (pp_directive -> PPHASH .)
    DOUBLE          reduce using rule 35 (pp_directive -> PPHASH .)
    _COMPLEX        reduce using rule 35 (pp_directive -> PPHASH .)
    SIGNED          reduce using rule 35 (pp_directive -> PPHASH .)
    UNSIGNED        reduce using rule 35 (pp_directive -> PPHASH .)
    AUTO            reduce using rule 35 (pp_directive -> PPHASH .)
    REGISTER        reduce using rule 35 (pp_directive -> PPHASH .)
    STATIC          reduce using rule 35 (pp_directive -> PPHASH .)
    EXTERN          reduce using rule 35 (pp_directive -> PPHASH .)
    TYPEDEF         reduce using rule 35 (pp_directive -> PPHASH .)
    INLINE          reduce using rule 35 (pp_directive -> PPHASH .)
    TYPEID          reduce using rule 35 (pp_directive -> PPHASH .)
    ENUM            reduce using rule 35 (pp_directive -> PPHASH .)
    STRUCT          reduce using rule 35 (pp_directive -> PPHASH .)
    UNION           reduce using rule 35 (pp_directive -> PPHASH .)
    $end            reduce using rule 35 (pp_directive -> PPHASH .)


state 22

    (66) type_specifier -> _COMPLEX .

    CONST           reduce using rule 66 (type_specifier -> _COMPLEX .)
    RESTRICT        reduce using rule 66 (type_specifier -> _COMPLEX .)
    VOLATILE        reduce using rule 66 (type_specifier -> _COMPLEX .)
    VOID            reduce using rule 66 (type_specifier -> _COMPLEX .)
    _BOOL           reduce using rule 66 (type_specifier -> _COMPLEX .)
    CHAR            reduce using rule 66 (type_specifier -> _COMPLEX .)
    SHORT           reduce using rule 66 (type_specifier -> _COMPLEX .)
    INT             reduce using rule 66 (type_specifier -> _COMPLEX .)
    LONG            reduce using rule 66 (type_specifier -> _COMPLEX .)
    FLOAT           reduce using rule 66 (type_specifier -> _COMPLEX .)
    DOUBLE          reduce using rule 66 (type_specifier -> _COMPLEX .)
    _COMPLEX        reduce using rule 66 (type_specifier -> _COMPLEX .)
    SIGNED          reduce using rule 66 (type_specifier -> _COMPLEX .)
    UNSIGNED        reduce using rule 66 (type_specifier -> _COMPLEX .)
    AUTO            reduce using rule 66 (type_specifier -> _COMPLEX .)
    REGISTER        reduce using rule 66 (type_specifier -> _COMPLEX .)
    STATIC          reduce using rule 66 (type_specifier -> _COMPLEX .)
    EXTERN          reduce using rule 66 (type_specifier -> _COMPLEX .)
    TYPEDEF         reduce using rule 66 (type_specifier -> _COMPLEX .)
    INLINE          reduce using rule 66 (type_specifier -> _COMPLEX .)
    TYPEID          reduce using rule 66 (type_specifier -> _COMPLEX .)
    ENUM            reduce using rule 66 (type_specifier -> _COMPLEX .)
    STRUCT          reduce using rule 66 (type_specifier -> _COMPLEX .)
    UNION           reduce using rule 66 (type_specifier -> _COMPLEX .)
    ID              reduce using rule 66 (type_specifier -> _COMPLEX .)
    LPAREN          reduce using rule 66 (type_specifier -> _COMPLEX .)
    TIMES           reduce using rule 66 (type_specifier -> _COMPLEX .)
    LBRACKET        reduce using rule 66 (type_specifier -> _COMPLEX .)
    COMMA           reduce using rule 66 (type_specifier -> _COMPLEX .)
    RPAREN          reduce using rule 66 (type_specifier -> _COMPLEX .)
    COLON           reduce using rule 66 (type_specifier -> _COMPLEX .)
    SEMI            reduce using rule 66 (type_specifier -> _COMPLEX .)


state 23

    (58) type_specifier -> VOID .

    CONST           reduce using rule 58 (type_specifier -> VOID .)
    RESTRICT        reduce using rule 58 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 58 (type_specifier -> VOID .)
    VOID            reduce using rule 58 (type_specifier -> VOID .)
    _BOOL           reduce using rule 58 (type_specifier -> VOID .)
    CHAR            reduce using rule 58 (type_specifier -> VOID .)
    SHORT           reduce using rule 58 (type_specifier -> VOID .)
    INT             reduce using rule 58 (type_specifier -> VOID .)
    LONG            reduce using rule 58 (type_specifier -> VOID .)
    FLOAT           reduce using rule 58 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 58 (type_specifier -> VOID .)
    _COMPLEX        reduce using rule 58 (type_specifier -> VOID .)
    SIGNED          reduce using rule 58 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 58 (type_specifier -> VOID .)
    AUTO            reduce using rule 58 (type_specifier -> VOID .)
    REGISTER        reduce using rule 58 (type_specifier -> VOID .)
    STATIC          reduce using rule 58 (type_specifier -> VOID .)
    EXTERN          reduce using rule 58 (type_specifier -> VOID .)
    TYPEDEF         reduce using rule 58 (type_specifier -> VOID .)
    INLINE          reduce using rule 58 (type_specifier -> VOID .)
    TYPEID          reduce using rule 58 (type_specifier -> VOID .)
    ENUM            reduce using rule 58 (type_specifier -> VOID .)
    STRUCT          reduce using rule 58 (type_specifier -> VOID .)
    UNION           reduce using rule 58 (type_specifier -> VOID .)
    ID              reduce using rule 58 (type_specifier -> VOID .)
    LPAREN          reduce using rule 58 (type_specifier -> VOID .)
    TIMES           reduce using rule 58 (type_specifier -> VOID .)
    LBRACKET        reduce using rule 58 (type_specifier -> VOID .)
    COMMA           reduce using rule 58 (type_specifier -> VOID .)
    RPAREN          reduce using rule 58 (type_specifier -> VOID .)
    COLON           reduce using rule 58 (type_specifier -> VOID .)
    SEMI            reduce using rule 58 (type_specifier -> VOID .)


state 24

    (28) translation_unit_or_empty -> empty .

    $end            reduce using rule 28 (translation_unit_or_empty -> empty .)


state 25

    (36) function_definition -> declarator . declaration_list_opt compound_statement
    (7) declaration_list_opt -> . empty
    (8) declaration_list_opt -> . declaration_list
    (251) empty -> .
    (46) declaration_list -> . declaration
    (47) declaration_list -> . declaration_list declaration
    (45) declaration -> . decl_body SEMI
    (44) decl_body -> . declaration_specifiers init_declarator_list_opt
    (48) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (49) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (50) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (51) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (52) storage_class_specifier -> . AUTO
    (53) storage_class_specifier -> . REGISTER
    (54) storage_class_specifier -> . STATIC
    (55) storage_class_specifier -> . EXTERN
    (56) storage_class_specifier -> . TYPEDEF
    (57) function_specifier -> . INLINE
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    LBRACE          reduce using rule 251 (empty -> .)
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    AUTO            shift and go to state 35
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 4
    EXTERN          shift and go to state 34
    TYPEDEF         shift and go to state 42
    INLINE          shift and go to state 16
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    storage_class_specifier        shift and go to state 7
    struct_or_union_specifier      shift and go to state 31
    enum_specifier                 shift and go to state 8
    decl_body                      shift and go to state 38
    type_qualifier                 shift and go to state 39
    declaration_list               shift and go to state 64
    type_specifier                 shift and go to state 14
    declaration                    shift and go to state 65
    declaration_list_opt           shift and go to state 67
    function_specifier             shift and go to state 20
    empty                          shift and go to state 66
    declaration_specifiers         shift and go to state 68
    typedef_name                   shift and go to state 48
    struct_or_union                shift and go to state 29

state 26

    (72) type_qualifier -> CONST .

    CONST           reduce using rule 72 (type_qualifier -> CONST .)
    RESTRICT        reduce using rule 72 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 72 (type_qualifier -> CONST .)
    VOID            reduce using rule 72 (type_qualifier -> CONST .)
    _BOOL           reduce using rule 72 (type_qualifier -> CONST .)
    CHAR            reduce using rule 72 (type_qualifier -> CONST .)
    SHORT           reduce using rule 72 (type_qualifier -> CONST .)
    INT             reduce using rule 72 (type_qualifier -> CONST .)
    LONG            reduce using rule 72 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 72 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 72 (type_qualifier -> CONST .)
    _COMPLEX        reduce using rule 72 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 72 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 72 (type_qualifier -> CONST .)
    AUTO            reduce using rule 72 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 72 (type_qualifier -> CONST .)
    STATIC          reduce using rule 72 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 72 (type_qualifier -> CONST .)
    TYPEDEF         reduce using rule 72 (type_qualifier -> CONST .)
    INLINE          reduce using rule 72 (type_qualifier -> CONST .)
    TYPEID          reduce using rule 72 (type_qualifier -> CONST .)
    ENUM            reduce using rule 72 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 72 (type_qualifier -> CONST .)
    UNION           reduce using rule 72 (type_qualifier -> CONST .)
    ID              reduce using rule 72 (type_qualifier -> CONST .)
    LPAREN          reduce using rule 72 (type_qualifier -> CONST .)
    TIMES           reduce using rule 72 (type_qualifier -> CONST .)
    LBRACKET        reduce using rule 72 (type_qualifier -> CONST .)
    COMMA           reduce using rule 72 (type_qualifier -> CONST .)
    RPAREN          reduce using rule 72 (type_qualifier -> CONST .)
    COLON           reduce using rule 72 (type_qualifier -> CONST .)
    SEMI            reduce using rule 72 (type_qualifier -> CONST .)


state 27

    (64) type_specifier -> FLOAT .

    CONST           reduce using rule 64 (type_specifier -> FLOAT .)
    RESTRICT        reduce using rule 64 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 64 (type_specifier -> FLOAT .)
    VOID            reduce using rule 64 (type_specifier -> FLOAT .)
    _BOOL           reduce using rule 64 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 64 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 64 (type_specifier -> FLOAT .)
    INT             reduce using rule 64 (type_specifier -> FLOAT .)
    LONG            reduce using rule 64 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 64 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 64 (type_specifier -> FLOAT .)
    _COMPLEX        reduce using rule 64 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 64 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 64 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 64 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 64 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 64 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 64 (type_specifier -> FLOAT .)
    TYPEDEF         reduce using rule 64 (type_specifier -> FLOAT .)
    INLINE          reduce using rule 64 (type_specifier -> FLOAT .)
    TYPEID          reduce using rule 64 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 64 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 64 (type_specifier -> FLOAT .)
    UNION           reduce using rule 64 (type_specifier -> FLOAT .)
    ID              reduce using rule 64 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 64 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 64 (type_specifier -> FLOAT .)
    LBRACKET        reduce using rule 64 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 64 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 64 (type_specifier -> FLOAT .)
    COLON           reduce using rule 64 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 64 (type_specifier -> FLOAT .)


state 28

    (107) declarator -> pointer . direct_declarator
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . LPAREN declarator RPAREN
    (110) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (111) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (112) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (113) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    ID              shift and go to state 46
    LPAREN          shift and go to state 32

    direct_declarator              shift and go to state 69

state 29

    (81) struct_or_union_specifier -> struct_or_union . ID
    (82) struct_or_union_specifier -> struct_or_union . TYPEID
    (83) struct_or_union_specifier -> struct_or_union . brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> struct_or_union . ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> struct_or_union . TYPEID brace_open struct_declaration_list brace_close
    (249) brace_open -> . LBRACE

    ID              shift and go to state 70
    TYPEID          shift and go to state 71
    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 72

state 30

    (73) type_qualifier -> RESTRICT .

    CONST           reduce using rule 73 (type_qualifier -> RESTRICT .)
    RESTRICT        reduce using rule 73 (type_qualifier -> RESTRICT .)
    VOLATILE        reduce using rule 73 (type_qualifier -> RESTRICT .)
    VOID            reduce using rule 73 (type_qualifier -> RESTRICT .)
    _BOOL           reduce using rule 73 (type_qualifier -> RESTRICT .)
    CHAR            reduce using rule 73 (type_qualifier -> RESTRICT .)
    SHORT           reduce using rule 73 (type_qualifier -> RESTRICT .)
    INT             reduce using rule 73 (type_qualifier -> RESTRICT .)
    LONG            reduce using rule 73 (type_qualifier -> RESTRICT .)
    FLOAT           reduce using rule 73 (type_qualifier -> RESTRICT .)
    DOUBLE          reduce using rule 73 (type_qualifier -> RESTRICT .)
    _COMPLEX        reduce using rule 73 (type_qualifier -> RESTRICT .)
    SIGNED          reduce using rule 73 (type_qualifier -> RESTRICT .)
    UNSIGNED        reduce using rule 73 (type_qualifier -> RESTRICT .)
    AUTO            reduce using rule 73 (type_qualifier -> RESTRICT .)
    REGISTER        reduce using rule 73 (type_qualifier -> RESTRICT .)
    STATIC          reduce using rule 73 (type_qualifier -> RESTRICT .)
    EXTERN          reduce using rule 73 (type_qualifier -> RESTRICT .)
    TYPEDEF         reduce using rule 73 (type_qualifier -> RESTRICT .)
    INLINE          reduce using rule 73 (type_qualifier -> RESTRICT .)
    TYPEID          reduce using rule 73 (type_qualifier -> RESTRICT .)
    ENUM            reduce using rule 73 (type_qualifier -> RESTRICT .)
    STRUCT          reduce using rule 73 (type_qualifier -> RESTRICT .)
    UNION           reduce using rule 73 (type_qualifier -> RESTRICT .)
    ID              reduce using rule 73 (type_qualifier -> RESTRICT .)
    LPAREN          reduce using rule 73 (type_qualifier -> RESTRICT .)
    TIMES           reduce using rule 73 (type_qualifier -> RESTRICT .)
    LBRACKET        reduce using rule 73 (type_qualifier -> RESTRICT .)
    COMMA           reduce using rule 73 (type_qualifier -> RESTRICT .)
    RPAREN          reduce using rule 73 (type_qualifier -> RESTRICT .)
    COLON           reduce using rule 73 (type_qualifier -> RESTRICT .)
    SEMI            reduce using rule 73 (type_qualifier -> RESTRICT .)


state 31

    (71) type_specifier -> struct_or_union_specifier .

    CONST           reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    RESTRICT        reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    _BOOL           reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    _COMPLEX        reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    TYPEDEF         reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    INLINE          reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    TYPEID          reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    ID              reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    LPAREN          reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    TIMES           reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    LBRACKET        reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    RPAREN          reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 71 (type_specifier -> struct_or_union_specifier .)
    SEMI            reduce using rule 71 (type_specifier -> struct_or_union_specifier .)


state 32

    (109) direct_declarator -> LPAREN . declarator RPAREN
    (106) declarator -> . direct_declarator
    (107) declarator -> . pointer direct_declarator
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . LPAREN declarator RPAREN
    (110) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (111) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (112) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (113) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (114) pointer -> . TIMES type_qualifier_list_opt
    (115) pointer -> . TIMES type_qualifier_list_opt pointer

    ID              shift and go to state 46
    LPAREN          shift and go to state 32
    TIMES           shift and go to state 11

    pointer                        shift and go to state 28
    declarator                     shift and go to state 73
    direct_declarator              shift and go to state 44

state 33

    (86) struct_or_union -> STRUCT .

    ID              reduce using rule 86 (struct_or_union -> STRUCT .)
    TYPEID          reduce using rule 86 (struct_or_union -> STRUCT .)
    LBRACE          reduce using rule 86 (struct_or_union -> STRUCT .)


state 34

    (55) storage_class_specifier -> EXTERN .

    CONST           reduce using rule 55 (storage_class_specifier -> EXTERN .)
    RESTRICT        reduce using rule 55 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 55 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 55 (storage_class_specifier -> EXTERN .)
    _BOOL           reduce using rule 55 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 55 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 55 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 55 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 55 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 55 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 55 (storage_class_specifier -> EXTERN .)
    _COMPLEX        reduce using rule 55 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 55 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 55 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 55 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 55 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 55 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 55 (storage_class_specifier -> EXTERN .)
    TYPEDEF         reduce using rule 55 (storage_class_specifier -> EXTERN .)
    INLINE          reduce using rule 55 (storage_class_specifier -> EXTERN .)
    TYPEID          reduce using rule 55 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 55 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 55 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 55 (storage_class_specifier -> EXTERN .)
    ID              reduce using rule 55 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 55 (storage_class_specifier -> EXTERN .)
    TIMES           reduce using rule 55 (storage_class_specifier -> EXTERN .)
    SEMI            reduce using rule 55 (storage_class_specifier -> EXTERN .)
    LBRACKET        reduce using rule 55 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 55 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 55 (storage_class_specifier -> EXTERN .)


state 35

    (52) storage_class_specifier -> AUTO .

    CONST           reduce using rule 52 (storage_class_specifier -> AUTO .)
    RESTRICT        reduce using rule 52 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 52 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 52 (storage_class_specifier -> AUTO .)
    _BOOL           reduce using rule 52 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 52 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 52 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 52 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 52 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 52 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 52 (storage_class_specifier -> AUTO .)
    _COMPLEX        reduce using rule 52 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 52 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 52 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 52 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 52 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 52 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 52 (storage_class_specifier -> AUTO .)
    TYPEDEF         reduce using rule 52 (storage_class_specifier -> AUTO .)
    INLINE          reduce using rule 52 (storage_class_specifier -> AUTO .)
    TYPEID          reduce using rule 52 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 52 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 52 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 52 (storage_class_specifier -> AUTO .)
    ID              reduce using rule 52 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 52 (storage_class_specifier -> AUTO .)
    TIMES           reduce using rule 52 (storage_class_specifier -> AUTO .)
    SEMI            reduce using rule 52 (storage_class_specifier -> AUTO .)
    LBRACKET        reduce using rule 52 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 52 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 52 (storage_class_specifier -> AUTO .)


state 36

    (170) typedef_name -> TYPEID .

    CONST           reduce using rule 170 (typedef_name -> TYPEID .)
    RESTRICT        reduce using rule 170 (typedef_name -> TYPEID .)
    VOLATILE        reduce using rule 170 (typedef_name -> TYPEID .)
    VOID            reduce using rule 170 (typedef_name -> TYPEID .)
    _BOOL           reduce using rule 170 (typedef_name -> TYPEID .)
    CHAR            reduce using rule 170 (typedef_name -> TYPEID .)
    SHORT           reduce using rule 170 (typedef_name -> TYPEID .)
    INT             reduce using rule 170 (typedef_name -> TYPEID .)
    LONG            reduce using rule 170 (typedef_name -> TYPEID .)
    FLOAT           reduce using rule 170 (typedef_name -> TYPEID .)
    DOUBLE          reduce using rule 170 (typedef_name -> TYPEID .)
    _COMPLEX        reduce using rule 170 (typedef_name -> TYPEID .)
    SIGNED          reduce using rule 170 (typedef_name -> TYPEID .)
    UNSIGNED        reduce using rule 170 (typedef_name -> TYPEID .)
    AUTO            reduce using rule 170 (typedef_name -> TYPEID .)
    REGISTER        reduce using rule 170 (typedef_name -> TYPEID .)
    STATIC          reduce using rule 170 (typedef_name -> TYPEID .)
    EXTERN          reduce using rule 170 (typedef_name -> TYPEID .)
    TYPEDEF         reduce using rule 170 (typedef_name -> TYPEID .)
    INLINE          reduce using rule 170 (typedef_name -> TYPEID .)
    TYPEID          reduce using rule 170 (typedef_name -> TYPEID .)
    ENUM            reduce using rule 170 (typedef_name -> TYPEID .)
    STRUCT          reduce using rule 170 (typedef_name -> TYPEID .)
    UNION           reduce using rule 170 (typedef_name -> TYPEID .)
    ID              reduce using rule 170 (typedef_name -> TYPEID .)
    LPAREN          reduce using rule 170 (typedef_name -> TYPEID .)
    TIMES           reduce using rule 170 (typedef_name -> TYPEID .)
    SEMI            reduce using rule 170 (typedef_name -> TYPEID .)
    LBRACKET        reduce using rule 170 (typedef_name -> TYPEID .)
    COMMA           reduce using rule 170 (typedef_name -> TYPEID .)
    RPAREN          reduce using rule 170 (typedef_name -> TYPEID .)
    COLON           reduce using rule 170 (typedef_name -> TYPEID .)


state 37

    (74) type_qualifier -> VOLATILE .

    CONST           reduce using rule 74 (type_qualifier -> VOLATILE .)
    RESTRICT        reduce using rule 74 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 74 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 74 (type_qualifier -> VOLATILE .)
    _BOOL           reduce using rule 74 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 74 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 74 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 74 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 74 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 74 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 74 (type_qualifier -> VOLATILE .)
    _COMPLEX        reduce using rule 74 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 74 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 74 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 74 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 74 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 74 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 74 (type_qualifier -> VOLATILE .)
    TYPEDEF         reduce using rule 74 (type_qualifier -> VOLATILE .)
    INLINE          reduce using rule 74 (type_qualifier -> VOLATILE .)
    TYPEID          reduce using rule 74 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 74 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 74 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 74 (type_qualifier -> VOLATILE .)
    ID              reduce using rule 74 (type_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 74 (type_qualifier -> VOLATILE .)
    TIMES           reduce using rule 74 (type_qualifier -> VOLATILE .)
    LBRACKET        reduce using rule 74 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 74 (type_qualifier -> VOLATILE .)
    RPAREN          reduce using rule 74 (type_qualifier -> VOLATILE .)
    COLON           reduce using rule 74 (type_qualifier -> VOLATILE .)
    SEMI            reduce using rule 74 (type_qualifier -> VOLATILE .)


state 38

    (45) declaration -> decl_body . SEMI

    SEMI            shift and go to state 74


state 39

    (48) declaration_specifiers -> type_qualifier . declaration_specifiers_opt
    (9) declaration_specifiers_opt -> . empty
    (10) declaration_specifiers_opt -> . declaration_specifiers
    (251) empty -> .
    (48) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (49) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (50) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (51) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (52) storage_class_specifier -> . AUTO
    (53) storage_class_specifier -> . REGISTER
    (54) storage_class_specifier -> . STATIC
    (55) storage_class_specifier -> . EXTERN
    (56) storage_class_specifier -> . TYPEDEF
    (57) function_specifier -> . INLINE
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    ID              reduce using rule 251 (empty -> .)
    LPAREN          reduce using rule 251 (empty -> .)
    TIMES           reduce using rule 251 (empty -> .)
    SEMI            reduce using rule 251 (empty -> .)
    LBRACKET        reduce using rule 251 (empty -> .)
    COMMA           reduce using rule 251 (empty -> .)
    RPAREN          reduce using rule 251 (empty -> .)
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    AUTO            shift and go to state 35
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 4
    EXTERN          shift and go to state 34
    TYPEDEF         shift and go to state 42
    INLINE          shift and go to state 16
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    declaration_specifiers_opt     shift and go to state 75
    struct_or_union_specifier      shift and go to state 31
    storage_class_specifier        shift and go to state 7
    empty                          shift and go to state 53
    enum_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 39
    declaration_specifiers         shift and go to state 52
    typedef_name                   shift and go to state 48
    function_specifier             shift and go to state 20
    type_specifier                 shift and go to state 14
    struct_or_union                shift and go to state 29

state 40

    (87) struct_or_union -> UNION .

    ID              reduce using rule 87 (struct_or_union -> UNION .)
    TYPEID          reduce using rule 87 (struct_or_union -> UNION .)
    LBRACE          reduce using rule 87 (struct_or_union -> UNION .)


state 41

    (37) function_definition -> declaration_specifiers . declarator declaration_list_opt compound_statement
    (44) decl_body -> declaration_specifiers . init_declarator_list_opt
    (106) declarator -> . direct_declarator
    (107) declarator -> . pointer direct_declarator
    (17) init_declarator_list_opt -> . empty
    (18) init_declarator_list_opt -> . init_declarator_list
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . LPAREN declarator RPAREN
    (110) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (111) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (112) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (113) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (114) pointer -> . TIMES type_qualifier_list_opt
    (115) pointer -> . TIMES type_qualifier_list_opt pointer
    (251) empty -> .
    (75) init_declarator_list -> . init_declarator
    (76) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (77) init_declarator -> . declarator
    (78) init_declarator -> . declarator EQUALS initializer

    ID              shift and go to state 46
    LPAREN          shift and go to state 32
    TIMES           shift and go to state 11
    SEMI            reduce using rule 251 (empty -> .)

    init_declarator_list_opt       shift and go to state 76
    pointer                        shift and go to state 28
    init_declarator                shift and go to state 80
    init_declarator_list           shift and go to state 77
    empty                          shift and go to state 78
    declarator                     shift and go to state 79
    direct_declarator              shift and go to state 44

state 42

    (56) storage_class_specifier -> TYPEDEF .

    CONST           reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    RESTRICT        reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    _BOOL           reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    _COMPLEX        reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    TYPEDEF         reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    INLINE          reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    TYPEID          reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    ID              reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    TIMES           reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    SEMI            reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    LBRACKET        reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 56 (storage_class_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 56 (storage_class_specifier -> TYPEDEF .)


state 43

    (61) type_specifier -> SHORT .

    CONST           reduce using rule 61 (type_specifier -> SHORT .)
    RESTRICT        reduce using rule 61 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 61 (type_specifier -> SHORT .)
    VOID            reduce using rule 61 (type_specifier -> SHORT .)
    _BOOL           reduce using rule 61 (type_specifier -> SHORT .)
    CHAR            reduce using rule 61 (type_specifier -> SHORT .)
    SHORT           reduce using rule 61 (type_specifier -> SHORT .)
    INT             reduce using rule 61 (type_specifier -> SHORT .)
    LONG            reduce using rule 61 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 61 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 61 (type_specifier -> SHORT .)
    _COMPLEX        reduce using rule 61 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 61 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 61 (type_specifier -> SHORT .)
    AUTO            reduce using rule 61 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 61 (type_specifier -> SHORT .)
    STATIC          reduce using rule 61 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 61 (type_specifier -> SHORT .)
    TYPEDEF         reduce using rule 61 (type_specifier -> SHORT .)
    INLINE          reduce using rule 61 (type_specifier -> SHORT .)
    TYPEID          reduce using rule 61 (type_specifier -> SHORT .)
    ENUM            reduce using rule 61 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 61 (type_specifier -> SHORT .)
    UNION           reduce using rule 61 (type_specifier -> SHORT .)
    ID              reduce using rule 61 (type_specifier -> SHORT .)
    LPAREN          reduce using rule 61 (type_specifier -> SHORT .)
    TIMES           reduce using rule 61 (type_specifier -> SHORT .)
    LBRACKET        reduce using rule 61 (type_specifier -> SHORT .)
    COMMA           reduce using rule 61 (type_specifier -> SHORT .)
    RPAREN          reduce using rule 61 (type_specifier -> SHORT .)
    COLON           reduce using rule 61 (type_specifier -> SHORT .)
    SEMI            reduce using rule 61 (type_specifier -> SHORT .)


state 44

    (106) declarator -> direct_declarator .
    (110) direct_declarator -> direct_declarator . LBRACKET assignment_expression_opt RBRACKET
    (111) direct_declarator -> direct_declarator . LBRACKET TIMES RBRACKET
    (112) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (113) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN

    EQUALS          reduce using rule 106 (declarator -> direct_declarator .)
    COMMA           reduce using rule 106 (declarator -> direct_declarator .)
    SEMI            reduce using rule 106 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 106 (declarator -> direct_declarator .)
    CONST           reduce using rule 106 (declarator -> direct_declarator .)
    RESTRICT        reduce using rule 106 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 106 (declarator -> direct_declarator .)
    VOID            reduce using rule 106 (declarator -> direct_declarator .)
    _BOOL           reduce using rule 106 (declarator -> direct_declarator .)
    CHAR            reduce using rule 106 (declarator -> direct_declarator .)
    SHORT           reduce using rule 106 (declarator -> direct_declarator .)
    INT             reduce using rule 106 (declarator -> direct_declarator .)
    LONG            reduce using rule 106 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 106 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 106 (declarator -> direct_declarator .)
    _COMPLEX        reduce using rule 106 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 106 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 106 (declarator -> direct_declarator .)
    AUTO            reduce using rule 106 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 106 (declarator -> direct_declarator .)
    STATIC          reduce using rule 106 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 106 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 106 (declarator -> direct_declarator .)
    INLINE          reduce using rule 106 (declarator -> direct_declarator .)
    TYPEID          reduce using rule 106 (declarator -> direct_declarator .)
    ENUM            reduce using rule 106 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 106 (declarator -> direct_declarator .)
    UNION           reduce using rule 106 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 106 (declarator -> direct_declarator .)
    COLON           reduce using rule 106 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 82
    LPAREN          shift and go to state 81


state 45

    (68) type_specifier -> UNSIGNED .

    CONST           reduce using rule 68 (type_specifier -> UNSIGNED .)
    RESTRICT        reduce using rule 68 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 68 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 68 (type_specifier -> UNSIGNED .)
    _BOOL           reduce using rule 68 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 68 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 68 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 68 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 68 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 68 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 68 (type_specifier -> UNSIGNED .)
    _COMPLEX        reduce using rule 68 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 68 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 68 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 68 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 68 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 68 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 68 (type_specifier -> UNSIGNED .)
    TYPEDEF         reduce using rule 68 (type_specifier -> UNSIGNED .)
    INLINE          reduce using rule 68 (type_specifier -> UNSIGNED .)
    TYPEID          reduce using rule 68 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 68 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 68 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 68 (type_specifier -> UNSIGNED .)
    ID              reduce using rule 68 (type_specifier -> UNSIGNED .)
    LPAREN          reduce using rule 68 (type_specifier -> UNSIGNED .)
    TIMES           reduce using rule 68 (type_specifier -> UNSIGNED .)
    LBRACKET        reduce using rule 68 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 68 (type_specifier -> UNSIGNED .)
    RPAREN          reduce using rule 68 (type_specifier -> UNSIGNED .)
    COLON           reduce using rule 68 (type_specifier -> UNSIGNED .)
    SEMI            reduce using rule 68 (type_specifier -> UNSIGNED .)


state 46

    (108) direct_declarator -> ID .

    LBRACKET        reduce using rule 108 (direct_declarator -> ID .)
    LPAREN          reduce using rule 108 (direct_declarator -> ID .)
    CONST           reduce using rule 108 (direct_declarator -> ID .)
    RESTRICT        reduce using rule 108 (direct_declarator -> ID .)
    VOLATILE        reduce using rule 108 (direct_declarator -> ID .)
    VOID            reduce using rule 108 (direct_declarator -> ID .)
    _BOOL           reduce using rule 108 (direct_declarator -> ID .)
    CHAR            reduce using rule 108 (direct_declarator -> ID .)
    SHORT           reduce using rule 108 (direct_declarator -> ID .)
    INT             reduce using rule 108 (direct_declarator -> ID .)
    LONG            reduce using rule 108 (direct_declarator -> ID .)
    FLOAT           reduce using rule 108 (direct_declarator -> ID .)
    DOUBLE          reduce using rule 108 (direct_declarator -> ID .)
    _COMPLEX        reduce using rule 108 (direct_declarator -> ID .)
    SIGNED          reduce using rule 108 (direct_declarator -> ID .)
    UNSIGNED        reduce using rule 108 (direct_declarator -> ID .)
    AUTO            reduce using rule 108 (direct_declarator -> ID .)
    REGISTER        reduce using rule 108 (direct_declarator -> ID .)
    STATIC          reduce using rule 108 (direct_declarator -> ID .)
    EXTERN          reduce using rule 108 (direct_declarator -> ID .)
    TYPEDEF         reduce using rule 108 (direct_declarator -> ID .)
    INLINE          reduce using rule 108 (direct_declarator -> ID .)
    TYPEID          reduce using rule 108 (direct_declarator -> ID .)
    ENUM            reduce using rule 108 (direct_declarator -> ID .)
    STRUCT          reduce using rule 108 (direct_declarator -> ID .)
    UNION           reduce using rule 108 (direct_declarator -> ID .)
    LBRACE          reduce using rule 108 (direct_declarator -> ID .)
    RPAREN          reduce using rule 108 (direct_declarator -> ID .)
    EQUALS          reduce using rule 108 (direct_declarator -> ID .)
    COMMA           reduce using rule 108 (direct_declarator -> ID .)
    SEMI            reduce using rule 108 (direct_declarator -> ID .)
    COLON           reduce using rule 108 (direct_declarator -> ID .)


state 47

    (0) S' -> translation_unit_or_empty .



state 48

    (69) type_specifier -> typedef_name .

    CONST           reduce using rule 69 (type_specifier -> typedef_name .)
    RESTRICT        reduce using rule 69 (type_specifier -> typedef_name .)
    VOLATILE        reduce using rule 69 (type_specifier -> typedef_name .)
    VOID            reduce using rule 69 (type_specifier -> typedef_name .)
    _BOOL           reduce using rule 69 (type_specifier -> typedef_name .)
    CHAR            reduce using rule 69 (type_specifier -> typedef_name .)
    SHORT           reduce using rule 69 (type_specifier -> typedef_name .)
    INT             reduce using rule 69 (type_specifier -> typedef_name .)
    LONG            reduce using rule 69 (type_specifier -> typedef_name .)
    FLOAT           reduce using rule 69 (type_specifier -> typedef_name .)
    DOUBLE          reduce using rule 69 (type_specifier -> typedef_name .)
    _COMPLEX        reduce using rule 69 (type_specifier -> typedef_name .)
    SIGNED          reduce using rule 69 (type_specifier -> typedef_name .)
    UNSIGNED        reduce using rule 69 (type_specifier -> typedef_name .)
    AUTO            reduce using rule 69 (type_specifier -> typedef_name .)
    REGISTER        reduce using rule 69 (type_specifier -> typedef_name .)
    STATIC          reduce using rule 69 (type_specifier -> typedef_name .)
    EXTERN          reduce using rule 69 (type_specifier -> typedef_name .)
    TYPEDEF         reduce using rule 69 (type_specifier -> typedef_name .)
    INLINE          reduce using rule 69 (type_specifier -> typedef_name .)
    TYPEID          reduce using rule 69 (type_specifier -> typedef_name .)
    ENUM            reduce using rule 69 (type_specifier -> typedef_name .)
    STRUCT          reduce using rule 69 (type_specifier -> typedef_name .)
    UNION           reduce using rule 69 (type_specifier -> typedef_name .)
    ID              reduce using rule 69 (type_specifier -> typedef_name .)
    LPAREN          reduce using rule 69 (type_specifier -> typedef_name .)
    TIMES           reduce using rule 69 (type_specifier -> typedef_name .)
    LBRACKET        reduce using rule 69 (type_specifier -> typedef_name .)
    COMMA           reduce using rule 69 (type_specifier -> typedef_name .)
    RPAREN          reduce using rule 69 (type_specifier -> typedef_name .)
    COLON           reduce using rule 69 (type_specifier -> typedef_name .)
    SEMI            reduce using rule 69 (type_specifier -> typedef_name .)


state 49

    (53) storage_class_specifier -> REGISTER .

    CONST           reduce using rule 53 (storage_class_specifier -> REGISTER .)
    RESTRICT        reduce using rule 53 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 53 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 53 (storage_class_specifier -> REGISTER .)
    _BOOL           reduce using rule 53 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 53 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 53 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 53 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 53 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 53 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 53 (storage_class_specifier -> REGISTER .)
    _COMPLEX        reduce using rule 53 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 53 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 53 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 53 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 53 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 53 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 53 (storage_class_specifier -> REGISTER .)
    TYPEDEF         reduce using rule 53 (storage_class_specifier -> REGISTER .)
    INLINE          reduce using rule 53 (storage_class_specifier -> REGISTER .)
    TYPEID          reduce using rule 53 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 53 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 53 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 53 (storage_class_specifier -> REGISTER .)
    ID              reduce using rule 53 (storage_class_specifier -> REGISTER .)
    LPAREN          reduce using rule 53 (storage_class_specifier -> REGISTER .)
    TIMES           reduce using rule 53 (storage_class_specifier -> REGISTER .)
    SEMI            reduce using rule 53 (storage_class_specifier -> REGISTER .)
    LBRACKET        reduce using rule 53 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 53 (storage_class_specifier -> REGISTER .)
    RPAREN          reduce using rule 53 (storage_class_specifier -> REGISTER .)


state 50

    (30) translation_unit -> translation_unit external_declaration .

    SEMI            reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    PPHASH          reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    ID              reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    LPAREN          reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    TIMES           reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    RESTRICT        reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    _BOOL           reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    _COMPLEX        reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    TYPEDEF         reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    INLINE          reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    TYPEID          reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 30 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 30 (translation_unit -> translation_unit external_declaration .)


state 51

    (50) declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .

    ID              reduce using rule 50 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    LPAREN          reduce using rule 50 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    TIMES           reduce using rule 50 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    SEMI            reduce using rule 50 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    LBRACKET        reduce using rule 50 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    COMMA           reduce using rule 50 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    RPAREN          reduce using rule 50 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)


state 52

    (10) declaration_specifiers_opt -> declaration_specifiers .

    ID              reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)
    LPAREN          reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)
    TIMES           reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)
    SEMI            reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)
    LBRACKET        reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)
    COMMA           reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)
    RPAREN          reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)


state 53

    (9) declaration_specifiers_opt -> empty .

    ID              reduce using rule 9 (declaration_specifiers_opt -> empty .)
    LPAREN          reduce using rule 9 (declaration_specifiers_opt -> empty .)
    TIMES           reduce using rule 9 (declaration_specifiers_opt -> empty .)
    SEMI            reduce using rule 9 (declaration_specifiers_opt -> empty .)
    LBRACKET        reduce using rule 9 (declaration_specifiers_opt -> empty .)
    COMMA           reduce using rule 9 (declaration_specifiers_opt -> empty .)
    RPAREN          reduce using rule 9 (declaration_specifiers_opt -> empty .)


state 54

    (249) brace_open -> LBRACE .

    LBRACKET        reduce using rule 249 (brace_open -> LBRACE .)
    PERIOD          reduce using rule 249 (brace_open -> LBRACE .)
    LBRACE          reduce using rule 249 (brace_open -> LBRACE .)
    PLUSPLUS        reduce using rule 249 (brace_open -> LBRACE .)
    MINUSMINUS      reduce using rule 249 (brace_open -> LBRACE .)
    SIZEOF          reduce using rule 249 (brace_open -> LBRACE .)
    LPAREN          reduce using rule 249 (brace_open -> LBRACE .)
    AND             reduce using rule 249 (brace_open -> LBRACE .)
    TIMES           reduce using rule 249 (brace_open -> LBRACE .)
    PLUS            reduce using rule 249 (brace_open -> LBRACE .)
    MINUS           reduce using rule 249 (brace_open -> LBRACE .)
    NOT             reduce using rule 249 (brace_open -> LBRACE .)
    LNOT            reduce using rule 249 (brace_open -> LBRACE .)
    ID              reduce using rule 249 (brace_open -> LBRACE .)
    INT_CONST_DEC   reduce using rule 249 (brace_open -> LBRACE .)
    INT_CONST_OCT   reduce using rule 249 (brace_open -> LBRACE .)
    INT_CONST_HEX   reduce using rule 249 (brace_open -> LBRACE .)
    FLOAT_CONST     reduce using rule 249 (brace_open -> LBRACE .)
    HEX_FLOAT_CONST reduce using rule 249 (brace_open -> LBRACE .)
    CHAR_CONST      reduce using rule 249 (brace_open -> LBRACE .)
    WCHAR_CONST     reduce using rule 249 (brace_open -> LBRACE .)
    STRING_LITERAL  reduce using rule 249 (brace_open -> LBRACE .)
    WSTRING_LITERAL reduce using rule 249 (brace_open -> LBRACE .)
    CASE            reduce using rule 249 (brace_open -> LBRACE .)
    DEFAULT         reduce using rule 249 (brace_open -> LBRACE .)
    IF              reduce using rule 249 (brace_open -> LBRACE .)
    SWITCH          reduce using rule 249 (brace_open -> LBRACE .)
    WHILE           reduce using rule 249 (brace_open -> LBRACE .)
    DO              reduce using rule 249 (brace_open -> LBRACE .)
    FOR             reduce using rule 249 (brace_open -> LBRACE .)
    GOTO            reduce using rule 249 (brace_open -> LBRACE .)
    BREAK           reduce using rule 249 (brace_open -> LBRACE .)
    CONTINUE        reduce using rule 249 (brace_open -> LBRACE .)
    RETURN          reduce using rule 249 (brace_open -> LBRACE .)
    CONST           reduce using rule 249 (brace_open -> LBRACE .)
    RESTRICT        reduce using rule 249 (brace_open -> LBRACE .)
    VOLATILE        reduce using rule 249 (brace_open -> LBRACE .)
    VOID            reduce using rule 249 (brace_open -> LBRACE .)
    _BOOL           reduce using rule 249 (brace_open -> LBRACE .)
    CHAR            reduce using rule 249 (brace_open -> LBRACE .)
    SHORT           reduce using rule 249 (brace_open -> LBRACE .)
    INT             reduce using rule 249 (brace_open -> LBRACE .)
    LONG            reduce using rule 249 (brace_open -> LBRACE .)
    FLOAT           reduce using rule 249 (brace_open -> LBRACE .)
    DOUBLE          reduce using rule 249 (brace_open -> LBRACE .)
    _COMPLEX        reduce using rule 249 (brace_open -> LBRACE .)
    SIGNED          reduce using rule 249 (brace_open -> LBRACE .)
    UNSIGNED        reduce using rule 249 (brace_open -> LBRACE .)
    AUTO            reduce using rule 249 (brace_open -> LBRACE .)
    REGISTER        reduce using rule 249 (brace_open -> LBRACE .)
    STATIC          reduce using rule 249 (brace_open -> LBRACE .)
    EXTERN          reduce using rule 249 (brace_open -> LBRACE .)
    TYPEDEF         reduce using rule 249 (brace_open -> LBRACE .)
    INLINE          reduce using rule 249 (brace_open -> LBRACE .)
    TYPEID          reduce using rule 249 (brace_open -> LBRACE .)
    ENUM            reduce using rule 249 (brace_open -> LBRACE .)
    STRUCT          reduce using rule 249 (brace_open -> LBRACE .)
    UNION           reduce using rule 249 (brace_open -> LBRACE .)
    RBRACE          reduce using rule 249 (brace_open -> LBRACE .)
    SEMI            reduce using rule 249 (brace_open -> LBRACE .)


state 55

    (96) enum_specifier -> ENUM ID .
    (99) enum_specifier -> ENUM ID . brace_open enumerator_list brace_close
    (249) brace_open -> . LBRACE

    CONST           reduce using rule 96 (enum_specifier -> ENUM ID .)
    RESTRICT        reduce using rule 96 (enum_specifier -> ENUM ID .)
    VOLATILE        reduce using rule 96 (enum_specifier -> ENUM ID .)
    VOID            reduce using rule 96 (enum_specifier -> ENUM ID .)
    _BOOL           reduce using rule 96 (enum_specifier -> ENUM ID .)
    CHAR            reduce using rule 96 (enum_specifier -> ENUM ID .)
    SHORT           reduce using rule 96 (enum_specifier -> ENUM ID .)
    INT             reduce using rule 96 (enum_specifier -> ENUM ID .)
    LONG            reduce using rule 96 (enum_specifier -> ENUM ID .)
    FLOAT           reduce using rule 96 (enum_specifier -> ENUM ID .)
    DOUBLE          reduce using rule 96 (enum_specifier -> ENUM ID .)
    _COMPLEX        reduce using rule 96 (enum_specifier -> ENUM ID .)
    SIGNED          reduce using rule 96 (enum_specifier -> ENUM ID .)
    UNSIGNED        reduce using rule 96 (enum_specifier -> ENUM ID .)
    AUTO            reduce using rule 96 (enum_specifier -> ENUM ID .)
    REGISTER        reduce using rule 96 (enum_specifier -> ENUM ID .)
    STATIC          reduce using rule 96 (enum_specifier -> ENUM ID .)
    EXTERN          reduce using rule 96 (enum_specifier -> ENUM ID .)
    TYPEDEF         reduce using rule 96 (enum_specifier -> ENUM ID .)
    INLINE          reduce using rule 96 (enum_specifier -> ENUM ID .)
    TYPEID          reduce using rule 96 (enum_specifier -> ENUM ID .)
    ENUM            reduce using rule 96 (enum_specifier -> ENUM ID .)
    STRUCT          reduce using rule 96 (enum_specifier -> ENUM ID .)
    UNION           reduce using rule 96 (enum_specifier -> ENUM ID .)
    ID              reduce using rule 96 (enum_specifier -> ENUM ID .)
    LPAREN          reduce using rule 96 (enum_specifier -> ENUM ID .)
    TIMES           reduce using rule 96 (enum_specifier -> ENUM ID .)
    LBRACKET        reduce using rule 96 (enum_specifier -> ENUM ID .)
    COMMA           reduce using rule 96 (enum_specifier -> ENUM ID .)
    RPAREN          reduce using rule 96 (enum_specifier -> ENUM ID .)
    COLON           reduce using rule 96 (enum_specifier -> ENUM ID .)
    SEMI            reduce using rule 96 (enum_specifier -> ENUM ID .)
    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 83

state 56

    (97) enum_specifier -> ENUM TYPEID .
    (100) enum_specifier -> ENUM TYPEID . brace_open enumerator_list brace_close
    (249) brace_open -> . LBRACE

    CONST           reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    RESTRICT        reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    VOLATILE        reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    VOID            reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    _BOOL           reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    CHAR            reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    SHORT           reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    INT             reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    LONG            reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    FLOAT           reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    DOUBLE          reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    _COMPLEX        reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    SIGNED          reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    UNSIGNED        reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    AUTO            reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    REGISTER        reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    STATIC          reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    EXTERN          reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    TYPEDEF         reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    INLINE          reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    TYPEID          reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    ENUM            reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    STRUCT          reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    UNION           reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    ID              reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    LPAREN          reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    TIMES           reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    LBRACKET        reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    COMMA           reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    RPAREN          reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    COLON           reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    SEMI            reduce using rule 97 (enum_specifier -> ENUM TYPEID .)
    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 84

state 57

    (98) enum_specifier -> ENUM brace_open . enumerator_list brace_close
    (101) enumerator_list -> . enumerator
    (102) enumerator_list -> . enumerator_list COMMA
    (103) enumerator_list -> . enumerator_list COMMA enumerator
    (104) enumerator -> . ID
    (105) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 86

    enumerator                     shift and go to state 85
    enumerator_list                shift and go to state 87

state 58

    (25) type_qualifier_list_opt -> empty .

    TIMES           reduce using rule 25 (type_qualifier_list_opt -> empty .)
    ID              reduce using rule 25 (type_qualifier_list_opt -> empty .)
    LPAREN          reduce using rule 25 (type_qualifier_list_opt -> empty .)
    LBRACKET        reduce using rule 25 (type_qualifier_list_opt -> empty .)
    COMMA           reduce using rule 25 (type_qualifier_list_opt -> empty .)
    RPAREN          reduce using rule 25 (type_qualifier_list_opt -> empty .)


state 59

    (26) type_qualifier_list_opt -> type_qualifier_list .
    (117) type_qualifier_list -> type_qualifier_list . type_qualifier
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE

    TIMES           reduce using rule 26 (type_qualifier_list_opt -> type_qualifier_list .)
    ID              reduce using rule 26 (type_qualifier_list_opt -> type_qualifier_list .)
    LPAREN          reduce using rule 26 (type_qualifier_list_opt -> type_qualifier_list .)
    LBRACKET        reduce using rule 26 (type_qualifier_list_opt -> type_qualifier_list .)
    COMMA           reduce using rule 26 (type_qualifier_list_opt -> type_qualifier_list .)
    RPAREN          reduce using rule 26 (type_qualifier_list_opt -> type_qualifier_list .)
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37

    type_qualifier                 shift and go to state 88

state 60

    (114) pointer -> TIMES type_qualifier_list_opt .
    (115) pointer -> TIMES type_qualifier_list_opt . pointer
    (114) pointer -> . TIMES type_qualifier_list_opt
    (115) pointer -> . TIMES type_qualifier_list_opt pointer

    LPAREN          reduce using rule 114 (pointer -> TIMES type_qualifier_list_opt .)
    LBRACKET        reduce using rule 114 (pointer -> TIMES type_qualifier_list_opt .)
    RPAREN          reduce using rule 114 (pointer -> TIMES type_qualifier_list_opt .)
    ID              reduce using rule 114 (pointer -> TIMES type_qualifier_list_opt .)
    COMMA           reduce using rule 114 (pointer -> TIMES type_qualifier_list_opt .)
    TIMES           shift and go to state 11

    pointer                        shift and go to state 89

state 61

    (116) type_qualifier_list -> type_qualifier .

    CONST           reduce using rule 116 (type_qualifier_list -> type_qualifier .)
    RESTRICT        reduce using rule 116 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 116 (type_qualifier_list -> type_qualifier .)
    TIMES           reduce using rule 116 (type_qualifier_list -> type_qualifier .)
    ID              reduce using rule 116 (type_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 116 (type_qualifier_list -> type_qualifier .)
    LBRACKET        reduce using rule 116 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 116 (type_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 116 (type_qualifier_list -> type_qualifier .)


state 62

    (49) declaration_specifiers -> type_specifier declaration_specifiers_opt .

    ID              reduce using rule 49 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    LPAREN          reduce using rule 49 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    TIMES           reduce using rule 49 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    SEMI            reduce using rule 49 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    LBRACKET        reduce using rule 49 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    COMMA           reduce using rule 49 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    RPAREN          reduce using rule 49 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)


state 63

    (51) declaration_specifiers -> function_specifier declaration_specifiers_opt .

    ID              reduce using rule 51 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)
    LPAREN          reduce using rule 51 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)
    TIMES           reduce using rule 51 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)
    SEMI            reduce using rule 51 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)
    LBRACKET        reduce using rule 51 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)
    COMMA           reduce using rule 51 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)
    RPAREN          reduce using rule 51 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)


state 64

    (8) declaration_list_opt -> declaration_list .
    (47) declaration_list -> declaration_list . declaration
    (45) declaration -> . decl_body SEMI
    (44) decl_body -> . declaration_specifiers init_declarator_list_opt
    (48) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (49) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (50) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (51) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (52) storage_class_specifier -> . AUTO
    (53) storage_class_specifier -> . REGISTER
    (54) storage_class_specifier -> . STATIC
    (55) storage_class_specifier -> . EXTERN
    (56) storage_class_specifier -> . TYPEDEF
    (57) function_specifier -> . INLINE
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    LBRACE          reduce using rule 8 (declaration_list_opt -> declaration_list .)
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    AUTO            shift and go to state 35
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 4
    EXTERN          shift and go to state 34
    TYPEDEF         shift and go to state 42
    INLINE          shift and go to state 16
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    struct_or_union_specifier      shift and go to state 31
    declaration                    shift and go to state 90
    function_specifier             shift and go to state 20
    storage_class_specifier        shift and go to state 7
    enum_specifier                 shift and go to state 8
    decl_body                      shift and go to state 38
    declaration_specifiers         shift and go to state 68
    typedef_name                   shift and go to state 48
    type_qualifier                 shift and go to state 39
    type_specifier                 shift and go to state 14
    struct_or_union                shift and go to state 29

state 65

    (46) declaration_list -> declaration .

    CONST           reduce using rule 46 (declaration_list -> declaration .)
    RESTRICT        reduce using rule 46 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 46 (declaration_list -> declaration .)
    VOID            reduce using rule 46 (declaration_list -> declaration .)
    _BOOL           reduce using rule 46 (declaration_list -> declaration .)
    CHAR            reduce using rule 46 (declaration_list -> declaration .)
    SHORT           reduce using rule 46 (declaration_list -> declaration .)
    INT             reduce using rule 46 (declaration_list -> declaration .)
    LONG            reduce using rule 46 (declaration_list -> declaration .)
    FLOAT           reduce using rule 46 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 46 (declaration_list -> declaration .)
    _COMPLEX        reduce using rule 46 (declaration_list -> declaration .)
    SIGNED          reduce using rule 46 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 46 (declaration_list -> declaration .)
    AUTO            reduce using rule 46 (declaration_list -> declaration .)
    REGISTER        reduce using rule 46 (declaration_list -> declaration .)
    STATIC          reduce using rule 46 (declaration_list -> declaration .)
    EXTERN          reduce using rule 46 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 46 (declaration_list -> declaration .)
    INLINE          reduce using rule 46 (declaration_list -> declaration .)
    TYPEID          reduce using rule 46 (declaration_list -> declaration .)
    ENUM            reduce using rule 46 (declaration_list -> declaration .)
    STRUCT          reduce using rule 46 (declaration_list -> declaration .)
    UNION           reduce using rule 46 (declaration_list -> declaration .)
    LBRACE          reduce using rule 46 (declaration_list -> declaration .)


state 66

    (7) declaration_list_opt -> empty .

    LBRACE          reduce using rule 7 (declaration_list_opt -> empty .)


state 67

    (36) function_definition -> declarator declaration_list_opt . compound_statement
    (151) compound_statement -> . brace_open block_item_list_opt brace_close
    (249) brace_open -> . LBRACE

    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 91
    compound_statement             shift and go to state 92

state 68

    (44) decl_body -> declaration_specifiers . init_declarator_list_opt
    (17) init_declarator_list_opt -> . empty
    (18) init_declarator_list_opt -> . init_declarator_list
    (251) empty -> .
    (75) init_declarator_list -> . init_declarator
    (76) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (77) init_declarator -> . declarator
    (78) init_declarator -> . declarator EQUALS initializer
    (106) declarator -> . direct_declarator
    (107) declarator -> . pointer direct_declarator
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . LPAREN declarator RPAREN
    (110) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (111) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (112) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (113) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (114) pointer -> . TIMES type_qualifier_list_opt
    (115) pointer -> . TIMES type_qualifier_list_opt pointer

    SEMI            reduce using rule 251 (empty -> .)
    ID              shift and go to state 46
    LPAREN          shift and go to state 32
    TIMES           shift and go to state 11

    init_declarator_list_opt       shift and go to state 76
    pointer                        shift and go to state 28
    init_declarator                shift and go to state 80
    init_declarator_list           shift and go to state 77
    empty                          shift and go to state 78
    declarator                     shift and go to state 93
    direct_declarator              shift and go to state 44

state 69

    (107) declarator -> pointer direct_declarator .
    (110) direct_declarator -> direct_declarator . LBRACKET assignment_expression_opt RBRACKET
    (111) direct_declarator -> direct_declarator . LBRACKET TIMES RBRACKET
    (112) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (113) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN

    EQUALS          reduce using rule 107 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 107 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 107 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 107 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 107 (declarator -> pointer direct_declarator .)
    RESTRICT        reduce using rule 107 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 107 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 107 (declarator -> pointer direct_declarator .)
    _BOOL           reduce using rule 107 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 107 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 107 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 107 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 107 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 107 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 107 (declarator -> pointer direct_declarator .)
    _COMPLEX        reduce using rule 107 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 107 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 107 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 107 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 107 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 107 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 107 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 107 (declarator -> pointer direct_declarator .)
    INLINE          reduce using rule 107 (declarator -> pointer direct_declarator .)
    TYPEID          reduce using rule 107 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 107 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 107 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 107 (declarator -> pointer direct_declarator .)
    LBRACE          reduce using rule 107 (declarator -> pointer direct_declarator .)
    COLON           reduce using rule 107 (declarator -> pointer direct_declarator .)
    LBRACKET        shift and go to state 82
    LPAREN          shift and go to state 81


state 70

    (81) struct_or_union_specifier -> struct_or_union ID .
    (84) struct_or_union_specifier -> struct_or_union ID . brace_open struct_declaration_list brace_close
    (249) brace_open -> . LBRACE

    CONST           reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    RESTRICT        reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    VOLATILE        reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    VOID            reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    _BOOL           reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    CHAR            reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    SHORT           reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    INT             reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    LONG            reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    FLOAT           reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    DOUBLE          reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    _COMPLEX        reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    SIGNED          reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    UNSIGNED        reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    AUTO            reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    REGISTER        reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    STATIC          reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    EXTERN          reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    TYPEDEF         reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    INLINE          reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    TYPEID          reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    ENUM            reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    STRUCT          reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    UNION           reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    ID              reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    LPAREN          reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    TIMES           reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    SEMI            reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    LBRACKET        reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    COMMA           reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    RPAREN          reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    COLON           reduce using rule 81 (struct_or_union_specifier -> struct_or_union ID .)
    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 94

state 71

    (82) struct_or_union_specifier -> struct_or_union TYPEID .
    (85) struct_or_union_specifier -> struct_or_union TYPEID . brace_open struct_declaration_list brace_close
    (249) brace_open -> . LBRACE

    CONST           reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    RESTRICT        reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    VOLATILE        reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    VOID            reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    _BOOL           reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    CHAR            reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    SHORT           reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    INT             reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LONG            reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    FLOAT           reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    DOUBLE          reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    _COMPLEX        reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    SIGNED          reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    UNSIGNED        reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    AUTO            reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    REGISTER        reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    STATIC          reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    EXTERN          reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    TYPEDEF         reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    INLINE          reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    TYPEID          reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    ENUM            reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    STRUCT          reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    UNION           reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    ID              reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LPAREN          reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    TIMES           reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    SEMI            reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LBRACKET        reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    COMMA           reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    RPAREN          reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    COLON           reduce using rule 82 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 95

state 72

    (83) struct_or_union_specifier -> struct_or_union brace_open . struct_declaration_list brace_close
    (88) struct_declaration_list -> . struct_declaration
    (89) struct_declaration_list -> . struct_declaration_list struct_declaration
    (90) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (79) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (80) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    struct_declaration             shift and go to state 96
    struct_declaration_list        shift and go to state 97
    struct_or_union_specifier      shift and go to state 31
    specifier_qualifier_list       shift and go to state 98
    struct_or_union                shift and go to state 29
    type_qualifier                 shift and go to state 99
    typedef_name                   shift and go to state 48
    type_specifier                 shift and go to state 100
    enum_specifier                 shift and go to state 8

state 73

    (109) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 101


state 74

    (45) declaration -> decl_body SEMI .

    SEMI            reduce using rule 45 (declaration -> decl_body SEMI .)
    PPHASH          reduce using rule 45 (declaration -> decl_body SEMI .)
    ID              reduce using rule 45 (declaration -> decl_body SEMI .)
    LPAREN          reduce using rule 45 (declaration -> decl_body SEMI .)
    TIMES           reduce using rule 45 (declaration -> decl_body SEMI .)
    CONST           reduce using rule 45 (declaration -> decl_body SEMI .)
    RESTRICT        reduce using rule 45 (declaration -> decl_body SEMI .)
    VOLATILE        reduce using rule 45 (declaration -> decl_body SEMI .)
    VOID            reduce using rule 45 (declaration -> decl_body SEMI .)
    _BOOL           reduce using rule 45 (declaration -> decl_body SEMI .)
    CHAR            reduce using rule 45 (declaration -> decl_body SEMI .)
    SHORT           reduce using rule 45 (declaration -> decl_body SEMI .)
    INT             reduce using rule 45 (declaration -> decl_body SEMI .)
    LONG            reduce using rule 45 (declaration -> decl_body SEMI .)
    FLOAT           reduce using rule 45 (declaration -> decl_body SEMI .)
    DOUBLE          reduce using rule 45 (declaration -> decl_body SEMI .)
    _COMPLEX        reduce using rule 45 (declaration -> decl_body SEMI .)
    SIGNED          reduce using rule 45 (declaration -> decl_body SEMI .)
    UNSIGNED        reduce using rule 45 (declaration -> decl_body SEMI .)
    AUTO            reduce using rule 45 (declaration -> decl_body SEMI .)
    REGISTER        reduce using rule 45 (declaration -> decl_body SEMI .)
    STATIC          reduce using rule 45 (declaration -> decl_body SEMI .)
    EXTERN          reduce using rule 45 (declaration -> decl_body SEMI .)
    TYPEDEF         reduce using rule 45 (declaration -> decl_body SEMI .)
    INLINE          reduce using rule 45 (declaration -> decl_body SEMI .)
    TYPEID          reduce using rule 45 (declaration -> decl_body SEMI .)
    ENUM            reduce using rule 45 (declaration -> decl_body SEMI .)
    STRUCT          reduce using rule 45 (declaration -> decl_body SEMI .)
    UNION           reduce using rule 45 (declaration -> decl_body SEMI .)
    $end            reduce using rule 45 (declaration -> decl_body SEMI .)
    LBRACE          reduce using rule 45 (declaration -> decl_body SEMI .)
    PLUSPLUS        reduce using rule 45 (declaration -> decl_body SEMI .)
    MINUSMINUS      reduce using rule 45 (declaration -> decl_body SEMI .)
    SIZEOF          reduce using rule 45 (declaration -> decl_body SEMI .)
    AND             reduce using rule 45 (declaration -> decl_body SEMI .)
    PLUS            reduce using rule 45 (declaration -> decl_body SEMI .)
    MINUS           reduce using rule 45 (declaration -> decl_body SEMI .)
    NOT             reduce using rule 45 (declaration -> decl_body SEMI .)
    LNOT            reduce using rule 45 (declaration -> decl_body SEMI .)
    INT_CONST_DEC   reduce using rule 45 (declaration -> decl_body SEMI .)
    INT_CONST_OCT   reduce using rule 45 (declaration -> decl_body SEMI .)
    INT_CONST_HEX   reduce using rule 45 (declaration -> decl_body SEMI .)
    FLOAT_CONST     reduce using rule 45 (declaration -> decl_body SEMI .)
    HEX_FLOAT_CONST reduce using rule 45 (declaration -> decl_body SEMI .)
    CHAR_CONST      reduce using rule 45 (declaration -> decl_body SEMI .)
    WCHAR_CONST     reduce using rule 45 (declaration -> decl_body SEMI .)
    STRING_LITERAL  reduce using rule 45 (declaration -> decl_body SEMI .)
    WSTRING_LITERAL reduce using rule 45 (declaration -> decl_body SEMI .)
    CASE            reduce using rule 45 (declaration -> decl_body SEMI .)
    DEFAULT         reduce using rule 45 (declaration -> decl_body SEMI .)
    IF              reduce using rule 45 (declaration -> decl_body SEMI .)
    SWITCH          reduce using rule 45 (declaration -> decl_body SEMI .)
    WHILE           reduce using rule 45 (declaration -> decl_body SEMI .)
    DO              reduce using rule 45 (declaration -> decl_body SEMI .)
    FOR             reduce using rule 45 (declaration -> decl_body SEMI .)
    GOTO            reduce using rule 45 (declaration -> decl_body SEMI .)
    BREAK           reduce using rule 45 (declaration -> decl_body SEMI .)
    CONTINUE        reduce using rule 45 (declaration -> decl_body SEMI .)
    RETURN          reduce using rule 45 (declaration -> decl_body SEMI .)
    RBRACE          reduce using rule 45 (declaration -> decl_body SEMI .)


state 75

    (48) declaration_specifiers -> type_qualifier declaration_specifiers_opt .

    ID              reduce using rule 48 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    LPAREN          reduce using rule 48 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    TIMES           reduce using rule 48 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    SEMI            reduce using rule 48 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    LBRACKET        reduce using rule 48 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    COMMA           reduce using rule 48 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    RPAREN          reduce using rule 48 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)


state 76

    (44) decl_body -> declaration_specifiers init_declarator_list_opt .

    SEMI            reduce using rule 44 (decl_body -> declaration_specifiers init_declarator_list_opt .)


state 77

    (18) init_declarator_list_opt -> init_declarator_list .
    (76) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 18 (init_declarator_list_opt -> init_declarator_list .)
    COMMA           shift and go to state 102


state 78

    (17) init_declarator_list_opt -> empty .

    SEMI            reduce using rule 17 (init_declarator_list_opt -> empty .)


state 79

    (37) function_definition -> declaration_specifiers declarator . declaration_list_opt compound_statement
    (77) init_declarator -> declarator .
    (78) init_declarator -> declarator . EQUALS initializer
    (7) declaration_list_opt -> . empty
    (8) declaration_list_opt -> . declaration_list
    (251) empty -> .
    (46) declaration_list -> . declaration
    (47) declaration_list -> . declaration_list declaration
    (45) declaration -> . decl_body SEMI
    (44) decl_body -> . declaration_specifiers init_declarator_list_opt
    (48) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (49) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (50) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (51) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (52) storage_class_specifier -> . AUTO
    (53) storage_class_specifier -> . REGISTER
    (54) storage_class_specifier -> . STATIC
    (55) storage_class_specifier -> . EXTERN
    (56) storage_class_specifier -> . TYPEDEF
    (57) function_specifier -> . INLINE
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    COMMA           reduce using rule 77 (init_declarator -> declarator .)
    SEMI            reduce using rule 77 (init_declarator -> declarator .)
    EQUALS          shift and go to state 103
    LBRACE          reduce using rule 251 (empty -> .)
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    AUTO            shift and go to state 35
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 4
    EXTERN          shift and go to state 34
    TYPEDEF         shift and go to state 42
    INLINE          shift and go to state 16
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    storage_class_specifier        shift and go to state 7
    struct_or_union_specifier      shift and go to state 31
    declaration_list_opt           shift and go to state 104
    enum_specifier                 shift and go to state 8
    decl_body                      shift and go to state 38
    type_qualifier                 shift and go to state 39
    declaration_list               shift and go to state 64
    type_specifier                 shift and go to state 14
    declaration                    shift and go to state 65
    typedef_name                   shift and go to state 48
    function_specifier             shift and go to state 20
    empty                          shift and go to state 66
    declaration_specifiers         shift and go to state 68
    struct_or_union                shift and go to state 29

state 80

    (75) init_declarator_list -> init_declarator .

    COMMA           reduce using rule 75 (init_declarator_list -> init_declarator .)
    SEMI            reduce using rule 75 (init_declarator_list -> init_declarator .)


state 81

    (112) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (113) direct_declarator -> direct_declarator LPAREN . identifier_list_opt RPAREN
    (118) parameter_type_list -> . parameter_list
    (119) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (15) identifier_list_opt -> . empty
    (16) identifier_list_opt -> . identifier_list
    (120) parameter_list -> . parameter_declaration
    (121) parameter_list -> . parameter_list COMMA parameter_declaration
    (251) empty -> .
    (124) identifier_list -> . identifier
    (125) identifier_list -> . identifier_list COMMA identifier
    (122) parameter_declaration -> . declaration_specifiers declarator
    (123) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (237) identifier -> . ID
    (48) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (49) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (50) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (51) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (52) storage_class_specifier -> . AUTO
    (53) storage_class_specifier -> . REGISTER
    (54) storage_class_specifier -> . STATIC
    (55) storage_class_specifier -> . EXTERN
    (56) storage_class_specifier -> . TYPEDEF
    (57) function_specifier -> . INLINE
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    RPAREN          reduce using rule 251 (empty -> .)
    ID              shift and go to state 111
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    AUTO            shift and go to state 35
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 4
    EXTERN          shift and go to state 34
    TYPEDEF         shift and go to state 42
    INLINE          shift and go to state 16
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    storage_class_specifier        shift and go to state 7
    struct_or_union_specifier      shift and go to state 31
    parameter_declaration          shift and go to state 109
    enum_specifier                 shift and go to state 8
    identifier                     shift and go to state 105
    parameter_list                 shift and go to state 110
    type_qualifier                 shift and go to state 39
    type_specifier                 shift and go to state 14
    struct_or_union                shift and go to state 29
    function_specifier             shift and go to state 20
    identifier_list                shift and go to state 107
    empty                          shift and go to state 108
    identifier_list_opt            shift and go to state 112
    declaration_specifiers         shift and go to state 113
    typedef_name                   shift and go to state 48
    parameter_type_list            shift and go to state 106

state 82

    (110) direct_declarator -> direct_declarator LBRACKET . assignment_expression_opt RBRACKET
    (111) direct_declarator -> direct_declarator LBRACKET . TIMES RBRACKET
    (3) assignment_expression_opt -> . empty
    (4) assignment_expression_opt -> . assignment_expression
    (251) empty -> .
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    TIMES           shift and go to state 122
    RBRACKET        reduce using rule 251 (empty -> .)
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    primary_expression             shift and go to state 115
    assignment_expression_opt      shift and go to state 144
    postfix_expression             shift and go to state 136
    conditional_expression         shift and go to state 145
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    cast_expression                shift and go to state 142
    constant                       shift and go to state 124
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    empty                          shift and go to state 127
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    assignment_expression          shift and go to state 131

state 83

    (99) enum_specifier -> ENUM ID brace_open . enumerator_list brace_close
    (101) enumerator_list -> . enumerator
    (102) enumerator_list -> . enumerator_list COMMA
    (103) enumerator_list -> . enumerator_list COMMA enumerator
    (104) enumerator -> . ID
    (105) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 86

    enumerator                     shift and go to state 85
    enumerator_list                shift and go to state 147

state 84

    (100) enum_specifier -> ENUM TYPEID brace_open . enumerator_list brace_close
    (101) enumerator_list -> . enumerator
    (102) enumerator_list -> . enumerator_list COMMA
    (103) enumerator_list -> . enumerator_list COMMA enumerator
    (104) enumerator -> . ID
    (105) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 86

    enumerator                     shift and go to state 85
    enumerator_list                shift and go to state 148

state 85

    (101) enumerator_list -> enumerator .

    COMMA           reduce using rule 101 (enumerator_list -> enumerator .)
    RBRACE          reduce using rule 101 (enumerator_list -> enumerator .)


state 86

    (104) enumerator -> ID .
    (105) enumerator -> ID . EQUALS constant_expression

    COMMA           reduce using rule 104 (enumerator -> ID .)
    RBRACE          reduce using rule 104 (enumerator -> ID .)
    EQUALS          shift and go to state 149


state 87

    (98) enum_specifier -> ENUM brace_open enumerator_list . brace_close
    (102) enumerator_list -> enumerator_list . COMMA
    (103) enumerator_list -> enumerator_list . COMMA enumerator
    (250) brace_close -> . RBRACE

    COMMA           shift and go to state 152
    RBRACE          shift and go to state 150

    brace_close                    shift and go to state 151

state 88

    (117) type_qualifier_list -> type_qualifier_list type_qualifier .

    CONST           reduce using rule 117 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RESTRICT        reduce using rule 117 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 117 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    TIMES           reduce using rule 117 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ID              reduce using rule 117 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 117 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LBRACKET        reduce using rule 117 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 117 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RPAREN          reduce using rule 117 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 89

    (115) pointer -> TIMES type_qualifier_list_opt pointer .

    LPAREN          reduce using rule 115 (pointer -> TIMES type_qualifier_list_opt pointer .)
    LBRACKET        reduce using rule 115 (pointer -> TIMES type_qualifier_list_opt pointer .)
    RPAREN          reduce using rule 115 (pointer -> TIMES type_qualifier_list_opt pointer .)
    ID              reduce using rule 115 (pointer -> TIMES type_qualifier_list_opt pointer .)
    COMMA           reduce using rule 115 (pointer -> TIMES type_qualifier_list_opt pointer .)


state 90

    (47) declaration_list -> declaration_list declaration .

    CONST           reduce using rule 47 (declaration_list -> declaration_list declaration .)
    RESTRICT        reduce using rule 47 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 47 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 47 (declaration_list -> declaration_list declaration .)
    _BOOL           reduce using rule 47 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 47 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 47 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 47 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 47 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 47 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 47 (declaration_list -> declaration_list declaration .)
    _COMPLEX        reduce using rule 47 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 47 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 47 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 47 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 47 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 47 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 47 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 47 (declaration_list -> declaration_list declaration .)
    INLINE          reduce using rule 47 (declaration_list -> declaration_list declaration .)
    TYPEID          reduce using rule 47 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 47 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 47 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 47 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 47 (declaration_list -> declaration_list declaration .)


state 91

    (151) compound_statement -> brace_open . block_item_list_opt brace_close
    (5) block_item_list_opt -> . empty
    (6) block_item_list_opt -> . block_item_list
    (251) empty -> .
    (149) block_item_list -> . block_item
    (150) block_item_list -> . block_item_list block_item
    (147) block_item -> . declaration
    (148) block_item -> . statement
    (45) declaration -> . decl_body SEMI
    (38) statement -> . labeled_statement
    (39) statement -> . expression_statement
    (40) statement -> . compound_statement
    (41) statement -> . selection_statement
    (42) statement -> . iteration_statement
    (43) statement -> . jump_statement
    (44) decl_body -> . declaration_specifiers init_declarator_list_opt
    (152) labeled_statement -> . ID COLON statement
    (153) labeled_statement -> . CASE constant_expression COLON statement
    (154) labeled_statement -> . DEFAULT COLON statement
    (167) expression_statement -> . expression_opt SEMI
    (151) compound_statement -> . brace_open block_item_list_opt brace_close
    (155) selection_statement -> . IF LPAREN expression RPAREN statement
    (156) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (157) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (158) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (159) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (160) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (161) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (162) jump_statement -> . GOTO ID SEMI
    (163) jump_statement -> . BREAK SEMI
    (164) jump_statement -> . CONTINUE SEMI
    (165) jump_statement -> . RETURN expression SEMI
    (166) jump_statement -> . RETURN SEMI
    (48) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (49) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (50) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (51) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (249) brace_open -> . LBRACE
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (52) storage_class_specifier -> . AUTO
    (53) storage_class_specifier -> . REGISTER
    (54) storage_class_specifier -> . STATIC
    (55) storage_class_specifier -> . EXTERN
    (56) storage_class_specifier -> . TYPEDEF
    (57) function_specifier -> . INLINE
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RBRACE          reduce using rule 251 (empty -> .)
    SEMI            reduce using rule 251 (empty -> .)
    ID              shift and go to state 160
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 165
    IF              shift and go to state 161
    SWITCH          shift and go to state 155
    WHILE           shift and go to state 180
    DO              shift and go to state 154
    FOR             shift and go to state 164
    GOTO            shift and go to state 167
    BREAK           shift and go to state 177
    CONTINUE        shift and go to state 158
    RETURN          shift and go to state 179
    LBRACE          shift and go to state 54
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    AUTO            shift and go to state 35
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 4
    EXTERN          shift and go to state 34
    TYPEDEF         shift and go to state 42
    INLINE          shift and go to state 16
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    primary_expression             shift and go to state 115
    compound_statement             shift and go to state 163
    storage_class_specifier        shift and go to state 7
    statement                      shift and go to state 153
    identifier                     shift and go to state 120
    unified_wstring_literal        shift and go to state 121
    type_specifier                 shift and go to state 14
    labeled_statement              shift and go to state 169
    declaration                    shift and go to state 170
    unified_string_literal         shift and go to state 125
    function_specifier             shift and go to state 20
    iteration_statement            shift and go to state 156
    empty                          shift and go to state 171
    binary_expression              shift and go to state 128
    selection_statement            shift and go to state 157
    assignment_expression          shift and go to state 159
    block_item                     shift and go to state 162
    constant                       shift and go to state 124
    block_item_list                shift and go to state 172
    expression_opt                 shift and go to state 173
    brace_open                     shift and go to state 91
    jump_statement                 shift and go to state 174
    postfix_expression             shift and go to state 136
    expression                     shift and go to state 175
    conditional_expression         shift and go to state 145
    struct_or_union_specifier      shift and go to state 31
    struct_or_union                shift and go to state 29
    unary_expression               shift and go to state 140
    decl_body                      shift and go to state 38
    type_qualifier                 shift and go to state 39
    cast_expression                shift and go to state 142
    block_item_list_opt            shift and go to state 176
    unary_operator                 shift and go to state 146
    expression_statement           shift and go to state 178
    declaration_specifiers         shift and go to state 68
    typedef_name                   shift and go to state 48
    enum_specifier                 shift and go to state 8

state 92

    (36) function_definition -> declarator declaration_list_opt compound_statement .

    SEMI            reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    PPHASH          reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    CONST           reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    RESTRICT        reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    VOLATILE        reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    VOID            reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    _BOOL           reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    SHORT           reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    LONG            reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    DOUBLE          reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    _COMPLEX        reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    SIGNED          reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    UNSIGNED        reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    AUTO            reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    REGISTER        reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    STATIC          reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    EXTERN          reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    TYPEDEF         reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    INLINE          reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    TYPEID          reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    ENUM            reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    STRUCT          reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    UNION           reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 36 (function_definition -> declarator declaration_list_opt compound_statement .)


state 93

    (77) init_declarator -> declarator .
    (78) init_declarator -> declarator . EQUALS initializer

    COMMA           reduce using rule 77 (init_declarator -> declarator .)
    SEMI            reduce using rule 77 (init_declarator -> declarator .)
    EQUALS          shift and go to state 103


state 94

    (84) struct_or_union_specifier -> struct_or_union ID brace_open . struct_declaration_list brace_close
    (88) struct_declaration_list -> . struct_declaration
    (89) struct_declaration_list -> . struct_declaration_list struct_declaration
    (90) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (79) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (80) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    struct_declaration             shift and go to state 96
    struct_declaration_list        shift and go to state 181
    struct_or_union_specifier      shift and go to state 31
    specifier_qualifier_list       shift and go to state 98
    struct_or_union                shift and go to state 29
    type_qualifier                 shift and go to state 99
    typedef_name                   shift and go to state 48
    type_specifier                 shift and go to state 100
    enum_specifier                 shift and go to state 8

state 95

    (85) struct_or_union_specifier -> struct_or_union TYPEID brace_open . struct_declaration_list brace_close
    (88) struct_declaration_list -> . struct_declaration
    (89) struct_declaration_list -> . struct_declaration_list struct_declaration
    (90) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (79) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (80) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    struct_declaration             shift and go to state 96
    struct_declaration_list        shift and go to state 182
    struct_or_union_specifier      shift and go to state 31
    specifier_qualifier_list       shift and go to state 98
    struct_or_union                shift and go to state 29
    type_qualifier                 shift and go to state 99
    typedef_name                   shift and go to state 48
    type_specifier                 shift and go to state 100
    enum_specifier                 shift and go to state 8

state 96

    (88) struct_declaration_list -> struct_declaration .

    RBRACE          reduce using rule 88 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 88 (struct_declaration_list -> struct_declaration .)
    RESTRICT        reduce using rule 88 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 88 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 88 (struct_declaration_list -> struct_declaration .)
    _BOOL           reduce using rule 88 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 88 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 88 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 88 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 88 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 88 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 88 (struct_declaration_list -> struct_declaration .)
    _COMPLEX        reduce using rule 88 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 88 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 88 (struct_declaration_list -> struct_declaration .)
    TYPEID          reduce using rule 88 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 88 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 88 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 88 (struct_declaration_list -> struct_declaration .)


state 97

    (83) struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list . brace_close
    (89) struct_declaration_list -> struct_declaration_list . struct_declaration
    (250) brace_close -> . RBRACE
    (90) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (79) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (80) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    RBRACE          shift and go to state 150
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    struct_declaration             shift and go to state 183
    struct_or_union_specifier      shift and go to state 31
    brace_close                    shift and go to state 184
    specifier_qualifier_list       shift and go to state 98
    struct_or_union                shift and go to state 29
    type_qualifier                 shift and go to state 99
    typedef_name                   shift and go to state 48
    type_specifier                 shift and go to state 100
    enum_specifier                 shift and go to state 8

state 98

    (90) struct_declaration -> specifier_qualifier_list . struct_declarator_list_opt SEMI
    (23) struct_declarator_list_opt -> . empty
    (24) struct_declarator_list_opt -> . struct_declarator_list
    (251) empty -> .
    (91) struct_declarator_list -> . struct_declarator
    (92) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (93) struct_declarator -> . declarator
    (94) struct_declarator -> . declarator COLON constant_expression
    (95) struct_declarator -> . COLON constant_expression
    (106) declarator -> . direct_declarator
    (107) declarator -> . pointer direct_declarator
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . LPAREN declarator RPAREN
    (110) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (111) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (112) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (113) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (114) pointer -> . TIMES type_qualifier_list_opt
    (115) pointer -> . TIMES type_qualifier_list_opt pointer

    SEMI            reduce using rule 251 (empty -> .)
    COLON           shift and go to state 189
    ID              shift and go to state 46
    LPAREN          shift and go to state 32
    TIMES           shift and go to state 11

    struct_declarator_list         shift and go to state 185
    pointer                        shift and go to state 28
    struct_declarator              shift and go to state 187
    struct_declarator_list_opt     shift and go to state 186
    empty                          shift and go to state 188
    declarator                     shift and go to state 190
    direct_declarator              shift and go to state 44

state 99

    (79) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list_opt
    (21) specifier_qualifier_list_opt -> . empty
    (22) specifier_qualifier_list_opt -> . specifier_qualifier_list
    (251) empty -> .
    (79) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (80) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    COLON           reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)
    LPAREN          reduce using rule 251 (empty -> .)
    TIMES           reduce using rule 251 (empty -> .)
    SEMI            reduce using rule 251 (empty -> .)
    LBRACKET        reduce using rule 251 (empty -> .)
    RPAREN          reduce using rule 251 (empty -> .)
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    specifier_qualifier_list_opt   shift and go to state 192
    specifier_qualifier_list       shift and go to state 191
    struct_or_union_specifier      shift and go to state 31
    empty                          shift and go to state 193
    enum_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 99
    typedef_name                   shift and go to state 48
    type_specifier                 shift and go to state 100
    struct_or_union                shift and go to state 29

state 100

    (80) specifier_qualifier_list -> type_specifier . specifier_qualifier_list_opt
    (21) specifier_qualifier_list_opt -> . empty
    (22) specifier_qualifier_list_opt -> . specifier_qualifier_list
    (251) empty -> .
    (79) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (80) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    COLON           reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)
    LPAREN          reduce using rule 251 (empty -> .)
    TIMES           reduce using rule 251 (empty -> .)
    SEMI            reduce using rule 251 (empty -> .)
    LBRACKET        reduce using rule 251 (empty -> .)
    RPAREN          reduce using rule 251 (empty -> .)
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    specifier_qualifier_list_opt   shift and go to state 194
    specifier_qualifier_list       shift and go to state 191
    struct_or_union_specifier      shift and go to state 31
    empty                          shift and go to state 193
    enum_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 99
    typedef_name                   shift and go to state 48
    type_specifier                 shift and go to state 100
    struct_or_union                shift and go to state 29

state 101

    (109) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    CONST           reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    RESTRICT        reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    VOLATILE        reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    _BOOL           reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    SHORT           reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    LONG            reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    DOUBLE          reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    _COMPLEX        reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    SIGNED          reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    UNSIGNED        reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    AUTO            reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    REGISTER        reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    STATIC          reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    EXTERN          reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEDEF         reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    INLINE          reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEID          reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    ENUM            reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    STRUCT          reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    UNION           reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)
    COLON           reduce using rule 109 (direct_declarator -> LPAREN declarator RPAREN .)


state 102

    (76) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (77) init_declarator -> . declarator
    (78) init_declarator -> . declarator EQUALS initializer
    (106) declarator -> . direct_declarator
    (107) declarator -> . pointer direct_declarator
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . LPAREN declarator RPAREN
    (110) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (111) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (112) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (113) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (114) pointer -> . TIMES type_qualifier_list_opt
    (115) pointer -> . TIMES type_qualifier_list_opt pointer

    ID              shift and go to state 46
    LPAREN          shift and go to state 32
    TIMES           shift and go to state 11

    pointer                        shift and go to state 28
    init_declarator                shift and go to state 195
    declarator                     shift and go to state 93
    direct_declarator              shift and go to state 44

state 103

    (78) init_declarator -> declarator EQUALS . initializer
    (126) initializer -> . assignment_expression
    (127) initializer -> . brace_open initializer_list brace_close
    (128) initializer -> . brace_open initializer_list COMMA brace_close
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (249) brace_open -> . LBRACE
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LBRACE          shift and go to state 54
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    brace_open                     shift and go to state 197
    binary_expression              shift and go to state 128
    postfix_expression             shift and go to state 136
    conditional_expression         shift and go to state 145
    unary_operator                 shift and go to state 146
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    assignment_expression          shift and go to state 198
    initializer                    shift and go to state 196
    cast_expression                shift and go to state 142

state 104

    (37) function_definition -> declaration_specifiers declarator declaration_list_opt . compound_statement
    (151) compound_statement -> . brace_open block_item_list_opt brace_close
    (249) brace_open -> . LBRACE

    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 91
    compound_statement             shift and go to state 199

state 105

    (124) identifier_list -> identifier .

    COMMA           reduce using rule 124 (identifier_list -> identifier .)
    RPAREN          reduce using rule 124 (identifier_list -> identifier .)


state 106

    (112) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 200


state 107

    (16) identifier_list_opt -> identifier_list .
    (125) identifier_list -> identifier_list . COMMA identifier

    RPAREN          reduce using rule 16 (identifier_list_opt -> identifier_list .)
    COMMA           shift and go to state 201


state 108

    (15) identifier_list_opt -> empty .

    RPAREN          reduce using rule 15 (identifier_list_opt -> empty .)


state 109

    (120) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 120 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 120 (parameter_list -> parameter_declaration .)


state 110

    (118) parameter_type_list -> parameter_list .
    (119) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (121) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 118 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 202


state 111

    (237) identifier -> ID .

    LBRACKET        reduce using rule 237 (identifier -> ID .)
    LPAREN          reduce using rule 237 (identifier -> ID .)
    PERIOD          reduce using rule 237 (identifier -> ID .)
    ARROW           reduce using rule 237 (identifier -> ID .)
    PLUSPLUS        reduce using rule 237 (identifier -> ID .)
    MINUSMINUS      reduce using rule 237 (identifier -> ID .)
    EQUALS          reduce using rule 237 (identifier -> ID .)
    XOREQUAL        reduce using rule 237 (identifier -> ID .)
    TIMESEQUAL      reduce using rule 237 (identifier -> ID .)
    DIVEQUAL        reduce using rule 237 (identifier -> ID .)
    MODEQUAL        reduce using rule 237 (identifier -> ID .)
    PLUSEQUAL       reduce using rule 237 (identifier -> ID .)
    MINUSEQUAL      reduce using rule 237 (identifier -> ID .)
    LSHIFTEQUAL     reduce using rule 237 (identifier -> ID .)
    RSHIFTEQUAL     reduce using rule 237 (identifier -> ID .)
    ANDEQUAL        reduce using rule 237 (identifier -> ID .)
    OREQUAL         reduce using rule 237 (identifier -> ID .)
    CONDOP          reduce using rule 237 (identifier -> ID .)
    TIMES           reduce using rule 237 (identifier -> ID .)
    DIVIDE          reduce using rule 237 (identifier -> ID .)
    MOD             reduce using rule 237 (identifier -> ID .)
    PLUS            reduce using rule 237 (identifier -> ID .)
    MINUS           reduce using rule 237 (identifier -> ID .)
    RSHIFT          reduce using rule 237 (identifier -> ID .)
    LSHIFT          reduce using rule 237 (identifier -> ID .)
    LT              reduce using rule 237 (identifier -> ID .)
    LE              reduce using rule 237 (identifier -> ID .)
    GE              reduce using rule 237 (identifier -> ID .)
    GT              reduce using rule 237 (identifier -> ID .)
    EQ              reduce using rule 237 (identifier -> ID .)
    NE              reduce using rule 237 (identifier -> ID .)
    AND             reduce using rule 237 (identifier -> ID .)
    OR              reduce using rule 237 (identifier -> ID .)
    XOR             reduce using rule 237 (identifier -> ID .)
    LAND            reduce using rule 237 (identifier -> ID .)
    LOR             reduce using rule 237 (identifier -> ID .)
    RBRACKET        reduce using rule 237 (identifier -> ID .)
    COMMA           reduce using rule 237 (identifier -> ID .)
    SEMI            reduce using rule 237 (identifier -> ID .)
    RPAREN          reduce using rule 237 (identifier -> ID .)
    RBRACE          reduce using rule 237 (identifier -> ID .)
    COLON           reduce using rule 237 (identifier -> ID .)


state 112

    (113) direct_declarator -> direct_declarator LPAREN identifier_list_opt . RPAREN

    RPAREN          shift and go to state 203


state 113

    (122) parameter_declaration -> declaration_specifiers . declarator
    (123) parameter_declaration -> declaration_specifiers . abstract_declarator_opt
    (106) declarator -> . direct_declarator
    (107) declarator -> . pointer direct_declarator
    (1) abstract_declarator_opt -> . empty
    (2) abstract_declarator_opt -> . abstract_declarator
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . LPAREN declarator RPAREN
    (110) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (111) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (112) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (113) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (114) pointer -> . TIMES type_qualifier_list_opt
    (115) pointer -> . TIMES type_qualifier_list_opt pointer
    (251) empty -> .
    (137) abstract_declarator -> . pointer
    (138) abstract_declarator -> . pointer direct_abstract_declarator
    (139) abstract_declarator -> . direct_abstract_declarator
    (140) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (141) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (142) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (143) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (144) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (145) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (146) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    ID              shift and go to state 46
    LPAREN          shift and go to state 207
    TIMES           shift and go to state 11
    COMMA           reduce using rule 251 (empty -> .)
    RPAREN          reduce using rule 251 (empty -> .)
    LBRACKET        shift and go to state 208

    abstract_declarator_opt        shift and go to state 204
    pointer                        shift and go to state 205
    direct_abstract_declarator     shift and go to state 206
    empty                          shift and go to state 209
    declarator                     shift and go to state 210
    abstract_declarator            shift and go to state 211
    direct_declarator              shift and go to state 44

state 114

    (216) unary_operator -> PLUS .

    LPAREN          reduce using rule 216 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 216 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 216 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 216 (unary_operator -> PLUS .)
    AND             reduce using rule 216 (unary_operator -> PLUS .)
    TIMES           reduce using rule 216 (unary_operator -> PLUS .)
    PLUS            reduce using rule 216 (unary_operator -> PLUS .)
    MINUS           reduce using rule 216 (unary_operator -> PLUS .)
    NOT             reduce using rule 216 (unary_operator -> PLUS .)
    LNOT            reduce using rule 216 (unary_operator -> PLUS .)
    ID              reduce using rule 216 (unary_operator -> PLUS .)
    INT_CONST_DEC   reduce using rule 216 (unary_operator -> PLUS .)
    INT_CONST_OCT   reduce using rule 216 (unary_operator -> PLUS .)
    INT_CONST_HEX   reduce using rule 216 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 216 (unary_operator -> PLUS .)
    HEX_FLOAT_CONST reduce using rule 216 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 216 (unary_operator -> PLUS .)
    WCHAR_CONST     reduce using rule 216 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 216 (unary_operator -> PLUS .)
    WSTRING_LITERAL reduce using rule 216 (unary_operator -> PLUS .)


state 115

    (220) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 220 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 220 (postfix_expression -> primary_expression .)
    PERIOD          reduce using rule 220 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 220 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 220 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 220 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 220 (postfix_expression -> primary_expression .)
    XOREQUAL        reduce using rule 220 (postfix_expression -> primary_expression .)
    TIMESEQUAL      reduce using rule 220 (postfix_expression -> primary_expression .)
    DIVEQUAL        reduce using rule 220 (postfix_expression -> primary_expression .)
    MODEQUAL        reduce using rule 220 (postfix_expression -> primary_expression .)
    PLUSEQUAL       reduce using rule 220 (postfix_expression -> primary_expression .)
    MINUSEQUAL      reduce using rule 220 (postfix_expression -> primary_expression .)
    LSHIFTEQUAL     reduce using rule 220 (postfix_expression -> primary_expression .)
    RSHIFTEQUAL     reduce using rule 220 (postfix_expression -> primary_expression .)
    ANDEQUAL        reduce using rule 220 (postfix_expression -> primary_expression .)
    OREQUAL         reduce using rule 220 (postfix_expression -> primary_expression .)
    CONDOP          reduce using rule 220 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 220 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 220 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 220 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 220 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 220 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 220 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 220 (postfix_expression -> primary_expression .)
    LT              reduce using rule 220 (postfix_expression -> primary_expression .)
    LE              reduce using rule 220 (postfix_expression -> primary_expression .)
    GE              reduce using rule 220 (postfix_expression -> primary_expression .)
    GT              reduce using rule 220 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 220 (postfix_expression -> primary_expression .)
    NE              reduce using rule 220 (postfix_expression -> primary_expression .)
    AND             reduce using rule 220 (postfix_expression -> primary_expression .)
    OR              reduce using rule 220 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 220 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 220 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 220 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 220 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 220 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 220 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 220 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 220 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 220 (postfix_expression -> primary_expression .)


state 116

    (209) unary_expression -> PLUSPLUS . unary_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 212
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    postfix_expression             shift and go to state 136
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 213
    unary_operator                 shift and go to state 146

state 117

    (214) unary_operator -> AND .

    LPAREN          reduce using rule 214 (unary_operator -> AND .)
    PLUSPLUS        reduce using rule 214 (unary_operator -> AND .)
    MINUSMINUS      reduce using rule 214 (unary_operator -> AND .)
    SIZEOF          reduce using rule 214 (unary_operator -> AND .)
    AND             reduce using rule 214 (unary_operator -> AND .)
    TIMES           reduce using rule 214 (unary_operator -> AND .)
    PLUS            reduce using rule 214 (unary_operator -> AND .)
    MINUS           reduce using rule 214 (unary_operator -> AND .)
    NOT             reduce using rule 214 (unary_operator -> AND .)
    LNOT            reduce using rule 214 (unary_operator -> AND .)
    ID              reduce using rule 214 (unary_operator -> AND .)
    INT_CONST_DEC   reduce using rule 214 (unary_operator -> AND .)
    INT_CONST_OCT   reduce using rule 214 (unary_operator -> AND .)
    INT_CONST_HEX   reduce using rule 214 (unary_operator -> AND .)
    FLOAT_CONST     reduce using rule 214 (unary_operator -> AND .)
    HEX_FLOAT_CONST reduce using rule 214 (unary_operator -> AND .)
    CHAR_CONST      reduce using rule 214 (unary_operator -> AND .)
    WCHAR_CONST     reduce using rule 214 (unary_operator -> AND .)
    STRING_LITERAL  reduce using rule 214 (unary_operator -> AND .)
    WSTRING_LITERAL reduce using rule 214 (unary_operator -> AND .)


state 118

    (247) unified_wstring_literal -> WSTRING_LITERAL .

    WSTRING_LITERAL reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    LBRACKET        reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    LPAREN          reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    PERIOD          reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    ARROW           reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    PLUSPLUS        reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    MINUSMINUS      reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    EQUALS          reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    XOREQUAL        reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    TIMESEQUAL      reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    DIVEQUAL        reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    MODEQUAL        reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    PLUSEQUAL       reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    MINUSEQUAL      reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    ANDEQUAL        reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    OREQUAL         reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    CONDOP          reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    TIMES           reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    DIVIDE          reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    MOD             reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    PLUS            reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    MINUS           reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    RSHIFT          reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    LSHIFT          reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    LT              reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    LE              reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    GE              reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    GT              reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    EQ              reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    NE              reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    AND             reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    OR              reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    XOR             reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    LAND            reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    LOR             reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    COMMA           reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    RPAREN          reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    RBRACKET        reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    SEMI            reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    RBRACE          reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)
    COLON           reduce using rule 247 (unified_wstring_literal -> WSTRING_LITERAL .)


state 119

    (218) unary_operator -> NOT .

    LPAREN          reduce using rule 218 (unary_operator -> NOT .)
    PLUSPLUS        reduce using rule 218 (unary_operator -> NOT .)
    MINUSMINUS      reduce using rule 218 (unary_operator -> NOT .)
    SIZEOF          reduce using rule 218 (unary_operator -> NOT .)
    AND             reduce using rule 218 (unary_operator -> NOT .)
    TIMES           reduce using rule 218 (unary_operator -> NOT .)
    PLUS            reduce using rule 218 (unary_operator -> NOT .)
    MINUS           reduce using rule 218 (unary_operator -> NOT .)
    NOT             reduce using rule 218 (unary_operator -> NOT .)
    LNOT            reduce using rule 218 (unary_operator -> NOT .)
    ID              reduce using rule 218 (unary_operator -> NOT .)
    INT_CONST_DEC   reduce using rule 218 (unary_operator -> NOT .)
    INT_CONST_OCT   reduce using rule 218 (unary_operator -> NOT .)
    INT_CONST_HEX   reduce using rule 218 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 218 (unary_operator -> NOT .)
    HEX_FLOAT_CONST reduce using rule 218 (unary_operator -> NOT .)
    CHAR_CONST      reduce using rule 218 (unary_operator -> NOT .)
    WCHAR_CONST     reduce using rule 218 (unary_operator -> NOT .)
    STRING_LITERAL  reduce using rule 218 (unary_operator -> NOT .)
    WSTRING_LITERAL reduce using rule 218 (unary_operator -> NOT .)


state 120

    (230) primary_expression -> identifier .

    LBRACKET        reduce using rule 230 (primary_expression -> identifier .)
    LPAREN          reduce using rule 230 (primary_expression -> identifier .)
    PERIOD          reduce using rule 230 (primary_expression -> identifier .)
    ARROW           reduce using rule 230 (primary_expression -> identifier .)
    PLUSPLUS        reduce using rule 230 (primary_expression -> identifier .)
    MINUSMINUS      reduce using rule 230 (primary_expression -> identifier .)
    EQUALS          reduce using rule 230 (primary_expression -> identifier .)
    XOREQUAL        reduce using rule 230 (primary_expression -> identifier .)
    TIMESEQUAL      reduce using rule 230 (primary_expression -> identifier .)
    DIVEQUAL        reduce using rule 230 (primary_expression -> identifier .)
    MODEQUAL        reduce using rule 230 (primary_expression -> identifier .)
    PLUSEQUAL       reduce using rule 230 (primary_expression -> identifier .)
    MINUSEQUAL      reduce using rule 230 (primary_expression -> identifier .)
    LSHIFTEQUAL     reduce using rule 230 (primary_expression -> identifier .)
    RSHIFTEQUAL     reduce using rule 230 (primary_expression -> identifier .)
    ANDEQUAL        reduce using rule 230 (primary_expression -> identifier .)
    OREQUAL         reduce using rule 230 (primary_expression -> identifier .)
    CONDOP          reduce using rule 230 (primary_expression -> identifier .)
    TIMES           reduce using rule 230 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 230 (primary_expression -> identifier .)
    MOD             reduce using rule 230 (primary_expression -> identifier .)
    PLUS            reduce using rule 230 (primary_expression -> identifier .)
    MINUS           reduce using rule 230 (primary_expression -> identifier .)
    RSHIFT          reduce using rule 230 (primary_expression -> identifier .)
    LSHIFT          reduce using rule 230 (primary_expression -> identifier .)
    LT              reduce using rule 230 (primary_expression -> identifier .)
    LE              reduce using rule 230 (primary_expression -> identifier .)
    GE              reduce using rule 230 (primary_expression -> identifier .)
    GT              reduce using rule 230 (primary_expression -> identifier .)
    EQ              reduce using rule 230 (primary_expression -> identifier .)
    NE              reduce using rule 230 (primary_expression -> identifier .)
    AND             reduce using rule 230 (primary_expression -> identifier .)
    OR              reduce using rule 230 (primary_expression -> identifier .)
    XOR             reduce using rule 230 (primary_expression -> identifier .)
    LAND            reduce using rule 230 (primary_expression -> identifier .)
    LOR             reduce using rule 230 (primary_expression -> identifier .)
    RPAREN          reduce using rule 230 (primary_expression -> identifier .)
    COMMA           reduce using rule 230 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 230 (primary_expression -> identifier .)
    SEMI            reduce using rule 230 (primary_expression -> identifier .)
    RBRACE          reduce using rule 230 (primary_expression -> identifier .)
    COLON           reduce using rule 230 (primary_expression -> identifier .)


state 121

    (233) primary_expression -> unified_wstring_literal .
    (248) unified_wstring_literal -> unified_wstring_literal . WSTRING_LITERAL

    LBRACKET        reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    LPAREN          reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    PERIOD          reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    ARROW           reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    PLUSPLUS        reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    MINUSMINUS      reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    EQUALS          reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    XOREQUAL        reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    TIMESEQUAL      reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    DIVEQUAL        reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    MODEQUAL        reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    PLUSEQUAL       reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    MINUSEQUAL      reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    LSHIFTEQUAL     reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    RSHIFTEQUAL     reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    ANDEQUAL        reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    OREQUAL         reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    CONDOP          reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    TIMES           reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    DIVIDE          reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    MOD             reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    PLUS            reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    MINUS           reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    RSHIFT          reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    LSHIFT          reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    LT              reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    LE              reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    GE              reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    GT              reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    EQ              reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    NE              reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    AND             reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    OR              reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    XOR             reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    LAND            reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    LOR             reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    RPAREN          reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    COMMA           reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    RBRACKET        reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    SEMI            reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    RBRACE          reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    COLON           reduce using rule 233 (primary_expression -> unified_wstring_literal .)
    WSTRING_LITERAL shift and go to state 214


state 122

    (111) direct_declarator -> direct_declarator LBRACKET TIMES . RBRACKET
    (215) unary_operator -> TIMES .

    RBRACKET        shift and go to state 215
    LPAREN          reduce using rule 215 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 215 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 215 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 215 (unary_operator -> TIMES .)
    AND             reduce using rule 215 (unary_operator -> TIMES .)
    TIMES           reduce using rule 215 (unary_operator -> TIMES .)
    PLUS            reduce using rule 215 (unary_operator -> TIMES .)
    MINUS           reduce using rule 215 (unary_operator -> TIMES .)
    NOT             reduce using rule 215 (unary_operator -> TIMES .)
    LNOT            reduce using rule 215 (unary_operator -> TIMES .)
    ID              reduce using rule 215 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 215 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 215 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 215 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 215 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 215 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 215 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 215 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 215 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 215 (unary_operator -> TIMES .)


state 123

    (210) unary_expression -> MINUSMINUS . unary_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 212
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    postfix_expression             shift and go to state 136
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 216
    unary_operator                 shift and go to state 146

state 124

    (231) primary_expression -> constant .

    LBRACKET        reduce using rule 231 (primary_expression -> constant .)
    LPAREN          reduce using rule 231 (primary_expression -> constant .)
    PERIOD          reduce using rule 231 (primary_expression -> constant .)
    ARROW           reduce using rule 231 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 231 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 231 (primary_expression -> constant .)
    EQUALS          reduce using rule 231 (primary_expression -> constant .)
    XOREQUAL        reduce using rule 231 (primary_expression -> constant .)
    TIMESEQUAL      reduce using rule 231 (primary_expression -> constant .)
    DIVEQUAL        reduce using rule 231 (primary_expression -> constant .)
    MODEQUAL        reduce using rule 231 (primary_expression -> constant .)
    PLUSEQUAL       reduce using rule 231 (primary_expression -> constant .)
    MINUSEQUAL      reduce using rule 231 (primary_expression -> constant .)
    LSHIFTEQUAL     reduce using rule 231 (primary_expression -> constant .)
    RSHIFTEQUAL     reduce using rule 231 (primary_expression -> constant .)
    ANDEQUAL        reduce using rule 231 (primary_expression -> constant .)
    OREQUAL         reduce using rule 231 (primary_expression -> constant .)
    CONDOP          reduce using rule 231 (primary_expression -> constant .)
    TIMES           reduce using rule 231 (primary_expression -> constant .)
    DIVIDE          reduce using rule 231 (primary_expression -> constant .)
    MOD             reduce using rule 231 (primary_expression -> constant .)
    PLUS            reduce using rule 231 (primary_expression -> constant .)
    MINUS           reduce using rule 231 (primary_expression -> constant .)
    RSHIFT          reduce using rule 231 (primary_expression -> constant .)
    LSHIFT          reduce using rule 231 (primary_expression -> constant .)
    LT              reduce using rule 231 (primary_expression -> constant .)
    LE              reduce using rule 231 (primary_expression -> constant .)
    GE              reduce using rule 231 (primary_expression -> constant .)
    GT              reduce using rule 231 (primary_expression -> constant .)
    EQ              reduce using rule 231 (primary_expression -> constant .)
    NE              reduce using rule 231 (primary_expression -> constant .)
    AND             reduce using rule 231 (primary_expression -> constant .)
    OR              reduce using rule 231 (primary_expression -> constant .)
    XOR             reduce using rule 231 (primary_expression -> constant .)
    LAND            reduce using rule 231 (primary_expression -> constant .)
    LOR             reduce using rule 231 (primary_expression -> constant .)
    RPAREN          reduce using rule 231 (primary_expression -> constant .)
    COMMA           reduce using rule 231 (primary_expression -> constant .)
    RBRACKET        reduce using rule 231 (primary_expression -> constant .)
    SEMI            reduce using rule 231 (primary_expression -> constant .)
    RBRACE          reduce using rule 231 (primary_expression -> constant .)
    COLON           reduce using rule 231 (primary_expression -> constant .)


state 125

    (232) primary_expression -> unified_string_literal .
    (246) unified_string_literal -> unified_string_literal . STRING_LITERAL

    LBRACKET        reduce using rule 232 (primary_expression -> unified_string_literal .)
    LPAREN          reduce using rule 232 (primary_expression -> unified_string_literal .)
    PERIOD          reduce using rule 232 (primary_expression -> unified_string_literal .)
    ARROW           reduce using rule 232 (primary_expression -> unified_string_literal .)
    PLUSPLUS        reduce using rule 232 (primary_expression -> unified_string_literal .)
    MINUSMINUS      reduce using rule 232 (primary_expression -> unified_string_literal .)
    EQUALS          reduce using rule 232 (primary_expression -> unified_string_literal .)
    XOREQUAL        reduce using rule 232 (primary_expression -> unified_string_literal .)
    TIMESEQUAL      reduce using rule 232 (primary_expression -> unified_string_literal .)
    DIVEQUAL        reduce using rule 232 (primary_expression -> unified_string_literal .)
    MODEQUAL        reduce using rule 232 (primary_expression -> unified_string_literal .)
    PLUSEQUAL       reduce using rule 232 (primary_expression -> unified_string_literal .)
    MINUSEQUAL      reduce using rule 232 (primary_expression -> unified_string_literal .)
    LSHIFTEQUAL     reduce using rule 232 (primary_expression -> unified_string_literal .)
    RSHIFTEQUAL     reduce using rule 232 (primary_expression -> unified_string_literal .)
    ANDEQUAL        reduce using rule 232 (primary_expression -> unified_string_literal .)
    OREQUAL         reduce using rule 232 (primary_expression -> unified_string_literal .)
    CONDOP          reduce using rule 232 (primary_expression -> unified_string_literal .)
    TIMES           reduce using rule 232 (primary_expression -> unified_string_literal .)
    DIVIDE          reduce using rule 232 (primary_expression -> unified_string_literal .)
    MOD             reduce using rule 232 (primary_expression -> unified_string_literal .)
    PLUS            reduce using rule 232 (primary_expression -> unified_string_literal .)
    MINUS           reduce using rule 232 (primary_expression -> unified_string_literal .)
    RSHIFT          reduce using rule 232 (primary_expression -> unified_string_literal .)
    LSHIFT          reduce using rule 232 (primary_expression -> unified_string_literal .)
    LT              reduce using rule 232 (primary_expression -> unified_string_literal .)
    LE              reduce using rule 232 (primary_expression -> unified_string_literal .)
    GE              reduce using rule 232 (primary_expression -> unified_string_literal .)
    GT              reduce using rule 232 (primary_expression -> unified_string_literal .)
    EQ              reduce using rule 232 (primary_expression -> unified_string_literal .)
    NE              reduce using rule 232 (primary_expression -> unified_string_literal .)
    AND             reduce using rule 232 (primary_expression -> unified_string_literal .)
    OR              reduce using rule 232 (primary_expression -> unified_string_literal .)
    XOR             reduce using rule 232 (primary_expression -> unified_string_literal .)
    LAND            reduce using rule 232 (primary_expression -> unified_string_literal .)
    LOR             reduce using rule 232 (primary_expression -> unified_string_literal .)
    RPAREN          reduce using rule 232 (primary_expression -> unified_string_literal .)
    COMMA           reduce using rule 232 (primary_expression -> unified_string_literal .)
    RBRACKET        reduce using rule 232 (primary_expression -> unified_string_literal .)
    SEMI            reduce using rule 232 (primary_expression -> unified_string_literal .)
    RBRACE          reduce using rule 232 (primary_expression -> unified_string_literal .)
    COLON           reduce using rule 232 (primary_expression -> unified_string_literal .)
    STRING_LITERAL  shift and go to state 217


state 126

    (217) unary_operator -> MINUS .

    LPAREN          reduce using rule 217 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 217 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 217 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 217 (unary_operator -> MINUS .)
    AND             reduce using rule 217 (unary_operator -> MINUS .)
    TIMES           reduce using rule 217 (unary_operator -> MINUS .)
    PLUS            reduce using rule 217 (unary_operator -> MINUS .)
    MINUS           reduce using rule 217 (unary_operator -> MINUS .)
    NOT             reduce using rule 217 (unary_operator -> MINUS .)
    LNOT            reduce using rule 217 (unary_operator -> MINUS .)
    ID              reduce using rule 217 (unary_operator -> MINUS .)
    INT_CONST_DEC   reduce using rule 217 (unary_operator -> MINUS .)
    INT_CONST_OCT   reduce using rule 217 (unary_operator -> MINUS .)
    INT_CONST_HEX   reduce using rule 217 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 217 (unary_operator -> MINUS .)
    HEX_FLOAT_CONST reduce using rule 217 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 217 (unary_operator -> MINUS .)
    WCHAR_CONST     reduce using rule 217 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 217 (unary_operator -> MINUS .)
    WSTRING_LITERAL reduce using rule 217 (unary_operator -> MINUS .)


state 127

    (3) assignment_expression_opt -> empty .

    RBRACKET        reduce using rule 3 (assignment_expression_opt -> empty .)


state 128

    (185) conditional_expression -> binary_expression .
    (186) conditional_expression -> binary_expression . CONDOP expression COLON conditional_expression
    (188) binary_expression -> binary_expression . TIMES binary_expression
    (189) binary_expression -> binary_expression . DIVIDE binary_expression
    (190) binary_expression -> binary_expression . MOD binary_expression
    (191) binary_expression -> binary_expression . PLUS binary_expression
    (192) binary_expression -> binary_expression . MINUS binary_expression
    (193) binary_expression -> binary_expression . RSHIFT binary_expression
    (194) binary_expression -> binary_expression . LSHIFT binary_expression
    (195) binary_expression -> binary_expression . LT binary_expression
    (196) binary_expression -> binary_expression . LE binary_expression
    (197) binary_expression -> binary_expression . GE binary_expression
    (198) binary_expression -> binary_expression . GT binary_expression
    (199) binary_expression -> binary_expression . EQ binary_expression
    (200) binary_expression -> binary_expression . NE binary_expression
    (201) binary_expression -> binary_expression . AND binary_expression
    (202) binary_expression -> binary_expression . OR binary_expression
    (203) binary_expression -> binary_expression . XOR binary_expression
    (204) binary_expression -> binary_expression . LAND binary_expression
    (205) binary_expression -> binary_expression . LOR binary_expression

    COMMA           reduce using rule 185 (conditional_expression -> binary_expression .)
    SEMI            reduce using rule 185 (conditional_expression -> binary_expression .)
    RPAREN          reduce using rule 185 (conditional_expression -> binary_expression .)
    COLON           reduce using rule 185 (conditional_expression -> binary_expression .)
    RBRACE          reduce using rule 185 (conditional_expression -> binary_expression .)
    RBRACKET        reduce using rule 185 (conditional_expression -> binary_expression .)
    CONDOP          shift and go to state 225
    TIMES           shift and go to state 224
    DIVIDE          shift and go to state 223
    MOD             shift and go to state 230
    PLUS            shift and go to state 229
    MINUS           shift and go to state 233
    RSHIFT          shift and go to state 218
    LSHIFT          shift and go to state 234
    LT              shift and go to state 231
    LE              shift and go to state 236
    GE              shift and go to state 235
    GT              shift and go to state 222
    EQ              shift and go to state 221
    NE              shift and go to state 228
    AND             shift and go to state 219
    OR              shift and go to state 232
    XOR             shift and go to state 226
    LAND            shift and go to state 220
    LOR             shift and go to state 227


state 129

    (239) constant -> INT_CONST_OCT .

    LBRACKET        reduce using rule 239 (constant -> INT_CONST_OCT .)
    LPAREN          reduce using rule 239 (constant -> INT_CONST_OCT .)
    PERIOD          reduce using rule 239 (constant -> INT_CONST_OCT .)
    ARROW           reduce using rule 239 (constant -> INT_CONST_OCT .)
    PLUSPLUS        reduce using rule 239 (constant -> INT_CONST_OCT .)
    MINUSMINUS      reduce using rule 239 (constant -> INT_CONST_OCT .)
    EQUALS          reduce using rule 239 (constant -> INT_CONST_OCT .)
    XOREQUAL        reduce using rule 239 (constant -> INT_CONST_OCT .)
    TIMESEQUAL      reduce using rule 239 (constant -> INT_CONST_OCT .)
    DIVEQUAL        reduce using rule 239 (constant -> INT_CONST_OCT .)
    MODEQUAL        reduce using rule 239 (constant -> INT_CONST_OCT .)
    PLUSEQUAL       reduce using rule 239 (constant -> INT_CONST_OCT .)
    MINUSEQUAL      reduce using rule 239 (constant -> INT_CONST_OCT .)
    LSHIFTEQUAL     reduce using rule 239 (constant -> INT_CONST_OCT .)
    RSHIFTEQUAL     reduce using rule 239 (constant -> INT_CONST_OCT .)
    ANDEQUAL        reduce using rule 239 (constant -> INT_CONST_OCT .)
    OREQUAL         reduce using rule 239 (constant -> INT_CONST_OCT .)
    CONDOP          reduce using rule 239 (constant -> INT_CONST_OCT .)
    TIMES           reduce using rule 239 (constant -> INT_CONST_OCT .)
    DIVIDE          reduce using rule 239 (constant -> INT_CONST_OCT .)
    MOD             reduce using rule 239 (constant -> INT_CONST_OCT .)
    PLUS            reduce using rule 239 (constant -> INT_CONST_OCT .)
    MINUS           reduce using rule 239 (constant -> INT_CONST_OCT .)
    RSHIFT          reduce using rule 239 (constant -> INT_CONST_OCT .)
    LSHIFT          reduce using rule 239 (constant -> INT_CONST_OCT .)
    LT              reduce using rule 239 (constant -> INT_CONST_OCT .)
    LE              reduce using rule 239 (constant -> INT_CONST_OCT .)
    GE              reduce using rule 239 (constant -> INT_CONST_OCT .)
    GT              reduce using rule 239 (constant -> INT_CONST_OCT .)
    EQ              reduce using rule 239 (constant -> INT_CONST_OCT .)
    NE              reduce using rule 239 (constant -> INT_CONST_OCT .)
    AND             reduce using rule 239 (constant -> INT_CONST_OCT .)
    OR              reduce using rule 239 (constant -> INT_CONST_OCT .)
    XOR             reduce using rule 239 (constant -> INT_CONST_OCT .)
    LAND            reduce using rule 239 (constant -> INT_CONST_OCT .)
    LOR             reduce using rule 239 (constant -> INT_CONST_OCT .)
    COMMA           reduce using rule 239 (constant -> INT_CONST_OCT .)
    RBRACE          reduce using rule 239 (constant -> INT_CONST_OCT .)
    RBRACKET        reduce using rule 239 (constant -> INT_CONST_OCT .)
    SEMI            reduce using rule 239 (constant -> INT_CONST_OCT .)
    RPAREN          reduce using rule 239 (constant -> INT_CONST_OCT .)
    COLON           reduce using rule 239 (constant -> INT_CONST_OCT .)


state 130

    (240) constant -> INT_CONST_HEX .

    LBRACKET        reduce using rule 240 (constant -> INT_CONST_HEX .)
    LPAREN          reduce using rule 240 (constant -> INT_CONST_HEX .)
    PERIOD          reduce using rule 240 (constant -> INT_CONST_HEX .)
    ARROW           reduce using rule 240 (constant -> INT_CONST_HEX .)
    PLUSPLUS        reduce using rule 240 (constant -> INT_CONST_HEX .)
    MINUSMINUS      reduce using rule 240 (constant -> INT_CONST_HEX .)
    EQUALS          reduce using rule 240 (constant -> INT_CONST_HEX .)
    XOREQUAL        reduce using rule 240 (constant -> INT_CONST_HEX .)
    TIMESEQUAL      reduce using rule 240 (constant -> INT_CONST_HEX .)
    DIVEQUAL        reduce using rule 240 (constant -> INT_CONST_HEX .)
    MODEQUAL        reduce using rule 240 (constant -> INT_CONST_HEX .)
    PLUSEQUAL       reduce using rule 240 (constant -> INT_CONST_HEX .)
    MINUSEQUAL      reduce using rule 240 (constant -> INT_CONST_HEX .)
    LSHIFTEQUAL     reduce using rule 240 (constant -> INT_CONST_HEX .)
    RSHIFTEQUAL     reduce using rule 240 (constant -> INT_CONST_HEX .)
    ANDEQUAL        reduce using rule 240 (constant -> INT_CONST_HEX .)
    OREQUAL         reduce using rule 240 (constant -> INT_CONST_HEX .)
    CONDOP          reduce using rule 240 (constant -> INT_CONST_HEX .)
    TIMES           reduce using rule 240 (constant -> INT_CONST_HEX .)
    DIVIDE          reduce using rule 240 (constant -> INT_CONST_HEX .)
    MOD             reduce using rule 240 (constant -> INT_CONST_HEX .)
    PLUS            reduce using rule 240 (constant -> INT_CONST_HEX .)
    MINUS           reduce using rule 240 (constant -> INT_CONST_HEX .)
    RSHIFT          reduce using rule 240 (constant -> INT_CONST_HEX .)
    LSHIFT          reduce using rule 240 (constant -> INT_CONST_HEX .)
    LT              reduce using rule 240 (constant -> INT_CONST_HEX .)
    LE              reduce using rule 240 (constant -> INT_CONST_HEX .)
    GE              reduce using rule 240 (constant -> INT_CONST_HEX .)
    GT              reduce using rule 240 (constant -> INT_CONST_HEX .)
    EQ              reduce using rule 240 (constant -> INT_CONST_HEX .)
    NE              reduce using rule 240 (constant -> INT_CONST_HEX .)
    AND             reduce using rule 240 (constant -> INT_CONST_HEX .)
    OR              reduce using rule 240 (constant -> INT_CONST_HEX .)
    XOR             reduce using rule 240 (constant -> INT_CONST_HEX .)
    LAND            reduce using rule 240 (constant -> INT_CONST_HEX .)
    LOR             reduce using rule 240 (constant -> INT_CONST_HEX .)
    COMMA           reduce using rule 240 (constant -> INT_CONST_HEX .)
    RBRACE          reduce using rule 240 (constant -> INT_CONST_HEX .)
    RBRACKET        reduce using rule 240 (constant -> INT_CONST_HEX .)
    SEMI            reduce using rule 240 (constant -> INT_CONST_HEX .)
    RPAREN          reduce using rule 240 (constant -> INT_CONST_HEX .)
    COLON           reduce using rule 240 (constant -> INT_CONST_HEX .)


state 131

    (4) assignment_expression_opt -> assignment_expression .

    RBRACKET        reduce using rule 4 (assignment_expression_opt -> assignment_expression .)


state 132

    (228) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list COMMA brace_close
    (207) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (234) primary_expression -> LPAREN . expression RPAREN
    (136) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (79) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (80) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    primary_expression             shift and go to state 115
    struct_or_union_specifier      shift and go to state 31
    postfix_expression             shift and go to state 136
    specifier_qualifier_list       shift and go to state 238
    conditional_expression         shift and go to state 145
    enum_specifier                 shift and go to state 8
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    type_qualifier                 shift and go to state 99
    type_specifier                 shift and go to state 100
    constant                       shift and go to state 124
    expression                     shift and go to state 239
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    type_name                      shift and go to state 237
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    cast_expression                shift and go to state 142
    assignment_expression          shift and go to state 159
    typedef_name                   shift and go to state 48
    struct_or_union                shift and go to state 29

state 133

    (241) constant -> FLOAT_CONST .

    LBRACKET        reduce using rule 241 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 241 (constant -> FLOAT_CONST .)
    PERIOD          reduce using rule 241 (constant -> FLOAT_CONST .)
    ARROW           reduce using rule 241 (constant -> FLOAT_CONST .)
    PLUSPLUS        reduce using rule 241 (constant -> FLOAT_CONST .)
    MINUSMINUS      reduce using rule 241 (constant -> FLOAT_CONST .)
    EQUALS          reduce using rule 241 (constant -> FLOAT_CONST .)
    XOREQUAL        reduce using rule 241 (constant -> FLOAT_CONST .)
    TIMESEQUAL      reduce using rule 241 (constant -> FLOAT_CONST .)
    DIVEQUAL        reduce using rule 241 (constant -> FLOAT_CONST .)
    MODEQUAL        reduce using rule 241 (constant -> FLOAT_CONST .)
    PLUSEQUAL       reduce using rule 241 (constant -> FLOAT_CONST .)
    MINUSEQUAL      reduce using rule 241 (constant -> FLOAT_CONST .)
    LSHIFTEQUAL     reduce using rule 241 (constant -> FLOAT_CONST .)
    RSHIFTEQUAL     reduce using rule 241 (constant -> FLOAT_CONST .)
    ANDEQUAL        reduce using rule 241 (constant -> FLOAT_CONST .)
    OREQUAL         reduce using rule 241 (constant -> FLOAT_CONST .)
    CONDOP          reduce using rule 241 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 241 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 241 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 241 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 241 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 241 (constant -> FLOAT_CONST .)
    RSHIFT          reduce using rule 241 (constant -> FLOAT_CONST .)
    LSHIFT          reduce using rule 241 (constant -> FLOAT_CONST .)
    LT              reduce using rule 241 (constant -> FLOAT_CONST .)
    LE              reduce using rule 241 (constant -> FLOAT_CONST .)
    GE              reduce using rule 241 (constant -> FLOAT_CONST .)
    GT              reduce using rule 241 (constant -> FLOAT_CONST .)
    EQ              reduce using rule 241 (constant -> FLOAT_CONST .)
    NE              reduce using rule 241 (constant -> FLOAT_CONST .)
    AND             reduce using rule 241 (constant -> FLOAT_CONST .)
    OR              reduce using rule 241 (constant -> FLOAT_CONST .)
    XOR             reduce using rule 241 (constant -> FLOAT_CONST .)
    LAND            reduce using rule 241 (constant -> FLOAT_CONST .)
    LOR             reduce using rule 241 (constant -> FLOAT_CONST .)
    COMMA           reduce using rule 241 (constant -> FLOAT_CONST .)
    RBRACE          reduce using rule 241 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 241 (constant -> FLOAT_CONST .)
    SEMI            reduce using rule 241 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 241 (constant -> FLOAT_CONST .)
    COLON           reduce using rule 241 (constant -> FLOAT_CONST .)


state 134

    (212) unary_expression -> SIZEOF . unary_expression
    (213) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 240
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    postfix_expression             shift and go to state 136
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 241
    unary_operator                 shift and go to state 146

state 135

    (245) unified_string_literal -> STRING_LITERAL .

    STRING_LITERAL  reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    LBRACKET        reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    LPAREN          reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    PERIOD          reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    ARROW           reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    PLUSPLUS        reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    MINUSMINUS      reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    EQUALS          reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    XOREQUAL        reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    DIVEQUAL        reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    MODEQUAL        reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    ANDEQUAL        reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    OREQUAL         reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    CONDOP          reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    TIMES           reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    DIVIDE          reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    MOD             reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    PLUS            reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    MINUS           reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    RSHIFT          reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    LSHIFT          reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    LT              reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    LE              reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    GE              reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    GT              reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    EQ              reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    NE              reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    AND             reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    OR              reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    XOR             reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    LAND            reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    LOR             reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    RPAREN          reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    COMMA           reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    RBRACKET        reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    SEMI            reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    RBRACE          reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)
    COLON           reduce using rule 245 (unified_string_literal -> STRING_LITERAL .)


state 136

    (208) unary_expression -> postfix_expression .
    (221) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (222) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> postfix_expression . LPAREN RPAREN
    (224) postfix_expression -> postfix_expression . PERIOD identifier
    (225) postfix_expression -> postfix_expression . ARROW identifier
    (226) postfix_expression -> postfix_expression . PLUSPLUS
    (227) postfix_expression -> postfix_expression . MINUSMINUS

    TIMES           reduce using rule 208 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 208 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 208 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 208 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 208 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 208 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 208 (unary_expression -> postfix_expression .)
    LT              reduce using rule 208 (unary_expression -> postfix_expression .)
    LE              reduce using rule 208 (unary_expression -> postfix_expression .)
    GE              reduce using rule 208 (unary_expression -> postfix_expression .)
    GT              reduce using rule 208 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 208 (unary_expression -> postfix_expression .)
    NE              reduce using rule 208 (unary_expression -> postfix_expression .)
    AND             reduce using rule 208 (unary_expression -> postfix_expression .)
    OR              reduce using rule 208 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 208 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 208 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 208 (unary_expression -> postfix_expression .)
    CONDOP          reduce using rule 208 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 208 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 208 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 208 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 208 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 208 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 208 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 208 (unary_expression -> postfix_expression .)
    XOREQUAL        reduce using rule 208 (unary_expression -> postfix_expression .)
    TIMESEQUAL      reduce using rule 208 (unary_expression -> postfix_expression .)
    DIVEQUAL        reduce using rule 208 (unary_expression -> postfix_expression .)
    MODEQUAL        reduce using rule 208 (unary_expression -> postfix_expression .)
    PLUSEQUAL       reduce using rule 208 (unary_expression -> postfix_expression .)
    MINUSEQUAL      reduce using rule 208 (unary_expression -> postfix_expression .)
    LSHIFTEQUAL     reduce using rule 208 (unary_expression -> postfix_expression .)
    RSHIFTEQUAL     reduce using rule 208 (unary_expression -> postfix_expression .)
    ANDEQUAL        reduce using rule 208 (unary_expression -> postfix_expression .)
    OREQUAL         reduce using rule 208 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 246
    LPAREN          shift and go to state 243
    PERIOD          shift and go to state 244
    ARROW           shift and go to state 242
    PLUSPLUS        shift and go to state 247
    MINUSMINUS      shift and go to state 245


state 137

    (244) constant -> WCHAR_CONST .

    LBRACKET        reduce using rule 244 (constant -> WCHAR_CONST .)
    LPAREN          reduce using rule 244 (constant -> WCHAR_CONST .)
    PERIOD          reduce using rule 244 (constant -> WCHAR_CONST .)
    ARROW           reduce using rule 244 (constant -> WCHAR_CONST .)
    PLUSPLUS        reduce using rule 244 (constant -> WCHAR_CONST .)
    MINUSMINUS      reduce using rule 244 (constant -> WCHAR_CONST .)
    EQUALS          reduce using rule 244 (constant -> WCHAR_CONST .)
    XOREQUAL        reduce using rule 244 (constant -> WCHAR_CONST .)
    TIMESEQUAL      reduce using rule 244 (constant -> WCHAR_CONST .)
    DIVEQUAL        reduce using rule 244 (constant -> WCHAR_CONST .)
    MODEQUAL        reduce using rule 244 (constant -> WCHAR_CONST .)
    PLUSEQUAL       reduce using rule 244 (constant -> WCHAR_CONST .)
    MINUSEQUAL      reduce using rule 244 (constant -> WCHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 244 (constant -> WCHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 244 (constant -> WCHAR_CONST .)
    ANDEQUAL        reduce using rule 244 (constant -> WCHAR_CONST .)
    OREQUAL         reduce using rule 244 (constant -> WCHAR_CONST .)
    CONDOP          reduce using rule 244 (constant -> WCHAR_CONST .)
    TIMES           reduce using rule 244 (constant -> WCHAR_CONST .)
    DIVIDE          reduce using rule 244 (constant -> WCHAR_CONST .)
    MOD             reduce using rule 244 (constant -> WCHAR_CONST .)
    PLUS            reduce using rule 244 (constant -> WCHAR_CONST .)
    MINUS           reduce using rule 244 (constant -> WCHAR_CONST .)
    RSHIFT          reduce using rule 244 (constant -> WCHAR_CONST .)
    LSHIFT          reduce using rule 244 (constant -> WCHAR_CONST .)
    LT              reduce using rule 244 (constant -> WCHAR_CONST .)
    LE              reduce using rule 244 (constant -> WCHAR_CONST .)
    GE              reduce using rule 244 (constant -> WCHAR_CONST .)
    GT              reduce using rule 244 (constant -> WCHAR_CONST .)
    EQ              reduce using rule 244 (constant -> WCHAR_CONST .)
    NE              reduce using rule 244 (constant -> WCHAR_CONST .)
    AND             reduce using rule 244 (constant -> WCHAR_CONST .)
    OR              reduce using rule 244 (constant -> WCHAR_CONST .)
    XOR             reduce using rule 244 (constant -> WCHAR_CONST .)
    LAND            reduce using rule 244 (constant -> WCHAR_CONST .)
    LOR             reduce using rule 244 (constant -> WCHAR_CONST .)
    COMMA           reduce using rule 244 (constant -> WCHAR_CONST .)
    RBRACE          reduce using rule 244 (constant -> WCHAR_CONST .)
    RBRACKET        reduce using rule 244 (constant -> WCHAR_CONST .)
    SEMI            reduce using rule 244 (constant -> WCHAR_CONST .)
    RPAREN          reduce using rule 244 (constant -> WCHAR_CONST .)
    COLON           reduce using rule 244 (constant -> WCHAR_CONST .)


state 138

    (243) constant -> CHAR_CONST .

    LBRACKET        reduce using rule 243 (constant -> CHAR_CONST .)
    LPAREN          reduce using rule 243 (constant -> CHAR_CONST .)
    PERIOD          reduce using rule 243 (constant -> CHAR_CONST .)
    ARROW           reduce using rule 243 (constant -> CHAR_CONST .)
    PLUSPLUS        reduce using rule 243 (constant -> CHAR_CONST .)
    MINUSMINUS      reduce using rule 243 (constant -> CHAR_CONST .)
    EQUALS          reduce using rule 243 (constant -> CHAR_CONST .)
    XOREQUAL        reduce using rule 243 (constant -> CHAR_CONST .)
    TIMESEQUAL      reduce using rule 243 (constant -> CHAR_CONST .)
    DIVEQUAL        reduce using rule 243 (constant -> CHAR_CONST .)
    MODEQUAL        reduce using rule 243 (constant -> CHAR_CONST .)
    PLUSEQUAL       reduce using rule 243 (constant -> CHAR_CONST .)
    MINUSEQUAL      reduce using rule 243 (constant -> CHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 243 (constant -> CHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 243 (constant -> CHAR_CONST .)
    ANDEQUAL        reduce using rule 243 (constant -> CHAR_CONST .)
    OREQUAL         reduce using rule 243 (constant -> CHAR_CONST .)
    CONDOP          reduce using rule 243 (constant -> CHAR_CONST .)
    TIMES           reduce using rule 243 (constant -> CHAR_CONST .)
    DIVIDE          reduce using rule 243 (constant -> CHAR_CONST .)
    MOD             reduce using rule 243 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 243 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 243 (constant -> CHAR_CONST .)
    RSHIFT          reduce using rule 243 (constant -> CHAR_CONST .)
    LSHIFT          reduce using rule 243 (constant -> CHAR_CONST .)
    LT              reduce using rule 243 (constant -> CHAR_CONST .)
    LE              reduce using rule 243 (constant -> CHAR_CONST .)
    GE              reduce using rule 243 (constant -> CHAR_CONST .)
    GT              reduce using rule 243 (constant -> CHAR_CONST .)
    EQ              reduce using rule 243 (constant -> CHAR_CONST .)
    NE              reduce using rule 243 (constant -> CHAR_CONST .)
    AND             reduce using rule 243 (constant -> CHAR_CONST .)
    OR              reduce using rule 243 (constant -> CHAR_CONST .)
    XOR             reduce using rule 243 (constant -> CHAR_CONST .)
    LAND            reduce using rule 243 (constant -> CHAR_CONST .)
    LOR             reduce using rule 243 (constant -> CHAR_CONST .)
    COMMA           reduce using rule 243 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 243 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 243 (constant -> CHAR_CONST .)
    SEMI            reduce using rule 243 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 243 (constant -> CHAR_CONST .)
    COLON           reduce using rule 243 (constant -> CHAR_CONST .)


state 139

    (219) unary_operator -> LNOT .

    LPAREN          reduce using rule 219 (unary_operator -> LNOT .)
    PLUSPLUS        reduce using rule 219 (unary_operator -> LNOT .)
    MINUSMINUS      reduce using rule 219 (unary_operator -> LNOT .)
    SIZEOF          reduce using rule 219 (unary_operator -> LNOT .)
    AND             reduce using rule 219 (unary_operator -> LNOT .)
    TIMES           reduce using rule 219 (unary_operator -> LNOT .)
    PLUS            reduce using rule 219 (unary_operator -> LNOT .)
    MINUS           reduce using rule 219 (unary_operator -> LNOT .)
    NOT             reduce using rule 219 (unary_operator -> LNOT .)
    LNOT            reduce using rule 219 (unary_operator -> LNOT .)
    ID              reduce using rule 219 (unary_operator -> LNOT .)
    INT_CONST_DEC   reduce using rule 219 (unary_operator -> LNOT .)
    INT_CONST_OCT   reduce using rule 219 (unary_operator -> LNOT .)
    INT_CONST_HEX   reduce using rule 219 (unary_operator -> LNOT .)
    FLOAT_CONST     reduce using rule 219 (unary_operator -> LNOT .)
    HEX_FLOAT_CONST reduce using rule 219 (unary_operator -> LNOT .)
    CHAR_CONST      reduce using rule 219 (unary_operator -> LNOT .)
    WCHAR_CONST     reduce using rule 219 (unary_operator -> LNOT .)
    STRING_LITERAL  reduce using rule 219 (unary_operator -> LNOT .)
    WSTRING_LITERAL reduce using rule 219 (unary_operator -> LNOT .)


state 140

    (172) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (206) cast_expression -> unary_expression .
    (173) assignment_operator -> . EQUALS
    (174) assignment_operator -> . XOREQUAL
    (175) assignment_operator -> . TIMESEQUAL
    (176) assignment_operator -> . DIVEQUAL
    (177) assignment_operator -> . MODEQUAL
    (178) assignment_operator -> . PLUSEQUAL
    (179) assignment_operator -> . MINUSEQUAL
    (180) assignment_operator -> . LSHIFTEQUAL
    (181) assignment_operator -> . RSHIFTEQUAL
    (182) assignment_operator -> . ANDEQUAL
    (183) assignment_operator -> . OREQUAL

    CONDOP          reduce using rule 206 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 206 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 206 (cast_expression -> unary_expression .)
    MOD             reduce using rule 206 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 206 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 206 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 206 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 206 (cast_expression -> unary_expression .)
    LT              reduce using rule 206 (cast_expression -> unary_expression .)
    LE              reduce using rule 206 (cast_expression -> unary_expression .)
    GE              reduce using rule 206 (cast_expression -> unary_expression .)
    GT              reduce using rule 206 (cast_expression -> unary_expression .)
    EQ              reduce using rule 206 (cast_expression -> unary_expression .)
    NE              reduce using rule 206 (cast_expression -> unary_expression .)
    AND             reduce using rule 206 (cast_expression -> unary_expression .)
    OR              reduce using rule 206 (cast_expression -> unary_expression .)
    XOR             reduce using rule 206 (cast_expression -> unary_expression .)
    LAND            reduce using rule 206 (cast_expression -> unary_expression .)
    LOR             reduce using rule 206 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 206 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 206 (cast_expression -> unary_expression .)
    COLON           reduce using rule 206 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 206 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 206 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 206 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 254
    XOREQUAL        shift and go to state 257
    TIMESEQUAL      shift and go to state 250
    DIVEQUAL        shift and go to state 249
    MODEQUAL        shift and go to state 248
    PLUSEQUAL       shift and go to state 256
    MINUSEQUAL      shift and go to state 259
    LSHIFTEQUAL     shift and go to state 252
    RSHIFTEQUAL     shift and go to state 251
    ANDEQUAL        shift and go to state 255
    OREQUAL         shift and go to state 253

    assignment_operator            shift and go to state 258

state 141

    (242) constant -> HEX_FLOAT_CONST .

    LBRACKET        reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    LPAREN          reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    PERIOD          reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    ARROW           reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    PLUSPLUS        reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    MINUSMINUS      reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    EQUALS          reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    XOREQUAL        reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    TIMESEQUAL      reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    DIVEQUAL        reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    MODEQUAL        reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    PLUSEQUAL       reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    MINUSEQUAL      reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    LSHIFTEQUAL     reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    RSHIFTEQUAL     reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    ANDEQUAL        reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    OREQUAL         reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    CONDOP          reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    TIMES           reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    DIVIDE          reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    MOD             reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    PLUS            reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    MINUS           reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    RSHIFT          reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    LSHIFT          reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    LT              reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    LE              reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    GE              reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    GT              reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    EQ              reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    NE              reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    AND             reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    OR              reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    XOR             reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    LAND            reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    LOR             reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    COMMA           reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    RBRACE          reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    RBRACKET        reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    SEMI            reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    RPAREN          reduce using rule 242 (constant -> HEX_FLOAT_CONST .)
    COLON           reduce using rule 242 (constant -> HEX_FLOAT_CONST .)


state 142

    (187) binary_expression -> cast_expression .

    CONDOP          reduce using rule 187 (binary_expression -> cast_expression .)
    TIMES           reduce using rule 187 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 187 (binary_expression -> cast_expression .)
    MOD             reduce using rule 187 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 187 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 187 (binary_expression -> cast_expression .)
    RSHIFT          reduce using rule 187 (binary_expression -> cast_expression .)
    LSHIFT          reduce using rule 187 (binary_expression -> cast_expression .)
    LT              reduce using rule 187 (binary_expression -> cast_expression .)
    LE              reduce using rule 187 (binary_expression -> cast_expression .)
    GE              reduce using rule 187 (binary_expression -> cast_expression .)
    GT              reduce using rule 187 (binary_expression -> cast_expression .)
    EQ              reduce using rule 187 (binary_expression -> cast_expression .)
    NE              reduce using rule 187 (binary_expression -> cast_expression .)
    AND             reduce using rule 187 (binary_expression -> cast_expression .)
    OR              reduce using rule 187 (binary_expression -> cast_expression .)
    XOR             reduce using rule 187 (binary_expression -> cast_expression .)
    LAND            reduce using rule 187 (binary_expression -> cast_expression .)
    LOR             reduce using rule 187 (binary_expression -> cast_expression .)
    RBRACKET        reduce using rule 187 (binary_expression -> cast_expression .)
    COMMA           reduce using rule 187 (binary_expression -> cast_expression .)
    RBRACE          reduce using rule 187 (binary_expression -> cast_expression .)
    SEMI            reduce using rule 187 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 187 (binary_expression -> cast_expression .)
    COLON           reduce using rule 187 (binary_expression -> cast_expression .)


state 143

    (238) constant -> INT_CONST_DEC .

    LBRACKET        reduce using rule 238 (constant -> INT_CONST_DEC .)
    LPAREN          reduce using rule 238 (constant -> INT_CONST_DEC .)
    PERIOD          reduce using rule 238 (constant -> INT_CONST_DEC .)
    ARROW           reduce using rule 238 (constant -> INT_CONST_DEC .)
    PLUSPLUS        reduce using rule 238 (constant -> INT_CONST_DEC .)
    MINUSMINUS      reduce using rule 238 (constant -> INT_CONST_DEC .)
    EQUALS          reduce using rule 238 (constant -> INT_CONST_DEC .)
    XOREQUAL        reduce using rule 238 (constant -> INT_CONST_DEC .)
    TIMESEQUAL      reduce using rule 238 (constant -> INT_CONST_DEC .)
    DIVEQUAL        reduce using rule 238 (constant -> INT_CONST_DEC .)
    MODEQUAL        reduce using rule 238 (constant -> INT_CONST_DEC .)
    PLUSEQUAL       reduce using rule 238 (constant -> INT_CONST_DEC .)
    MINUSEQUAL      reduce using rule 238 (constant -> INT_CONST_DEC .)
    LSHIFTEQUAL     reduce using rule 238 (constant -> INT_CONST_DEC .)
    RSHIFTEQUAL     reduce using rule 238 (constant -> INT_CONST_DEC .)
    ANDEQUAL        reduce using rule 238 (constant -> INT_CONST_DEC .)
    OREQUAL         reduce using rule 238 (constant -> INT_CONST_DEC .)
    CONDOP          reduce using rule 238 (constant -> INT_CONST_DEC .)
    TIMES           reduce using rule 238 (constant -> INT_CONST_DEC .)
    DIVIDE          reduce using rule 238 (constant -> INT_CONST_DEC .)
    MOD             reduce using rule 238 (constant -> INT_CONST_DEC .)
    PLUS            reduce using rule 238 (constant -> INT_CONST_DEC .)
    MINUS           reduce using rule 238 (constant -> INT_CONST_DEC .)
    RSHIFT          reduce using rule 238 (constant -> INT_CONST_DEC .)
    LSHIFT          reduce using rule 238 (constant -> INT_CONST_DEC .)
    LT              reduce using rule 238 (constant -> INT_CONST_DEC .)
    LE              reduce using rule 238 (constant -> INT_CONST_DEC .)
    GE              reduce using rule 238 (constant -> INT_CONST_DEC .)
    GT              reduce using rule 238 (constant -> INT_CONST_DEC .)
    EQ              reduce using rule 238 (constant -> INT_CONST_DEC .)
    NE              reduce using rule 238 (constant -> INT_CONST_DEC .)
    AND             reduce using rule 238 (constant -> INT_CONST_DEC .)
    OR              reduce using rule 238 (constant -> INT_CONST_DEC .)
    XOR             reduce using rule 238 (constant -> INT_CONST_DEC .)
    LAND            reduce using rule 238 (constant -> INT_CONST_DEC .)
    LOR             reduce using rule 238 (constant -> INT_CONST_DEC .)
    COMMA           reduce using rule 238 (constant -> INT_CONST_DEC .)
    RBRACE          reduce using rule 238 (constant -> INT_CONST_DEC .)
    RBRACKET        reduce using rule 238 (constant -> INT_CONST_DEC .)
    SEMI            reduce using rule 238 (constant -> INT_CONST_DEC .)
    RPAREN          reduce using rule 238 (constant -> INT_CONST_DEC .)
    COLON           reduce using rule 238 (constant -> INT_CONST_DEC .)


state 144

    (110) direct_declarator -> direct_declarator LBRACKET assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 260


state 145

    (171) assignment_expression -> conditional_expression .

    COLON           reduce using rule 171 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 171 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 171 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 171 (assignment_expression -> conditional_expression .)
    SEMI            reduce using rule 171 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 171 (assignment_expression -> conditional_expression .)


state 146

    (211) unary_expression -> unary_operator . cast_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 263

state 147

    (99) enum_specifier -> ENUM ID brace_open enumerator_list . brace_close
    (102) enumerator_list -> enumerator_list . COMMA
    (103) enumerator_list -> enumerator_list . COMMA enumerator
    (250) brace_close -> . RBRACE

    COMMA           shift and go to state 152
    RBRACE          shift and go to state 150

    brace_close                    shift and go to state 264

state 148

    (100) enum_specifier -> ENUM TYPEID brace_open enumerator_list . brace_close
    (102) enumerator_list -> enumerator_list . COMMA
    (103) enumerator_list -> enumerator_list . COMMA enumerator
    (250) brace_close -> . RBRACE

    COMMA           shift and go to state 152
    RBRACE          shift and go to state 150

    brace_close                    shift and go to state 265

state 149

    (105) enumerator -> ID EQUALS . constant_expression
    (184) constant_expression -> . conditional_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    binary_expression              shift and go to state 128
    unary_operator                 shift and go to state 146
    conditional_expression         shift and go to state 267
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    constant_expression            shift and go to state 266
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 150

    (250) brace_close -> RBRACE .

    CONST           reduce using rule 250 (brace_close -> RBRACE .)
    RESTRICT        reduce using rule 250 (brace_close -> RBRACE .)
    VOLATILE        reduce using rule 250 (brace_close -> RBRACE .)
    VOID            reduce using rule 250 (brace_close -> RBRACE .)
    _BOOL           reduce using rule 250 (brace_close -> RBRACE .)
    CHAR            reduce using rule 250 (brace_close -> RBRACE .)
    SHORT           reduce using rule 250 (brace_close -> RBRACE .)
    INT             reduce using rule 250 (brace_close -> RBRACE .)
    LONG            reduce using rule 250 (brace_close -> RBRACE .)
    FLOAT           reduce using rule 250 (brace_close -> RBRACE .)
    DOUBLE          reduce using rule 250 (brace_close -> RBRACE .)
    _COMPLEX        reduce using rule 250 (brace_close -> RBRACE .)
    SIGNED          reduce using rule 250 (brace_close -> RBRACE .)
    UNSIGNED        reduce using rule 250 (brace_close -> RBRACE .)
    AUTO            reduce using rule 250 (brace_close -> RBRACE .)
    REGISTER        reduce using rule 250 (brace_close -> RBRACE .)
    STATIC          reduce using rule 250 (brace_close -> RBRACE .)
    EXTERN          reduce using rule 250 (brace_close -> RBRACE .)
    TYPEDEF         reduce using rule 250 (brace_close -> RBRACE .)
    INLINE          reduce using rule 250 (brace_close -> RBRACE .)
    TYPEID          reduce using rule 250 (brace_close -> RBRACE .)
    ENUM            reduce using rule 250 (brace_close -> RBRACE .)
    STRUCT          reduce using rule 250 (brace_close -> RBRACE .)
    UNION           reduce using rule 250 (brace_close -> RBRACE .)
    ID              reduce using rule 250 (brace_close -> RBRACE .)
    LPAREN          reduce using rule 250 (brace_close -> RBRACE .)
    TIMES           reduce using rule 250 (brace_close -> RBRACE .)
    SEMI            reduce using rule 250 (brace_close -> RBRACE .)
    LBRACKET        reduce using rule 250 (brace_close -> RBRACE .)
    COMMA           reduce using rule 250 (brace_close -> RBRACE .)
    RPAREN          reduce using rule 250 (brace_close -> RBRACE .)
    COLON           reduce using rule 250 (brace_close -> RBRACE .)
    RBRACE          reduce using rule 250 (brace_close -> RBRACE .)
    PERIOD          reduce using rule 250 (brace_close -> RBRACE .)
    ARROW           reduce using rule 250 (brace_close -> RBRACE .)
    PLUSPLUS        reduce using rule 250 (brace_close -> RBRACE .)
    MINUSMINUS      reduce using rule 250 (brace_close -> RBRACE .)
    EQUALS          reduce using rule 250 (brace_close -> RBRACE .)
    XOREQUAL        reduce using rule 250 (brace_close -> RBRACE .)
    TIMESEQUAL      reduce using rule 250 (brace_close -> RBRACE .)
    DIVEQUAL        reduce using rule 250 (brace_close -> RBRACE .)
    MODEQUAL        reduce using rule 250 (brace_close -> RBRACE .)
    PLUSEQUAL       reduce using rule 250 (brace_close -> RBRACE .)
    MINUSEQUAL      reduce using rule 250 (brace_close -> RBRACE .)
    LSHIFTEQUAL     reduce using rule 250 (brace_close -> RBRACE .)
    RSHIFTEQUAL     reduce using rule 250 (brace_close -> RBRACE .)
    ANDEQUAL        reduce using rule 250 (brace_close -> RBRACE .)
    OREQUAL         reduce using rule 250 (brace_close -> RBRACE .)
    CONDOP          reduce using rule 250 (brace_close -> RBRACE .)
    DIVIDE          reduce using rule 250 (brace_close -> RBRACE .)
    MOD             reduce using rule 250 (brace_close -> RBRACE .)
    PLUS            reduce using rule 250 (brace_close -> RBRACE .)
    MINUS           reduce using rule 250 (brace_close -> RBRACE .)
    RSHIFT          reduce using rule 250 (brace_close -> RBRACE .)
    LSHIFT          reduce using rule 250 (brace_close -> RBRACE .)
    LT              reduce using rule 250 (brace_close -> RBRACE .)
    LE              reduce using rule 250 (brace_close -> RBRACE .)
    GE              reduce using rule 250 (brace_close -> RBRACE .)
    GT              reduce using rule 250 (brace_close -> RBRACE .)
    EQ              reduce using rule 250 (brace_close -> RBRACE .)
    NE              reduce using rule 250 (brace_close -> RBRACE .)
    AND             reduce using rule 250 (brace_close -> RBRACE .)
    OR              reduce using rule 250 (brace_close -> RBRACE .)
    XOR             reduce using rule 250 (brace_close -> RBRACE .)
    LAND            reduce using rule 250 (brace_close -> RBRACE .)
    LOR             reduce using rule 250 (brace_close -> RBRACE .)
    RBRACKET        reduce using rule 250 (brace_close -> RBRACE .)
    PPHASH          reduce using rule 250 (brace_close -> RBRACE .)
    $end            reduce using rule 250 (brace_close -> RBRACE .)
    CASE            reduce using rule 250 (brace_close -> RBRACE .)
    DEFAULT         reduce using rule 250 (brace_close -> RBRACE .)
    IF              reduce using rule 250 (brace_close -> RBRACE .)
    SWITCH          reduce using rule 250 (brace_close -> RBRACE .)
    WHILE           reduce using rule 250 (brace_close -> RBRACE .)
    DO              reduce using rule 250 (brace_close -> RBRACE .)
    FOR             reduce using rule 250 (brace_close -> RBRACE .)
    GOTO            reduce using rule 250 (brace_close -> RBRACE .)
    BREAK           reduce using rule 250 (brace_close -> RBRACE .)
    CONTINUE        reduce using rule 250 (brace_close -> RBRACE .)
    RETURN          reduce using rule 250 (brace_close -> RBRACE .)
    LBRACE          reduce using rule 250 (brace_close -> RBRACE .)
    SIZEOF          reduce using rule 250 (brace_close -> RBRACE .)
    NOT             reduce using rule 250 (brace_close -> RBRACE .)
    LNOT            reduce using rule 250 (brace_close -> RBRACE .)
    INT_CONST_DEC   reduce using rule 250 (brace_close -> RBRACE .)
    INT_CONST_OCT   reduce using rule 250 (brace_close -> RBRACE .)
    INT_CONST_HEX   reduce using rule 250 (brace_close -> RBRACE .)
    FLOAT_CONST     reduce using rule 250 (brace_close -> RBRACE .)
    HEX_FLOAT_CONST reduce using rule 250 (brace_close -> RBRACE .)
    CHAR_CONST      reduce using rule 250 (brace_close -> RBRACE .)
    WCHAR_CONST     reduce using rule 250 (brace_close -> RBRACE .)
    STRING_LITERAL  reduce using rule 250 (brace_close -> RBRACE .)
    WSTRING_LITERAL reduce using rule 250 (brace_close -> RBRACE .)
    ELSE            reduce using rule 250 (brace_close -> RBRACE .)


state 151

    (98) enum_specifier -> ENUM brace_open enumerator_list brace_close .

    CONST           reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    RESTRICT        reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    VOLATILE        reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    VOID            reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    _BOOL           reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    CHAR            reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    SHORT           reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    INT             reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    LONG            reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    FLOAT           reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    DOUBLE          reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    _COMPLEX        reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    SIGNED          reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    UNSIGNED        reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    AUTO            reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    REGISTER        reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    STATIC          reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    EXTERN          reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    TYPEDEF         reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    INLINE          reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    TYPEID          reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    ENUM            reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    STRUCT          reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    UNION           reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    ID              reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    LPAREN          reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    TIMES           reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    LBRACKET        reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    COMMA           reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    RPAREN          reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    COLON           reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    SEMI            reduce using rule 98 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)


state 152

    (102) enumerator_list -> enumerator_list COMMA .
    (103) enumerator_list -> enumerator_list COMMA . enumerator
    (104) enumerator -> . ID
    (105) enumerator -> . ID EQUALS constant_expression

    COMMA           reduce using rule 102 (enumerator_list -> enumerator_list COMMA .)
    RBRACE          reduce using rule 102 (enumerator_list -> enumerator_list COMMA .)
    ID              shift and go to state 86

    enumerator                     shift and go to state 268

state 153

    (148) block_item -> statement .

    ID              reduce using rule 148 (block_item -> statement .)
    CASE            reduce using rule 148 (block_item -> statement .)
    DEFAULT         reduce using rule 148 (block_item -> statement .)
    IF              reduce using rule 148 (block_item -> statement .)
    SWITCH          reduce using rule 148 (block_item -> statement .)
    WHILE           reduce using rule 148 (block_item -> statement .)
    DO              reduce using rule 148 (block_item -> statement .)
    FOR             reduce using rule 148 (block_item -> statement .)
    GOTO            reduce using rule 148 (block_item -> statement .)
    BREAK           reduce using rule 148 (block_item -> statement .)
    CONTINUE        reduce using rule 148 (block_item -> statement .)
    RETURN          reduce using rule 148 (block_item -> statement .)
    LBRACE          reduce using rule 148 (block_item -> statement .)
    CONST           reduce using rule 148 (block_item -> statement .)
    RESTRICT        reduce using rule 148 (block_item -> statement .)
    VOLATILE        reduce using rule 148 (block_item -> statement .)
    VOID            reduce using rule 148 (block_item -> statement .)
    _BOOL           reduce using rule 148 (block_item -> statement .)
    CHAR            reduce using rule 148 (block_item -> statement .)
    SHORT           reduce using rule 148 (block_item -> statement .)
    INT             reduce using rule 148 (block_item -> statement .)
    LONG            reduce using rule 148 (block_item -> statement .)
    FLOAT           reduce using rule 148 (block_item -> statement .)
    DOUBLE          reduce using rule 148 (block_item -> statement .)
    _COMPLEX        reduce using rule 148 (block_item -> statement .)
    SIGNED          reduce using rule 148 (block_item -> statement .)
    UNSIGNED        reduce using rule 148 (block_item -> statement .)
    AUTO            reduce using rule 148 (block_item -> statement .)
    REGISTER        reduce using rule 148 (block_item -> statement .)
    STATIC          reduce using rule 148 (block_item -> statement .)
    EXTERN          reduce using rule 148 (block_item -> statement .)
    TYPEDEF         reduce using rule 148 (block_item -> statement .)
    INLINE          reduce using rule 148 (block_item -> statement .)
    TYPEID          reduce using rule 148 (block_item -> statement .)
    ENUM            reduce using rule 148 (block_item -> statement .)
    STRUCT          reduce using rule 148 (block_item -> statement .)
    UNION           reduce using rule 148 (block_item -> statement .)
    PLUSPLUS        reduce using rule 148 (block_item -> statement .)
    MINUSMINUS      reduce using rule 148 (block_item -> statement .)
    SIZEOF          reduce using rule 148 (block_item -> statement .)
    LPAREN          reduce using rule 148 (block_item -> statement .)
    AND             reduce using rule 148 (block_item -> statement .)
    TIMES           reduce using rule 148 (block_item -> statement .)
    PLUS            reduce using rule 148 (block_item -> statement .)
    MINUS           reduce using rule 148 (block_item -> statement .)
    NOT             reduce using rule 148 (block_item -> statement .)
    LNOT            reduce using rule 148 (block_item -> statement .)
    INT_CONST_DEC   reduce using rule 148 (block_item -> statement .)
    INT_CONST_OCT   reduce using rule 148 (block_item -> statement .)
    INT_CONST_HEX   reduce using rule 148 (block_item -> statement .)
    FLOAT_CONST     reduce using rule 148 (block_item -> statement .)
    HEX_FLOAT_CONST reduce using rule 148 (block_item -> statement .)
    CHAR_CONST      reduce using rule 148 (block_item -> statement .)
    WCHAR_CONST     reduce using rule 148 (block_item -> statement .)
    STRING_LITERAL  reduce using rule 148 (block_item -> statement .)
    WSTRING_LITERAL reduce using rule 148 (block_item -> statement .)
    SEMI            reduce using rule 148 (block_item -> statement .)
    RBRACE          reduce using rule 148 (block_item -> statement .)


state 154

    (159) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMI
    (38) statement -> . labeled_statement
    (39) statement -> . expression_statement
    (40) statement -> . compound_statement
    (41) statement -> . selection_statement
    (42) statement -> . iteration_statement
    (43) statement -> . jump_statement
    (152) labeled_statement -> . ID COLON statement
    (153) labeled_statement -> . CASE constant_expression COLON statement
    (154) labeled_statement -> . DEFAULT COLON statement
    (167) expression_statement -> . expression_opt SEMI
    (151) compound_statement -> . brace_open block_item_list_opt brace_close
    (155) selection_statement -> . IF LPAREN expression RPAREN statement
    (156) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (157) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (158) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (159) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (160) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (161) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (162) jump_statement -> . GOTO ID SEMI
    (163) jump_statement -> . BREAK SEMI
    (164) jump_statement -> . CONTINUE SEMI
    (165) jump_statement -> . RETURN expression SEMI
    (166) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (249) brace_open -> . LBRACE
    (251) empty -> .
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 160
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 165
    IF              shift and go to state 161
    SWITCH          shift and go to state 155
    WHILE           shift and go to state 180
    DO              shift and go to state 154
    FOR             shift and go to state 164
    GOTO            shift and go to state 167
    BREAK           shift and go to state 177
    CONTINUE        shift and go to state 158
    RETURN          shift and go to state 179
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 251 (empty -> .)
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    expression_opt                 shift and go to state 173
    compound_statement             shift and go to state 163
    brace_open                     shift and go to state 91
    jump_statement                 shift and go to state 174
    postfix_expression             shift and go to state 136
    expression                     shift and go to state 175
    conditional_expression         shift and go to state 145
    statement                      shift and go to state 269
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    cast_expression                shift and go to state 142
    labeled_statement              shift and go to state 169
    unified_string_literal         shift and go to state 125
    iteration_statement            shift and go to state 156
    unary_operator                 shift and go to state 146
    selection_statement            shift and go to state 157
    empty                          shift and go to state 270
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    expression_statement           shift and go to state 178
    assignment_expression          shift and go to state 159

state 155

    (157) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 271


state 156

    (42) statement -> iteration_statement .

    ID              reduce using rule 42 (statement -> iteration_statement .)
    CASE            reduce using rule 42 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 42 (statement -> iteration_statement .)
    IF              reduce using rule 42 (statement -> iteration_statement .)
    SWITCH          reduce using rule 42 (statement -> iteration_statement .)
    WHILE           reduce using rule 42 (statement -> iteration_statement .)
    DO              reduce using rule 42 (statement -> iteration_statement .)
    FOR             reduce using rule 42 (statement -> iteration_statement .)
    GOTO            reduce using rule 42 (statement -> iteration_statement .)
    BREAK           reduce using rule 42 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 42 (statement -> iteration_statement .)
    RETURN          reduce using rule 42 (statement -> iteration_statement .)
    LBRACE          reduce using rule 42 (statement -> iteration_statement .)
    CONST           reduce using rule 42 (statement -> iteration_statement .)
    RESTRICT        reduce using rule 42 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 42 (statement -> iteration_statement .)
    VOID            reduce using rule 42 (statement -> iteration_statement .)
    _BOOL           reduce using rule 42 (statement -> iteration_statement .)
    CHAR            reduce using rule 42 (statement -> iteration_statement .)
    SHORT           reduce using rule 42 (statement -> iteration_statement .)
    INT             reduce using rule 42 (statement -> iteration_statement .)
    LONG            reduce using rule 42 (statement -> iteration_statement .)
    FLOAT           reduce using rule 42 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 42 (statement -> iteration_statement .)
    _COMPLEX        reduce using rule 42 (statement -> iteration_statement .)
    SIGNED          reduce using rule 42 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 42 (statement -> iteration_statement .)
    AUTO            reduce using rule 42 (statement -> iteration_statement .)
    REGISTER        reduce using rule 42 (statement -> iteration_statement .)
    STATIC          reduce using rule 42 (statement -> iteration_statement .)
    EXTERN          reduce using rule 42 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 42 (statement -> iteration_statement .)
    INLINE          reduce using rule 42 (statement -> iteration_statement .)
    TYPEID          reduce using rule 42 (statement -> iteration_statement .)
    ENUM            reduce using rule 42 (statement -> iteration_statement .)
    STRUCT          reduce using rule 42 (statement -> iteration_statement .)
    UNION           reduce using rule 42 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 42 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 42 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 42 (statement -> iteration_statement .)
    LPAREN          reduce using rule 42 (statement -> iteration_statement .)
    AND             reduce using rule 42 (statement -> iteration_statement .)
    TIMES           reduce using rule 42 (statement -> iteration_statement .)
    PLUS            reduce using rule 42 (statement -> iteration_statement .)
    MINUS           reduce using rule 42 (statement -> iteration_statement .)
    NOT             reduce using rule 42 (statement -> iteration_statement .)
    LNOT            reduce using rule 42 (statement -> iteration_statement .)
    INT_CONST_DEC   reduce using rule 42 (statement -> iteration_statement .)
    INT_CONST_OCT   reduce using rule 42 (statement -> iteration_statement .)
    INT_CONST_HEX   reduce using rule 42 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 42 (statement -> iteration_statement .)
    HEX_FLOAT_CONST reduce using rule 42 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 42 (statement -> iteration_statement .)
    WCHAR_CONST     reduce using rule 42 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 42 (statement -> iteration_statement .)
    WSTRING_LITERAL reduce using rule 42 (statement -> iteration_statement .)
    SEMI            reduce using rule 42 (statement -> iteration_statement .)
    RBRACE          reduce using rule 42 (statement -> iteration_statement .)
    ELSE            reduce using rule 42 (statement -> iteration_statement .)


state 157

    (41) statement -> selection_statement .

    ID              reduce using rule 41 (statement -> selection_statement .)
    CASE            reduce using rule 41 (statement -> selection_statement .)
    DEFAULT         reduce using rule 41 (statement -> selection_statement .)
    IF              reduce using rule 41 (statement -> selection_statement .)
    SWITCH          reduce using rule 41 (statement -> selection_statement .)
    WHILE           reduce using rule 41 (statement -> selection_statement .)
    DO              reduce using rule 41 (statement -> selection_statement .)
    FOR             reduce using rule 41 (statement -> selection_statement .)
    GOTO            reduce using rule 41 (statement -> selection_statement .)
    BREAK           reduce using rule 41 (statement -> selection_statement .)
    CONTINUE        reduce using rule 41 (statement -> selection_statement .)
    RETURN          reduce using rule 41 (statement -> selection_statement .)
    LBRACE          reduce using rule 41 (statement -> selection_statement .)
    CONST           reduce using rule 41 (statement -> selection_statement .)
    RESTRICT        reduce using rule 41 (statement -> selection_statement .)
    VOLATILE        reduce using rule 41 (statement -> selection_statement .)
    VOID            reduce using rule 41 (statement -> selection_statement .)
    _BOOL           reduce using rule 41 (statement -> selection_statement .)
    CHAR            reduce using rule 41 (statement -> selection_statement .)
    SHORT           reduce using rule 41 (statement -> selection_statement .)
    INT             reduce using rule 41 (statement -> selection_statement .)
    LONG            reduce using rule 41 (statement -> selection_statement .)
    FLOAT           reduce using rule 41 (statement -> selection_statement .)
    DOUBLE          reduce using rule 41 (statement -> selection_statement .)
    _COMPLEX        reduce using rule 41 (statement -> selection_statement .)
    SIGNED          reduce using rule 41 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 41 (statement -> selection_statement .)
    AUTO            reduce using rule 41 (statement -> selection_statement .)
    REGISTER        reduce using rule 41 (statement -> selection_statement .)
    STATIC          reduce using rule 41 (statement -> selection_statement .)
    EXTERN          reduce using rule 41 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 41 (statement -> selection_statement .)
    INLINE          reduce using rule 41 (statement -> selection_statement .)
    TYPEID          reduce using rule 41 (statement -> selection_statement .)
    ENUM            reduce using rule 41 (statement -> selection_statement .)
    STRUCT          reduce using rule 41 (statement -> selection_statement .)
    UNION           reduce using rule 41 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 41 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 41 (statement -> selection_statement .)
    SIZEOF          reduce using rule 41 (statement -> selection_statement .)
    LPAREN          reduce using rule 41 (statement -> selection_statement .)
    AND             reduce using rule 41 (statement -> selection_statement .)
    TIMES           reduce using rule 41 (statement -> selection_statement .)
    PLUS            reduce using rule 41 (statement -> selection_statement .)
    MINUS           reduce using rule 41 (statement -> selection_statement .)
    NOT             reduce using rule 41 (statement -> selection_statement .)
    LNOT            reduce using rule 41 (statement -> selection_statement .)
    INT_CONST_DEC   reduce using rule 41 (statement -> selection_statement .)
    INT_CONST_OCT   reduce using rule 41 (statement -> selection_statement .)
    INT_CONST_HEX   reduce using rule 41 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 41 (statement -> selection_statement .)
    HEX_FLOAT_CONST reduce using rule 41 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 41 (statement -> selection_statement .)
    WCHAR_CONST     reduce using rule 41 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 41 (statement -> selection_statement .)
    WSTRING_LITERAL reduce using rule 41 (statement -> selection_statement .)
    SEMI            reduce using rule 41 (statement -> selection_statement .)
    RBRACE          reduce using rule 41 (statement -> selection_statement .)
    ELSE            reduce using rule 41 (statement -> selection_statement .)


state 158

    (164) jump_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 272


state 159

    (168) expression -> assignment_expression .

    COMMA           reduce using rule 168 (expression -> assignment_expression .)
    SEMI            reduce using rule 168 (expression -> assignment_expression .)
    RPAREN          reduce using rule 168 (expression -> assignment_expression .)
    COLON           reduce using rule 168 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 168 (expression -> assignment_expression .)


state 160

    (152) labeled_statement -> ID . COLON statement
    (237) identifier -> ID .

    COLON           shift and go to state 273
    LBRACKET        reduce using rule 237 (identifier -> ID .)
    LPAREN          reduce using rule 237 (identifier -> ID .)
    PERIOD          reduce using rule 237 (identifier -> ID .)
    ARROW           reduce using rule 237 (identifier -> ID .)
    PLUSPLUS        reduce using rule 237 (identifier -> ID .)
    MINUSMINUS      reduce using rule 237 (identifier -> ID .)
    EQUALS          reduce using rule 237 (identifier -> ID .)
    XOREQUAL        reduce using rule 237 (identifier -> ID .)
    TIMESEQUAL      reduce using rule 237 (identifier -> ID .)
    DIVEQUAL        reduce using rule 237 (identifier -> ID .)
    MODEQUAL        reduce using rule 237 (identifier -> ID .)
    PLUSEQUAL       reduce using rule 237 (identifier -> ID .)
    MINUSEQUAL      reduce using rule 237 (identifier -> ID .)
    LSHIFTEQUAL     reduce using rule 237 (identifier -> ID .)
    RSHIFTEQUAL     reduce using rule 237 (identifier -> ID .)
    ANDEQUAL        reduce using rule 237 (identifier -> ID .)
    OREQUAL         reduce using rule 237 (identifier -> ID .)
    CONDOP          reduce using rule 237 (identifier -> ID .)
    TIMES           reduce using rule 237 (identifier -> ID .)
    DIVIDE          reduce using rule 237 (identifier -> ID .)
    MOD             reduce using rule 237 (identifier -> ID .)
    PLUS            reduce using rule 237 (identifier -> ID .)
    MINUS           reduce using rule 237 (identifier -> ID .)
    RSHIFT          reduce using rule 237 (identifier -> ID .)
    LSHIFT          reduce using rule 237 (identifier -> ID .)
    LT              reduce using rule 237 (identifier -> ID .)
    LE              reduce using rule 237 (identifier -> ID .)
    GE              reduce using rule 237 (identifier -> ID .)
    GT              reduce using rule 237 (identifier -> ID .)
    EQ              reduce using rule 237 (identifier -> ID .)
    NE              reduce using rule 237 (identifier -> ID .)
    AND             reduce using rule 237 (identifier -> ID .)
    OR              reduce using rule 237 (identifier -> ID .)
    XOR             reduce using rule 237 (identifier -> ID .)
    LAND            reduce using rule 237 (identifier -> ID .)
    LOR             reduce using rule 237 (identifier -> ID .)
    COMMA           reduce using rule 237 (identifier -> ID .)
    SEMI            reduce using rule 237 (identifier -> ID .)


state 161

    (155) selection_statement -> IF . LPAREN expression RPAREN statement
    (156) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 274


state 162

    (149) block_item_list -> block_item .

    ID              reduce using rule 149 (block_item_list -> block_item .)
    CASE            reduce using rule 149 (block_item_list -> block_item .)
    DEFAULT         reduce using rule 149 (block_item_list -> block_item .)
    IF              reduce using rule 149 (block_item_list -> block_item .)
    SWITCH          reduce using rule 149 (block_item_list -> block_item .)
    WHILE           reduce using rule 149 (block_item_list -> block_item .)
    DO              reduce using rule 149 (block_item_list -> block_item .)
    FOR             reduce using rule 149 (block_item_list -> block_item .)
    GOTO            reduce using rule 149 (block_item_list -> block_item .)
    BREAK           reduce using rule 149 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 149 (block_item_list -> block_item .)
    RETURN          reduce using rule 149 (block_item_list -> block_item .)
    LBRACE          reduce using rule 149 (block_item_list -> block_item .)
    CONST           reduce using rule 149 (block_item_list -> block_item .)
    RESTRICT        reduce using rule 149 (block_item_list -> block_item .)
    VOLATILE        reduce using rule 149 (block_item_list -> block_item .)
    VOID            reduce using rule 149 (block_item_list -> block_item .)
    _BOOL           reduce using rule 149 (block_item_list -> block_item .)
    CHAR            reduce using rule 149 (block_item_list -> block_item .)
    SHORT           reduce using rule 149 (block_item_list -> block_item .)
    INT             reduce using rule 149 (block_item_list -> block_item .)
    LONG            reduce using rule 149 (block_item_list -> block_item .)
    FLOAT           reduce using rule 149 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 149 (block_item_list -> block_item .)
    _COMPLEX        reduce using rule 149 (block_item_list -> block_item .)
    SIGNED          reduce using rule 149 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 149 (block_item_list -> block_item .)
    AUTO            reduce using rule 149 (block_item_list -> block_item .)
    REGISTER        reduce using rule 149 (block_item_list -> block_item .)
    STATIC          reduce using rule 149 (block_item_list -> block_item .)
    EXTERN          reduce using rule 149 (block_item_list -> block_item .)
    TYPEDEF         reduce using rule 149 (block_item_list -> block_item .)
    INLINE          reduce using rule 149 (block_item_list -> block_item .)
    TYPEID          reduce using rule 149 (block_item_list -> block_item .)
    ENUM            reduce using rule 149 (block_item_list -> block_item .)
    STRUCT          reduce using rule 149 (block_item_list -> block_item .)
    UNION           reduce using rule 149 (block_item_list -> block_item .)
    PLUSPLUS        reduce using rule 149 (block_item_list -> block_item .)
    MINUSMINUS      reduce using rule 149 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 149 (block_item_list -> block_item .)
    LPAREN          reduce using rule 149 (block_item_list -> block_item .)
    AND             reduce using rule 149 (block_item_list -> block_item .)
    TIMES           reduce using rule 149 (block_item_list -> block_item .)
    PLUS            reduce using rule 149 (block_item_list -> block_item .)
    MINUS           reduce using rule 149 (block_item_list -> block_item .)
    NOT             reduce using rule 149 (block_item_list -> block_item .)
    LNOT            reduce using rule 149 (block_item_list -> block_item .)
    INT_CONST_DEC   reduce using rule 149 (block_item_list -> block_item .)
    INT_CONST_OCT   reduce using rule 149 (block_item_list -> block_item .)
    INT_CONST_HEX   reduce using rule 149 (block_item_list -> block_item .)
    FLOAT_CONST     reduce using rule 149 (block_item_list -> block_item .)
    HEX_FLOAT_CONST reduce using rule 149 (block_item_list -> block_item .)
    CHAR_CONST      reduce using rule 149 (block_item_list -> block_item .)
    WCHAR_CONST     reduce using rule 149 (block_item_list -> block_item .)
    STRING_LITERAL  reduce using rule 149 (block_item_list -> block_item .)
    WSTRING_LITERAL reduce using rule 149 (block_item_list -> block_item .)
    SEMI            reduce using rule 149 (block_item_list -> block_item .)
    RBRACE          reduce using rule 149 (block_item_list -> block_item .)


state 163

    (40) statement -> compound_statement .

    ID              reduce using rule 40 (statement -> compound_statement .)
    CASE            reduce using rule 40 (statement -> compound_statement .)
    DEFAULT         reduce using rule 40 (statement -> compound_statement .)
    IF              reduce using rule 40 (statement -> compound_statement .)
    SWITCH          reduce using rule 40 (statement -> compound_statement .)
    WHILE           reduce using rule 40 (statement -> compound_statement .)
    DO              reduce using rule 40 (statement -> compound_statement .)
    FOR             reduce using rule 40 (statement -> compound_statement .)
    GOTO            reduce using rule 40 (statement -> compound_statement .)
    BREAK           reduce using rule 40 (statement -> compound_statement .)
    CONTINUE        reduce using rule 40 (statement -> compound_statement .)
    RETURN          reduce using rule 40 (statement -> compound_statement .)
    LBRACE          reduce using rule 40 (statement -> compound_statement .)
    CONST           reduce using rule 40 (statement -> compound_statement .)
    RESTRICT        reduce using rule 40 (statement -> compound_statement .)
    VOLATILE        reduce using rule 40 (statement -> compound_statement .)
    VOID            reduce using rule 40 (statement -> compound_statement .)
    _BOOL           reduce using rule 40 (statement -> compound_statement .)
    CHAR            reduce using rule 40 (statement -> compound_statement .)
    SHORT           reduce using rule 40 (statement -> compound_statement .)
    INT             reduce using rule 40 (statement -> compound_statement .)
    LONG            reduce using rule 40 (statement -> compound_statement .)
    FLOAT           reduce using rule 40 (statement -> compound_statement .)
    DOUBLE          reduce using rule 40 (statement -> compound_statement .)
    _COMPLEX        reduce using rule 40 (statement -> compound_statement .)
    SIGNED          reduce using rule 40 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 40 (statement -> compound_statement .)
    AUTO            reduce using rule 40 (statement -> compound_statement .)
    REGISTER        reduce using rule 40 (statement -> compound_statement .)
    STATIC          reduce using rule 40 (statement -> compound_statement .)
    EXTERN          reduce using rule 40 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 40 (statement -> compound_statement .)
    INLINE          reduce using rule 40 (statement -> compound_statement .)
    TYPEID          reduce using rule 40 (statement -> compound_statement .)
    ENUM            reduce using rule 40 (statement -> compound_statement .)
    STRUCT          reduce using rule 40 (statement -> compound_statement .)
    UNION           reduce using rule 40 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 40 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 40 (statement -> compound_statement .)
    SIZEOF          reduce using rule 40 (statement -> compound_statement .)
    LPAREN          reduce using rule 40 (statement -> compound_statement .)
    AND             reduce using rule 40 (statement -> compound_statement .)
    TIMES           reduce using rule 40 (statement -> compound_statement .)
    PLUS            reduce using rule 40 (statement -> compound_statement .)
    MINUS           reduce using rule 40 (statement -> compound_statement .)
    NOT             reduce using rule 40 (statement -> compound_statement .)
    LNOT            reduce using rule 40 (statement -> compound_statement .)
    INT_CONST_DEC   reduce using rule 40 (statement -> compound_statement .)
    INT_CONST_OCT   reduce using rule 40 (statement -> compound_statement .)
    INT_CONST_HEX   reduce using rule 40 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 40 (statement -> compound_statement .)
    HEX_FLOAT_CONST reduce using rule 40 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 40 (statement -> compound_statement .)
    WCHAR_CONST     reduce using rule 40 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 40 (statement -> compound_statement .)
    WSTRING_LITERAL reduce using rule 40 (statement -> compound_statement .)
    SEMI            reduce using rule 40 (statement -> compound_statement .)
    RBRACE          reduce using rule 40 (statement -> compound_statement .)
    ELSE            reduce using rule 40 (statement -> compound_statement .)


state 164

    (160) iteration_statement -> FOR . LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (161) iteration_statement -> FOR . LPAREN declaration expression_opt SEMI expression_opt RPAREN statement

    LPAREN          shift and go to state 275


state 165

    (154) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 276


state 166

    (215) unary_operator -> TIMES .

    LPAREN          reduce using rule 215 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 215 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 215 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 215 (unary_operator -> TIMES .)
    AND             reduce using rule 215 (unary_operator -> TIMES .)
    TIMES           reduce using rule 215 (unary_operator -> TIMES .)
    PLUS            reduce using rule 215 (unary_operator -> TIMES .)
    MINUS           reduce using rule 215 (unary_operator -> TIMES .)
    NOT             reduce using rule 215 (unary_operator -> TIMES .)
    LNOT            reduce using rule 215 (unary_operator -> TIMES .)
    ID              reduce using rule 215 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 215 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 215 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 215 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 215 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 215 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 215 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 215 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 215 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 215 (unary_operator -> TIMES .)


state 167

    (162) jump_statement -> GOTO . ID SEMI

    ID              shift and go to state 277


state 168

    (153) labeled_statement -> CASE . constant_expression COLON statement
    (184) constant_expression -> . conditional_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    binary_expression              shift and go to state 128
    unary_operator                 shift and go to state 146
    conditional_expression         shift and go to state 267
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    constant_expression            shift and go to state 278
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 169

    (38) statement -> labeled_statement .

    ID              reduce using rule 38 (statement -> labeled_statement .)
    CASE            reduce using rule 38 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 38 (statement -> labeled_statement .)
    IF              reduce using rule 38 (statement -> labeled_statement .)
    SWITCH          reduce using rule 38 (statement -> labeled_statement .)
    WHILE           reduce using rule 38 (statement -> labeled_statement .)
    DO              reduce using rule 38 (statement -> labeled_statement .)
    FOR             reduce using rule 38 (statement -> labeled_statement .)
    GOTO            reduce using rule 38 (statement -> labeled_statement .)
    BREAK           reduce using rule 38 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 38 (statement -> labeled_statement .)
    RETURN          reduce using rule 38 (statement -> labeled_statement .)
    LBRACE          reduce using rule 38 (statement -> labeled_statement .)
    CONST           reduce using rule 38 (statement -> labeled_statement .)
    RESTRICT        reduce using rule 38 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 38 (statement -> labeled_statement .)
    VOID            reduce using rule 38 (statement -> labeled_statement .)
    _BOOL           reduce using rule 38 (statement -> labeled_statement .)
    CHAR            reduce using rule 38 (statement -> labeled_statement .)
    SHORT           reduce using rule 38 (statement -> labeled_statement .)
    INT             reduce using rule 38 (statement -> labeled_statement .)
    LONG            reduce using rule 38 (statement -> labeled_statement .)
    FLOAT           reduce using rule 38 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 38 (statement -> labeled_statement .)
    _COMPLEX        reduce using rule 38 (statement -> labeled_statement .)
    SIGNED          reduce using rule 38 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 38 (statement -> labeled_statement .)
    AUTO            reduce using rule 38 (statement -> labeled_statement .)
    REGISTER        reduce using rule 38 (statement -> labeled_statement .)
    STATIC          reduce using rule 38 (statement -> labeled_statement .)
    EXTERN          reduce using rule 38 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 38 (statement -> labeled_statement .)
    INLINE          reduce using rule 38 (statement -> labeled_statement .)
    TYPEID          reduce using rule 38 (statement -> labeled_statement .)
    ENUM            reduce using rule 38 (statement -> labeled_statement .)
    STRUCT          reduce using rule 38 (statement -> labeled_statement .)
    UNION           reduce using rule 38 (statement -> labeled_statement .)
    PLUSPLUS        reduce using rule 38 (statement -> labeled_statement .)
    MINUSMINUS      reduce using rule 38 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 38 (statement -> labeled_statement .)
    LPAREN          reduce using rule 38 (statement -> labeled_statement .)
    AND             reduce using rule 38 (statement -> labeled_statement .)
    TIMES           reduce using rule 38 (statement -> labeled_statement .)
    PLUS            reduce using rule 38 (statement -> labeled_statement .)
    MINUS           reduce using rule 38 (statement -> labeled_statement .)
    NOT             reduce using rule 38 (statement -> labeled_statement .)
    LNOT            reduce using rule 38 (statement -> labeled_statement .)
    INT_CONST_DEC   reduce using rule 38 (statement -> labeled_statement .)
    INT_CONST_OCT   reduce using rule 38 (statement -> labeled_statement .)
    INT_CONST_HEX   reduce using rule 38 (statement -> labeled_statement .)
    FLOAT_CONST     reduce using rule 38 (statement -> labeled_statement .)
    HEX_FLOAT_CONST reduce using rule 38 (statement -> labeled_statement .)
    CHAR_CONST      reduce using rule 38 (statement -> labeled_statement .)
    WCHAR_CONST     reduce using rule 38 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 38 (statement -> labeled_statement .)
    WSTRING_LITERAL reduce using rule 38 (statement -> labeled_statement .)
    SEMI            reduce using rule 38 (statement -> labeled_statement .)
    RBRACE          reduce using rule 38 (statement -> labeled_statement .)
    ELSE            reduce using rule 38 (statement -> labeled_statement .)


state 170

    (147) block_item -> declaration .

    ID              reduce using rule 147 (block_item -> declaration .)
    CASE            reduce using rule 147 (block_item -> declaration .)
    DEFAULT         reduce using rule 147 (block_item -> declaration .)
    IF              reduce using rule 147 (block_item -> declaration .)
    SWITCH          reduce using rule 147 (block_item -> declaration .)
    WHILE           reduce using rule 147 (block_item -> declaration .)
    DO              reduce using rule 147 (block_item -> declaration .)
    FOR             reduce using rule 147 (block_item -> declaration .)
    GOTO            reduce using rule 147 (block_item -> declaration .)
    BREAK           reduce using rule 147 (block_item -> declaration .)
    CONTINUE        reduce using rule 147 (block_item -> declaration .)
    RETURN          reduce using rule 147 (block_item -> declaration .)
    LBRACE          reduce using rule 147 (block_item -> declaration .)
    CONST           reduce using rule 147 (block_item -> declaration .)
    RESTRICT        reduce using rule 147 (block_item -> declaration .)
    VOLATILE        reduce using rule 147 (block_item -> declaration .)
    VOID            reduce using rule 147 (block_item -> declaration .)
    _BOOL           reduce using rule 147 (block_item -> declaration .)
    CHAR            reduce using rule 147 (block_item -> declaration .)
    SHORT           reduce using rule 147 (block_item -> declaration .)
    INT             reduce using rule 147 (block_item -> declaration .)
    LONG            reduce using rule 147 (block_item -> declaration .)
    FLOAT           reduce using rule 147 (block_item -> declaration .)
    DOUBLE          reduce using rule 147 (block_item -> declaration .)
    _COMPLEX        reduce using rule 147 (block_item -> declaration .)
    SIGNED          reduce using rule 147 (block_item -> declaration .)
    UNSIGNED        reduce using rule 147 (block_item -> declaration .)
    AUTO            reduce using rule 147 (block_item -> declaration .)
    REGISTER        reduce using rule 147 (block_item -> declaration .)
    STATIC          reduce using rule 147 (block_item -> declaration .)
    EXTERN          reduce using rule 147 (block_item -> declaration .)
    TYPEDEF         reduce using rule 147 (block_item -> declaration .)
    INLINE          reduce using rule 147 (block_item -> declaration .)
    TYPEID          reduce using rule 147 (block_item -> declaration .)
    ENUM            reduce using rule 147 (block_item -> declaration .)
    STRUCT          reduce using rule 147 (block_item -> declaration .)
    UNION           reduce using rule 147 (block_item -> declaration .)
    PLUSPLUS        reduce using rule 147 (block_item -> declaration .)
    MINUSMINUS      reduce using rule 147 (block_item -> declaration .)
    SIZEOF          reduce using rule 147 (block_item -> declaration .)
    LPAREN          reduce using rule 147 (block_item -> declaration .)
    AND             reduce using rule 147 (block_item -> declaration .)
    TIMES           reduce using rule 147 (block_item -> declaration .)
    PLUS            reduce using rule 147 (block_item -> declaration .)
    MINUS           reduce using rule 147 (block_item -> declaration .)
    NOT             reduce using rule 147 (block_item -> declaration .)
    LNOT            reduce using rule 147 (block_item -> declaration .)
    INT_CONST_DEC   reduce using rule 147 (block_item -> declaration .)
    INT_CONST_OCT   reduce using rule 147 (block_item -> declaration .)
    INT_CONST_HEX   reduce using rule 147 (block_item -> declaration .)
    FLOAT_CONST     reduce using rule 147 (block_item -> declaration .)
    HEX_FLOAT_CONST reduce using rule 147 (block_item -> declaration .)
    CHAR_CONST      reduce using rule 147 (block_item -> declaration .)
    WCHAR_CONST     reduce using rule 147 (block_item -> declaration .)
    STRING_LITERAL  reduce using rule 147 (block_item -> declaration .)
    WSTRING_LITERAL reduce using rule 147 (block_item -> declaration .)
    SEMI            reduce using rule 147 (block_item -> declaration .)
    RBRACE          reduce using rule 147 (block_item -> declaration .)


state 171

    (5) block_item_list_opt -> empty .
    (13) expression_opt -> empty .

    RBRACE          reduce using rule 5 (block_item_list_opt -> empty .)
    SEMI            reduce using rule 13 (expression_opt -> empty .)


state 172

    (6) block_item_list_opt -> block_item_list .
    (150) block_item_list -> block_item_list . block_item
    (147) block_item -> . declaration
    (148) block_item -> . statement
    (45) declaration -> . decl_body SEMI
    (38) statement -> . labeled_statement
    (39) statement -> . expression_statement
    (40) statement -> . compound_statement
    (41) statement -> . selection_statement
    (42) statement -> . iteration_statement
    (43) statement -> . jump_statement
    (44) decl_body -> . declaration_specifiers init_declarator_list_opt
    (152) labeled_statement -> . ID COLON statement
    (153) labeled_statement -> . CASE constant_expression COLON statement
    (154) labeled_statement -> . DEFAULT COLON statement
    (167) expression_statement -> . expression_opt SEMI
    (151) compound_statement -> . brace_open block_item_list_opt brace_close
    (155) selection_statement -> . IF LPAREN expression RPAREN statement
    (156) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (157) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (158) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (159) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (160) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (161) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (162) jump_statement -> . GOTO ID SEMI
    (163) jump_statement -> . BREAK SEMI
    (164) jump_statement -> . CONTINUE SEMI
    (165) jump_statement -> . RETURN expression SEMI
    (166) jump_statement -> . RETURN SEMI
    (48) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (49) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (50) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (51) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (249) brace_open -> . LBRACE
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (52) storage_class_specifier -> . AUTO
    (53) storage_class_specifier -> . REGISTER
    (54) storage_class_specifier -> . STATIC
    (55) storage_class_specifier -> . EXTERN
    (56) storage_class_specifier -> . TYPEDEF
    (57) function_specifier -> . INLINE
    (251) empty -> .
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RBRACE          reduce using rule 6 (block_item_list_opt -> block_item_list .)
    ID              shift and go to state 160
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 165
    IF              shift and go to state 161
    SWITCH          shift and go to state 155
    WHILE           shift and go to state 180
    DO              shift and go to state 154
    FOR             shift and go to state 164
    GOTO            shift and go to state 167
    BREAK           shift and go to state 177
    CONTINUE        shift and go to state 158
    RETURN          shift and go to state 179
    LBRACE          shift and go to state 54
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    AUTO            shift and go to state 35
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 4
    EXTERN          shift and go to state 34
    TYPEDEF         shift and go to state 42
    INLINE          shift and go to state 16
    SEMI            reduce using rule 251 (empty -> .)
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    primary_expression             shift and go to state 115
    compound_statement             shift and go to state 163
    storage_class_specifier        shift and go to state 7
    statement                      shift and go to state 153
    identifier                     shift and go to state 120
    unified_wstring_literal        shift and go to state 121
    type_specifier                 shift and go to state 14
    labeled_statement              shift and go to state 169
    declaration                    shift and go to state 170
    unified_string_literal         shift and go to state 125
    function_specifier             shift and go to state 20
    iteration_statement            shift and go to state 156
    empty                          shift and go to state 270
    binary_expression              shift and go to state 128
    selection_statement            shift and go to state 157
    assignment_expression          shift and go to state 159
    block_item                     shift and go to state 279
    constant                       shift and go to state 124
    expression_opt                 shift and go to state 173
    brace_open                     shift and go to state 91
    jump_statement                 shift and go to state 174
    postfix_expression             shift and go to state 136
    expression                     shift and go to state 175
    conditional_expression         shift and go to state 145
    struct_or_union_specifier      shift and go to state 31
    struct_or_union                shift and go to state 29
    unary_expression               shift and go to state 140
    decl_body                      shift and go to state 38
    type_qualifier                 shift and go to state 39
    cast_expression                shift and go to state 142
    unary_operator                 shift and go to state 146
    expression_statement           shift and go to state 178
    declaration_specifiers         shift and go to state 68
    typedef_name                   shift and go to state 48
    enum_specifier                 shift and go to state 8

state 173

    (167) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 280


state 174

    (43) statement -> jump_statement .

    ID              reduce using rule 43 (statement -> jump_statement .)
    CASE            reduce using rule 43 (statement -> jump_statement .)
    DEFAULT         reduce using rule 43 (statement -> jump_statement .)
    IF              reduce using rule 43 (statement -> jump_statement .)
    SWITCH          reduce using rule 43 (statement -> jump_statement .)
    WHILE           reduce using rule 43 (statement -> jump_statement .)
    DO              reduce using rule 43 (statement -> jump_statement .)
    FOR             reduce using rule 43 (statement -> jump_statement .)
    GOTO            reduce using rule 43 (statement -> jump_statement .)
    BREAK           reduce using rule 43 (statement -> jump_statement .)
    CONTINUE        reduce using rule 43 (statement -> jump_statement .)
    RETURN          reduce using rule 43 (statement -> jump_statement .)
    LBRACE          reduce using rule 43 (statement -> jump_statement .)
    CONST           reduce using rule 43 (statement -> jump_statement .)
    RESTRICT        reduce using rule 43 (statement -> jump_statement .)
    VOLATILE        reduce using rule 43 (statement -> jump_statement .)
    VOID            reduce using rule 43 (statement -> jump_statement .)
    _BOOL           reduce using rule 43 (statement -> jump_statement .)
    CHAR            reduce using rule 43 (statement -> jump_statement .)
    SHORT           reduce using rule 43 (statement -> jump_statement .)
    INT             reduce using rule 43 (statement -> jump_statement .)
    LONG            reduce using rule 43 (statement -> jump_statement .)
    FLOAT           reduce using rule 43 (statement -> jump_statement .)
    DOUBLE          reduce using rule 43 (statement -> jump_statement .)
    _COMPLEX        reduce using rule 43 (statement -> jump_statement .)
    SIGNED          reduce using rule 43 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 43 (statement -> jump_statement .)
    AUTO            reduce using rule 43 (statement -> jump_statement .)
    REGISTER        reduce using rule 43 (statement -> jump_statement .)
    STATIC          reduce using rule 43 (statement -> jump_statement .)
    EXTERN          reduce using rule 43 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 43 (statement -> jump_statement .)
    INLINE          reduce using rule 43 (statement -> jump_statement .)
    TYPEID          reduce using rule 43 (statement -> jump_statement .)
    ENUM            reduce using rule 43 (statement -> jump_statement .)
    STRUCT          reduce using rule 43 (statement -> jump_statement .)
    UNION           reduce using rule 43 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 43 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 43 (statement -> jump_statement .)
    SIZEOF          reduce using rule 43 (statement -> jump_statement .)
    LPAREN          reduce using rule 43 (statement -> jump_statement .)
    AND             reduce using rule 43 (statement -> jump_statement .)
    TIMES           reduce using rule 43 (statement -> jump_statement .)
    PLUS            reduce using rule 43 (statement -> jump_statement .)
    MINUS           reduce using rule 43 (statement -> jump_statement .)
    NOT             reduce using rule 43 (statement -> jump_statement .)
    LNOT            reduce using rule 43 (statement -> jump_statement .)
    INT_CONST_DEC   reduce using rule 43 (statement -> jump_statement .)
    INT_CONST_OCT   reduce using rule 43 (statement -> jump_statement .)
    INT_CONST_HEX   reduce using rule 43 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 43 (statement -> jump_statement .)
    HEX_FLOAT_CONST reduce using rule 43 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 43 (statement -> jump_statement .)
    WCHAR_CONST     reduce using rule 43 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 43 (statement -> jump_statement .)
    WSTRING_LITERAL reduce using rule 43 (statement -> jump_statement .)
    SEMI            reduce using rule 43 (statement -> jump_statement .)
    RBRACE          reduce using rule 43 (statement -> jump_statement .)
    ELSE            reduce using rule 43 (statement -> jump_statement .)


state 175

    (14) expression_opt -> expression .
    (169) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 14 (expression_opt -> expression .)
    RPAREN          reduce using rule 14 (expression_opt -> expression .)
    COMMA           shift and go to state 281


state 176

    (151) compound_statement -> brace_open block_item_list_opt . brace_close
    (250) brace_close -> . RBRACE

    RBRACE          shift and go to state 150

    brace_close                    shift and go to state 282

state 177

    (163) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 283


state 178

    (39) statement -> expression_statement .

    ID              reduce using rule 39 (statement -> expression_statement .)
    CASE            reduce using rule 39 (statement -> expression_statement .)
    DEFAULT         reduce using rule 39 (statement -> expression_statement .)
    IF              reduce using rule 39 (statement -> expression_statement .)
    SWITCH          reduce using rule 39 (statement -> expression_statement .)
    WHILE           reduce using rule 39 (statement -> expression_statement .)
    DO              reduce using rule 39 (statement -> expression_statement .)
    FOR             reduce using rule 39 (statement -> expression_statement .)
    GOTO            reduce using rule 39 (statement -> expression_statement .)
    BREAK           reduce using rule 39 (statement -> expression_statement .)
    CONTINUE        reduce using rule 39 (statement -> expression_statement .)
    RETURN          reduce using rule 39 (statement -> expression_statement .)
    LBRACE          reduce using rule 39 (statement -> expression_statement .)
    CONST           reduce using rule 39 (statement -> expression_statement .)
    RESTRICT        reduce using rule 39 (statement -> expression_statement .)
    VOLATILE        reduce using rule 39 (statement -> expression_statement .)
    VOID            reduce using rule 39 (statement -> expression_statement .)
    _BOOL           reduce using rule 39 (statement -> expression_statement .)
    CHAR            reduce using rule 39 (statement -> expression_statement .)
    SHORT           reduce using rule 39 (statement -> expression_statement .)
    INT             reduce using rule 39 (statement -> expression_statement .)
    LONG            reduce using rule 39 (statement -> expression_statement .)
    FLOAT           reduce using rule 39 (statement -> expression_statement .)
    DOUBLE          reduce using rule 39 (statement -> expression_statement .)
    _COMPLEX        reduce using rule 39 (statement -> expression_statement .)
    SIGNED          reduce using rule 39 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 39 (statement -> expression_statement .)
    AUTO            reduce using rule 39 (statement -> expression_statement .)
    REGISTER        reduce using rule 39 (statement -> expression_statement .)
    STATIC          reduce using rule 39 (statement -> expression_statement .)
    EXTERN          reduce using rule 39 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 39 (statement -> expression_statement .)
    INLINE          reduce using rule 39 (statement -> expression_statement .)
    TYPEID          reduce using rule 39 (statement -> expression_statement .)
    ENUM            reduce using rule 39 (statement -> expression_statement .)
    STRUCT          reduce using rule 39 (statement -> expression_statement .)
    UNION           reduce using rule 39 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 39 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 39 (statement -> expression_statement .)
    SIZEOF          reduce using rule 39 (statement -> expression_statement .)
    LPAREN          reduce using rule 39 (statement -> expression_statement .)
    AND             reduce using rule 39 (statement -> expression_statement .)
    TIMES           reduce using rule 39 (statement -> expression_statement .)
    PLUS            reduce using rule 39 (statement -> expression_statement .)
    MINUS           reduce using rule 39 (statement -> expression_statement .)
    NOT             reduce using rule 39 (statement -> expression_statement .)
    LNOT            reduce using rule 39 (statement -> expression_statement .)
    INT_CONST_DEC   reduce using rule 39 (statement -> expression_statement .)
    INT_CONST_OCT   reduce using rule 39 (statement -> expression_statement .)
    INT_CONST_HEX   reduce using rule 39 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 39 (statement -> expression_statement .)
    HEX_FLOAT_CONST reduce using rule 39 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 39 (statement -> expression_statement .)
    WCHAR_CONST     reduce using rule 39 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 39 (statement -> expression_statement .)
    WSTRING_LITERAL reduce using rule 39 (statement -> expression_statement .)
    SEMI            reduce using rule 39 (statement -> expression_statement .)
    RBRACE          reduce using rule 39 (statement -> expression_statement .)
    ELSE            reduce using rule 39 (statement -> expression_statement .)


state 179

    (165) jump_statement -> RETURN . expression SEMI
    (166) jump_statement -> RETURN . SEMI
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    SEMI            shift and go to state 284
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    binary_expression              shift and go to state 128
    unary_operator                 shift and go to state 146
    expression                     shift and go to state 285
    conditional_expression         shift and go to state 145
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 136
    assignment_expression          shift and go to state 159
    cast_expression                shift and go to state 142

state 180

    (158) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 286


state 181

    (84) struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list . brace_close
    (89) struct_declaration_list -> struct_declaration_list . struct_declaration
    (250) brace_close -> . RBRACE
    (90) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (79) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (80) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    RBRACE          shift and go to state 150
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    struct_declaration             shift and go to state 183
    struct_or_union_specifier      shift and go to state 31
    brace_close                    shift and go to state 287
    specifier_qualifier_list       shift and go to state 98
    struct_or_union                shift and go to state 29
    type_qualifier                 shift and go to state 99
    typedef_name                   shift and go to state 48
    type_specifier                 shift and go to state 100
    enum_specifier                 shift and go to state 8

state 182

    (85) struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list . brace_close
    (89) struct_declaration_list -> struct_declaration_list . struct_declaration
    (250) brace_close -> . RBRACE
    (90) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (79) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (80) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    RBRACE          shift and go to state 150
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    struct_declaration             shift and go to state 183
    struct_or_union_specifier      shift and go to state 31
    brace_close                    shift and go to state 288
    specifier_qualifier_list       shift and go to state 98
    struct_or_union                shift and go to state 29
    type_qualifier                 shift and go to state 99
    typedef_name                   shift and go to state 48
    type_specifier                 shift and go to state 100
    enum_specifier                 shift and go to state 8

state 183

    (89) struct_declaration_list -> struct_declaration_list struct_declaration .

    RBRACE          reduce using rule 89 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 89 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    RESTRICT        reduce using rule 89 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 89 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 89 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    _BOOL           reduce using rule 89 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 89 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 89 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 89 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 89 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 89 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 89 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    _COMPLEX        reduce using rule 89 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 89 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 89 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    TYPEID          reduce using rule 89 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 89 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 89 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 89 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 184

    (83) struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .

    CONST           reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    RESTRICT        reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    VOLATILE        reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    VOID            reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    _BOOL           reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    CHAR            reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    SHORT           reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    INT             reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    LONG            reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    FLOAT           reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    DOUBLE          reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    _COMPLEX        reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    SIGNED          reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    UNSIGNED        reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    AUTO            reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    REGISTER        reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    STATIC          reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    EXTERN          reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    TYPEDEF         reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    INLINE          reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    TYPEID          reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    ENUM            reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    STRUCT          reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    UNION           reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    ID              reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    LPAREN          reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    TIMES           reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    SEMI            reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    LBRACKET        reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    COMMA           reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    RPAREN          reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    COLON           reduce using rule 83 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)


state 185

    (24) struct_declarator_list_opt -> struct_declarator_list .
    (92) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMI            reduce using rule 24 (struct_declarator_list_opt -> struct_declarator_list .)
    COMMA           shift and go to state 289


state 186

    (90) struct_declaration -> specifier_qualifier_list struct_declarator_list_opt . SEMI

    SEMI            shift and go to state 290


state 187

    (91) struct_declarator_list -> struct_declarator .

    COMMA           reduce using rule 91 (struct_declarator_list -> struct_declarator .)
    SEMI            reduce using rule 91 (struct_declarator_list -> struct_declarator .)


state 188

    (23) struct_declarator_list_opt -> empty .

    SEMI            reduce using rule 23 (struct_declarator_list_opt -> empty .)


state 189

    (95) struct_declarator -> COLON . constant_expression
    (184) constant_expression -> . conditional_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    binary_expression              shift and go to state 128
    unary_operator                 shift and go to state 146
    conditional_expression         shift and go to state 267
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    constant_expression            shift and go to state 291
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 190

    (93) struct_declarator -> declarator .
    (94) struct_declarator -> declarator . COLON constant_expression

    COMMA           reduce using rule 93 (struct_declarator -> declarator .)
    SEMI            reduce using rule 93 (struct_declarator -> declarator .)
    COLON           shift and go to state 292


state 191

    (22) specifier_qualifier_list_opt -> specifier_qualifier_list .

    COLON           reduce using rule 22 (specifier_qualifier_list_opt -> specifier_qualifier_list .)
    ID              reduce using rule 22 (specifier_qualifier_list_opt -> specifier_qualifier_list .)
    LPAREN          reduce using rule 22 (specifier_qualifier_list_opt -> specifier_qualifier_list .)
    TIMES           reduce using rule 22 (specifier_qualifier_list_opt -> specifier_qualifier_list .)
    SEMI            reduce using rule 22 (specifier_qualifier_list_opt -> specifier_qualifier_list .)
    LBRACKET        reduce using rule 22 (specifier_qualifier_list_opt -> specifier_qualifier_list .)
    RPAREN          reduce using rule 22 (specifier_qualifier_list_opt -> specifier_qualifier_list .)


state 192

    (79) specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .

    TIMES           reduce using rule 79 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)
    LPAREN          reduce using rule 79 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)
    LBRACKET        reduce using rule 79 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)
    RPAREN          reduce using rule 79 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)
    COLON           reduce using rule 79 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)
    ID              reduce using rule 79 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)
    SEMI            reduce using rule 79 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)


state 193

    (21) specifier_qualifier_list_opt -> empty .

    COLON           reduce using rule 21 (specifier_qualifier_list_opt -> empty .)
    ID              reduce using rule 21 (specifier_qualifier_list_opt -> empty .)
    LPAREN          reduce using rule 21 (specifier_qualifier_list_opt -> empty .)
    TIMES           reduce using rule 21 (specifier_qualifier_list_opt -> empty .)
    SEMI            reduce using rule 21 (specifier_qualifier_list_opt -> empty .)
    LBRACKET        reduce using rule 21 (specifier_qualifier_list_opt -> empty .)
    RPAREN          reduce using rule 21 (specifier_qualifier_list_opt -> empty .)


state 194

    (80) specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .

    TIMES           reduce using rule 80 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)
    LPAREN          reduce using rule 80 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)
    LBRACKET        reduce using rule 80 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)
    RPAREN          reduce using rule 80 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)
    COLON           reduce using rule 80 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)
    ID              reduce using rule 80 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)
    SEMI            reduce using rule 80 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)


state 195

    (76) init_declarator_list -> init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 76 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 76 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 196

    (78) init_declarator -> declarator EQUALS initializer .

    COMMA           reduce using rule 78 (init_declarator -> declarator EQUALS initializer .)
    SEMI            reduce using rule 78 (init_declarator -> declarator EQUALS initializer .)


state 197

    (127) initializer -> brace_open . initializer_list brace_close
    (128) initializer -> brace_open . initializer_list COMMA brace_close
    (129) initializer_list -> . designation_opt initializer
    (130) initializer_list -> . initializer_list COMMA designation_opt initializer
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (251) empty -> .
    (131) designation -> . designator_list EQUALS
    (132) designator_list -> . designator
    (133) designator_list -> . designator_list designator
    (134) designator -> . LBRACKET constant_expression RBRACKET
    (135) designator -> . PERIOD identifier

    LBRACE          reduce using rule 251 (empty -> .)
    PLUSPLUS        reduce using rule 251 (empty -> .)
    MINUSMINUS      reduce using rule 251 (empty -> .)
    SIZEOF          reduce using rule 251 (empty -> .)
    LPAREN          reduce using rule 251 (empty -> .)
    AND             reduce using rule 251 (empty -> .)
    TIMES           reduce using rule 251 (empty -> .)
    PLUS            reduce using rule 251 (empty -> .)
    MINUS           reduce using rule 251 (empty -> .)
    NOT             reduce using rule 251 (empty -> .)
    LNOT            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)
    INT_CONST_DEC   reduce using rule 251 (empty -> .)
    INT_CONST_OCT   reduce using rule 251 (empty -> .)
    INT_CONST_HEX   reduce using rule 251 (empty -> .)
    FLOAT_CONST     reduce using rule 251 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 251 (empty -> .)
    CHAR_CONST      reduce using rule 251 (empty -> .)
    WCHAR_CONST     reduce using rule 251 (empty -> .)
    STRING_LITERAL  reduce using rule 251 (empty -> .)
    WSTRING_LITERAL reduce using rule 251 (empty -> .)
    LBRACKET        shift and go to state 300
    PERIOD          shift and go to state 298

    empty                          shift and go to state 297
    designator                     shift and go to state 293
    designator_list                shift and go to state 299
    designation                    shift and go to state 294
    initializer_list               shift and go to state 295
    designation_opt                shift and go to state 296

state 198

    (126) initializer -> assignment_expression .

    COMMA           reduce using rule 126 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 126 (initializer -> assignment_expression .)
    SEMI            reduce using rule 126 (initializer -> assignment_expression .)


state 199

    (37) function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .

    SEMI            reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    PPHASH          reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    CONST           reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    RESTRICT        reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    VOLATILE        reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    VOID            reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    _BOOL           reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    SHORT           reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    LONG            reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    DOUBLE          reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    _COMPLEX        reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    SIGNED          reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    UNSIGNED        reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    AUTO            reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    REGISTER        reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    STATIC          reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    EXTERN          reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    TYPEDEF         reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    INLINE          reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    TYPEID          reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    ENUM            reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    STRUCT          reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    UNION           reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 37 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)


state 200

    (112) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CONST           reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RESTRICT        reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOLATILE        reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    _BOOL           reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SHORT           reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LONG            reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    DOUBLE          reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    _COMPLEX        reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SIGNED          reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNSIGNED        reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    AUTO            reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    REGISTER        reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STATIC          reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EXTERN          reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEDEF         reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INLINE          reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEID          reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ENUM            reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STRUCT          reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNION           reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LBRACE          reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMI            reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 112 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)


state 201

    (125) identifier_list -> identifier_list COMMA . identifier
    (237) identifier -> . ID

    ID              shift and go to state 111

    identifier                     shift and go to state 301

state 202

    (119) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (121) parameter_list -> parameter_list COMMA . parameter_declaration
    (122) parameter_declaration -> . declaration_specifiers declarator
    (123) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (48) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (49) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (50) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (51) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (52) storage_class_specifier -> . AUTO
    (53) storage_class_specifier -> . REGISTER
    (54) storage_class_specifier -> . STATIC
    (55) storage_class_specifier -> . EXTERN
    (56) storage_class_specifier -> . TYPEDEF
    (57) function_specifier -> . INLINE
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 303
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    AUTO            shift and go to state 35
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 4
    EXTERN          shift and go to state 34
    TYPEDEF         shift and go to state 42
    INLINE          shift and go to state 16
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    struct_or_union_specifier      shift and go to state 31
    function_specifier             shift and go to state 20
    storage_class_specifier        shift and go to state 7
    parameter_declaration          shift and go to state 302
    enum_specifier                 shift and go to state 8
    type_qualifier                 shift and go to state 39
    declaration_specifiers         shift and go to state 113
    typedef_name                   shift and go to state 48
    type_specifier                 shift and go to state 14
    struct_or_union                shift and go to state 29

state 203

    (113) direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .

    LBRACKET        reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LPAREN          reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    CONST           reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    RESTRICT        reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    VOLATILE        reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    VOID            reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    _BOOL           reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    CHAR            reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SHORT           reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    INT             reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LONG            reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    FLOAT           reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    DOUBLE          reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    _COMPLEX        reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SIGNED          reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    UNSIGNED        reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    AUTO            reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    REGISTER        reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    STATIC          reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    EXTERN          reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    TYPEDEF         reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    INLINE          reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    TYPEID          reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    ENUM            reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    STRUCT          reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    UNION           reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LBRACE          reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    EQUALS          reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    COMMA           reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SEMI            reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    COLON           reduce using rule 113 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)


state 204

    (123) parameter_declaration -> declaration_specifiers abstract_declarator_opt .

    COMMA           reduce using rule 123 (parameter_declaration -> declaration_specifiers abstract_declarator_opt .)
    RPAREN          reduce using rule 123 (parameter_declaration -> declaration_specifiers abstract_declarator_opt .)


state 205

    (107) declarator -> pointer . direct_declarator
    (137) abstract_declarator -> pointer .
    (138) abstract_declarator -> pointer . direct_abstract_declarator
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . LPAREN declarator RPAREN
    (110) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (111) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (112) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (113) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (140) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (141) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (142) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (143) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (144) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (145) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (146) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    RPAREN          reduce using rule 137 (abstract_declarator -> pointer .)
    COMMA           reduce using rule 137 (abstract_declarator -> pointer .)
    ID              shift and go to state 46
    LPAREN          shift and go to state 207
    LBRACKET        shift and go to state 208

    direct_abstract_declarator     shift and go to state 304
    direct_declarator              shift and go to state 69

state 206

    (139) abstract_declarator -> direct_abstract_declarator .
    (141) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET assignment_expression_opt RBRACKET
    (143) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET TIMES RBRACKET
    (145) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list_opt RPAREN

    RPAREN          reduce using rule 139 (abstract_declarator -> direct_abstract_declarator .)
    COMMA           reduce using rule 139 (abstract_declarator -> direct_abstract_declarator .)
    LBRACKET        shift and go to state 306
    LPAREN          shift and go to state 305


state 207

    (109) direct_declarator -> LPAREN . declarator RPAREN
    (140) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (146) direct_abstract_declarator -> LPAREN . parameter_type_list_opt RPAREN
    (106) declarator -> . direct_declarator
    (107) declarator -> . pointer direct_declarator
    (137) abstract_declarator -> . pointer
    (138) abstract_declarator -> . pointer direct_abstract_declarator
    (139) abstract_declarator -> . direct_abstract_declarator
    (19) parameter_type_list_opt -> . empty
    (20) parameter_type_list_opt -> . parameter_type_list
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . LPAREN declarator RPAREN
    (110) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (111) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (112) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (113) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (114) pointer -> . TIMES type_qualifier_list_opt
    (115) pointer -> . TIMES type_qualifier_list_opt pointer
    (140) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (141) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (142) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (143) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (144) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (145) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (146) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (251) empty -> .
    (118) parameter_type_list -> . parameter_list
    (119) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (120) parameter_list -> . parameter_declaration
    (121) parameter_list -> . parameter_list COMMA parameter_declaration
    (122) parameter_declaration -> . declaration_specifiers declarator
    (123) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (48) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (49) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (50) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (51) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (52) storage_class_specifier -> . AUTO
    (53) storage_class_specifier -> . REGISTER
    (54) storage_class_specifier -> . STATIC
    (55) storage_class_specifier -> . EXTERN
    (56) storage_class_specifier -> . TYPEDEF
    (57) function_specifier -> . INLINE
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    ID              shift and go to state 46
    LPAREN          shift and go to state 207
    TIMES           shift and go to state 11
    LBRACKET        shift and go to state 208
    RPAREN          reduce using rule 251 (empty -> .)
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    AUTO            shift and go to state 35
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 4
    EXTERN          shift and go to state 34
    TYPEDEF         shift and go to state 42
    INLINE          shift and go to state 16
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    pointer                        shift and go to state 205
    struct_or_union_specifier      shift and go to state 31
    storage_class_specifier        shift and go to state 7
    direct_abstract_declarator     shift and go to state 206
    parameter_declaration          shift and go to state 109
    enum_specifier                 shift and go to state 8
    parameter_list                 shift and go to state 110
    type_qualifier                 shift and go to state 39
    parameter_type_list_opt        shift and go to state 308
    type_specifier                 shift and go to state 14
    struct_or_union                shift and go to state 29
    abstract_declarator            shift and go to state 309
    empty                          shift and go to state 307
    function_specifier             shift and go to state 20
    declarator                     shift and go to state 73
    declaration_specifiers         shift and go to state 113
    typedef_name                   shift and go to state 48
    direct_declarator              shift and go to state 44
    parameter_type_list            shift and go to state 310

state 208

    (142) direct_abstract_declarator -> LBRACKET . assignment_expression_opt RBRACKET
    (144) direct_abstract_declarator -> LBRACKET . TIMES RBRACKET
    (3) assignment_expression_opt -> . empty
    (4) assignment_expression_opt -> . assignment_expression
    (251) empty -> .
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    TIMES           shift and go to state 311
    RBRACKET        reduce using rule 251 (empty -> .)
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    assignment_expression_opt      shift and go to state 312
    binary_expression              shift and go to state 128
    unary_operator                 shift and go to state 146
    empty                          shift and go to state 127
    conditional_expression         shift and go to state 145
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    assignment_expression          shift and go to state 131
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142
    unified_string_literal         shift and go to state 125

state 209

    (1) abstract_declarator_opt -> empty .

    RPAREN          reduce using rule 1 (abstract_declarator_opt -> empty .)
    COMMA           reduce using rule 1 (abstract_declarator_opt -> empty .)


state 210

    (122) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 122 (parameter_declaration -> declaration_specifiers declarator .)
    RPAREN          reduce using rule 122 (parameter_declaration -> declaration_specifiers declarator .)


state 211

    (2) abstract_declarator_opt -> abstract_declarator .

    RPAREN          reduce using rule 2 (abstract_declarator_opt -> abstract_declarator .)
    COMMA           reduce using rule 2 (abstract_declarator_opt -> abstract_declarator .)


state 212

    (228) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list COMMA brace_close
    (234) primary_expression -> LPAREN . expression RPAREN
    (136) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (79) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (80) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    primary_expression             shift and go to state 115
    struct_or_union_specifier      shift and go to state 31
    postfix_expression             shift and go to state 136
    specifier_qualifier_list       shift and go to state 238
    conditional_expression         shift and go to state 145
    enum_specifier                 shift and go to state 8
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    type_qualifier                 shift and go to state 99
    cast_expression                shift and go to state 142
    constant                       shift and go to state 124
    expression                     shift and go to state 239
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    type_name                      shift and go to state 313
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    type_specifier                 shift and go to state 100
    assignment_expression          shift and go to state 159
    typedef_name                   shift and go to state 48
    struct_or_union                shift and go to state 29

state 213

    (209) unary_expression -> PLUSPLUS unary_expression .

    TIMES           reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFT          reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFT          reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    GE              reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    GT              reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    NE              reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    XOR             reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    LAND            reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    LOR             reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    CONDOP          reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    COLON           reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    EQUALS          reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    XOREQUAL        reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    TIMESEQUAL      reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    DIVEQUAL        reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    MODEQUAL        reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    PLUSEQUAL       reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    MINUSEQUAL      reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    ANDEQUAL        reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)
    OREQUAL         reduce using rule 209 (unary_expression -> PLUSPLUS unary_expression .)


state 214

    (248) unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .

    WSTRING_LITERAL reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LBRACKET        reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LPAREN          reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PERIOD          reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    ARROW           reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PLUSPLUS        reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MINUSMINUS      reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    EQUALS          reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    XOREQUAL        reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    TIMESEQUAL      reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    DIVEQUAL        reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MODEQUAL        reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PLUSEQUAL       reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MINUSEQUAL      reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    ANDEQUAL        reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    OREQUAL         reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    CONDOP          reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    TIMES           reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    DIVIDE          reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MOD             reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PLUS            reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MINUS           reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RSHIFT          reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LSHIFT          reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LT              reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LE              reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    GE              reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    GT              reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    EQ              reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    NE              reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    AND             reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    OR              reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    XOR             reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LAND            reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LOR             reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    COMMA           reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RPAREN          reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RBRACKET        reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    SEMI            reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RBRACE          reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    COLON           reduce using rule 248 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)


state 215

    (111) direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    CONST           reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    RESTRICT        reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    VOLATILE        reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    VOID            reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    _BOOL           reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    CHAR            reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    SHORT           reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    INT             reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    LONG            reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    FLOAT           reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    DOUBLE          reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    _COMPLEX        reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    SIGNED          reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    UNSIGNED        reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    AUTO            reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    REGISTER        reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    STATIC          reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    EXTERN          reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    TYPEDEF         reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    INLINE          reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    TYPEID          reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    ENUM            reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    STRUCT          reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    UNION           reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    LBRACE          reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    EQUALS          reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    SEMI            reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    COLON           reduce using rule 111 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)


state 216

    (210) unary_expression -> MINUSMINUS unary_expression .

    TIMES           reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFT          reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFT          reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    GE              reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    GT              reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    NE              reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    XOR             reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    LAND            reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    LOR             reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    CONDOP          reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    COLON           reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    EQUALS          reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    XOREQUAL        reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    TIMESEQUAL      reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    DIVEQUAL        reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    MODEQUAL        reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    PLUSEQUAL       reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    MINUSEQUAL      reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    ANDEQUAL        reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)
    OREQUAL         reduce using rule 210 (unary_expression -> MINUSMINUS unary_expression .)


state 217

    (246) unified_string_literal -> unified_string_literal STRING_LITERAL .

    STRING_LITERAL  reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LBRACKET        reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LPAREN          reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PERIOD          reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    ARROW           reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PLUSPLUS        reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MINUSMINUS      reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    EQUALS          reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    XOREQUAL        reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    DIVEQUAL        reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MODEQUAL        reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    ANDEQUAL        reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    OREQUAL         reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    CONDOP          reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    TIMES           reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    DIVIDE          reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MOD             reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PLUS            reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MINUS           reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RSHIFT          reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LSHIFT          reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LT              reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LE              reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    GE              reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    GT              reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    EQ              reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    NE              reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    AND             reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    OR              reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    XOR             reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LAND            reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LOR             reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RPAREN          reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    COMMA           reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RBRACKET        reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    SEMI            reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RBRACE          reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    COLON           reduce using rule 246 (unified_string_literal -> unified_string_literal STRING_LITERAL .)


state 218

    (193) binary_expression -> binary_expression RSHIFT . binary_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 314
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 219

    (201) binary_expression -> binary_expression AND . binary_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 315
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 220

    (204) binary_expression -> binary_expression LAND . binary_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 316
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 221

    (199) binary_expression -> binary_expression EQ . binary_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 317
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 222

    (198) binary_expression -> binary_expression GT . binary_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 318
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 223

    (189) binary_expression -> binary_expression DIVIDE . binary_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 319
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 224

    (188) binary_expression -> binary_expression TIMES . binary_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 320
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 225

    (186) conditional_expression -> binary_expression CONDOP . expression COLON conditional_expression
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    conditional_expression         shift and go to state 145
    unary_operator                 shift and go to state 146
    expression                     shift and go to state 321
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 136
    assignment_expression          shift and go to state 159
    cast_expression                shift and go to state 142

state 226

    (203) binary_expression -> binary_expression XOR . binary_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 322
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 227

    (205) binary_expression -> binary_expression LOR . binary_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 323
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 228

    (200) binary_expression -> binary_expression NE . binary_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 324
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 229

    (191) binary_expression -> binary_expression PLUS . binary_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 325
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 230

    (190) binary_expression -> binary_expression MOD . binary_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 326
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 231

    (195) binary_expression -> binary_expression LT . binary_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 327
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 232

    (202) binary_expression -> binary_expression OR . binary_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 328
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 233

    (192) binary_expression -> binary_expression MINUS . binary_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 329
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 234

    (194) binary_expression -> binary_expression LSHIFT . binary_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 330
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 235

    (197) binary_expression -> binary_expression GE . binary_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 331
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 236

    (196) binary_expression -> binary_expression LE . binary_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 332
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 237

    (228) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list COMMA brace_close
    (207) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 333


state 238

    (136) type_name -> specifier_qualifier_list . abstract_declarator_opt
    (1) abstract_declarator_opt -> . empty
    (2) abstract_declarator_opt -> . abstract_declarator
    (251) empty -> .
    (137) abstract_declarator -> . pointer
    (138) abstract_declarator -> . pointer direct_abstract_declarator
    (139) abstract_declarator -> . direct_abstract_declarator
    (114) pointer -> . TIMES type_qualifier_list_opt
    (115) pointer -> . TIMES type_qualifier_list_opt pointer
    (140) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (141) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (142) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (143) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (144) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (145) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (146) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    RPAREN          reduce using rule 251 (empty -> .)
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 336
    LBRACKET        shift and go to state 208

    abstract_declarator_opt        shift and go to state 334
    pointer                        shift and go to state 335
    direct_abstract_declarator     shift and go to state 206
    empty                          shift and go to state 209
    abstract_declarator            shift and go to state 211

state 239

    (234) primary_expression -> LPAREN expression . RPAREN
    (169) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 337
    COMMA           shift and go to state 281


state 240

    (213) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (228) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list COMMA brace_close
    (234) primary_expression -> LPAREN . expression RPAREN
    (136) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (79) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (80) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    primary_expression             shift and go to state 115
    struct_or_union_specifier      shift and go to state 31
    postfix_expression             shift and go to state 136
    specifier_qualifier_list       shift and go to state 238
    conditional_expression         shift and go to state 145
    enum_specifier                 shift and go to state 8
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    type_qualifier                 shift and go to state 99
    cast_expression                shift and go to state 142
    constant                       shift and go to state 124
    expression                     shift and go to state 239
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    type_name                      shift and go to state 338
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    type_specifier                 shift and go to state 100
    assignment_expression          shift and go to state 159
    typedef_name                   shift and go to state 48
    struct_or_union                shift and go to state 29

state 241

    (212) unary_expression -> SIZEOF unary_expression .

    TIMES           reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    MOD             reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    LT              reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    LE              reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    GE              reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    GT              reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    EQ              reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    NE              reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    XOR             reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    LAND            reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    LOR             reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    CONDOP          reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    RBRACKET        reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    SEMI            reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    RBRACE          reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    EQUALS          reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    XOREQUAL        reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    TIMESEQUAL      reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    DIVEQUAL        reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    MODEQUAL        reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQUAL       reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQUAL      reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQUAL     reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQUAL     reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    ANDEQUAL        reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)
    OREQUAL         reduce using rule 212 (unary_expression -> SIZEOF unary_expression .)


state 242

    (225) postfix_expression -> postfix_expression ARROW . identifier
    (237) identifier -> . ID

    ID              shift and go to state 111

    identifier                     shift and go to state 339

state 243

    (222) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (223) postfix_expression -> postfix_expression LPAREN . RPAREN
    (235) argument_expression_list -> . assignment_expression
    (236) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RPAREN          shift and go to state 340
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    argument_expression_list       shift and go to state 342
    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    binary_expression              shift and go to state 128
    unary_operator                 shift and go to state 146
    conditional_expression         shift and go to state 145
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    assignment_expression          shift and go to state 341
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 244

    (224) postfix_expression -> postfix_expression PERIOD . identifier
    (237) identifier -> . ID

    ID              shift and go to state 111

    identifier                     shift and go to state 343

state 245

    (227) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    PERIOD          reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    ARROW           reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOREQUAL        reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMESEQUAL      reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVEQUAL        reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    MODEQUAL        reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSEQUAL       reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSEQUAL      reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFTEQUAL     reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFTEQUAL     reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    ANDEQUAL        reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    OREQUAL         reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    CONDOP          reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFT          reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFT          reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    LE              reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    GE              reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    GT              reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    NE              reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOR             reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    LAND            reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    LOR             reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    COLON           reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 227 (postfix_expression -> postfix_expression MINUSMINUS .)


state 246

    (221) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    binary_expression              shift and go to state 128
    unary_operator                 shift and go to state 146
    expression                     shift and go to state 344
    conditional_expression         shift and go to state 145
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    assignment_expression          shift and go to state 159
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 247

    (226) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    PERIOD          reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    ARROW           reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOREQUAL        reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMESEQUAL      reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVEQUAL        reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    MODEQUAL        reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSEQUAL       reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSEQUAL      reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFTEQUAL     reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFTEQUAL     reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    ANDEQUAL        reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    OREQUAL         reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    CONDOP          reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFT          reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFT          reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    LE              reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    GE              reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    GT              reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    NE              reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOR             reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    LAND            reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    LOR             reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    COLON           reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 226 (postfix_expression -> postfix_expression PLUSPLUS .)


state 248

    (177) assignment_operator -> MODEQUAL .

    PLUSPLUS        reduce using rule 177 (assignment_operator -> MODEQUAL .)
    MINUSMINUS      reduce using rule 177 (assignment_operator -> MODEQUAL .)
    SIZEOF          reduce using rule 177 (assignment_operator -> MODEQUAL .)
    LPAREN          reduce using rule 177 (assignment_operator -> MODEQUAL .)
    AND             reduce using rule 177 (assignment_operator -> MODEQUAL .)
    TIMES           reduce using rule 177 (assignment_operator -> MODEQUAL .)
    PLUS            reduce using rule 177 (assignment_operator -> MODEQUAL .)
    MINUS           reduce using rule 177 (assignment_operator -> MODEQUAL .)
    NOT             reduce using rule 177 (assignment_operator -> MODEQUAL .)
    LNOT            reduce using rule 177 (assignment_operator -> MODEQUAL .)
    ID              reduce using rule 177 (assignment_operator -> MODEQUAL .)
    INT_CONST_DEC   reduce using rule 177 (assignment_operator -> MODEQUAL .)
    INT_CONST_OCT   reduce using rule 177 (assignment_operator -> MODEQUAL .)
    INT_CONST_HEX   reduce using rule 177 (assignment_operator -> MODEQUAL .)
    FLOAT_CONST     reduce using rule 177 (assignment_operator -> MODEQUAL .)
    HEX_FLOAT_CONST reduce using rule 177 (assignment_operator -> MODEQUAL .)
    CHAR_CONST      reduce using rule 177 (assignment_operator -> MODEQUAL .)
    WCHAR_CONST     reduce using rule 177 (assignment_operator -> MODEQUAL .)
    STRING_LITERAL  reduce using rule 177 (assignment_operator -> MODEQUAL .)
    WSTRING_LITERAL reduce using rule 177 (assignment_operator -> MODEQUAL .)


state 249

    (176) assignment_operator -> DIVEQUAL .

    PLUSPLUS        reduce using rule 176 (assignment_operator -> DIVEQUAL .)
    MINUSMINUS      reduce using rule 176 (assignment_operator -> DIVEQUAL .)
    SIZEOF          reduce using rule 176 (assignment_operator -> DIVEQUAL .)
    LPAREN          reduce using rule 176 (assignment_operator -> DIVEQUAL .)
    AND             reduce using rule 176 (assignment_operator -> DIVEQUAL .)
    TIMES           reduce using rule 176 (assignment_operator -> DIVEQUAL .)
    PLUS            reduce using rule 176 (assignment_operator -> DIVEQUAL .)
    MINUS           reduce using rule 176 (assignment_operator -> DIVEQUAL .)
    NOT             reduce using rule 176 (assignment_operator -> DIVEQUAL .)
    LNOT            reduce using rule 176 (assignment_operator -> DIVEQUAL .)
    ID              reduce using rule 176 (assignment_operator -> DIVEQUAL .)
    INT_CONST_DEC   reduce using rule 176 (assignment_operator -> DIVEQUAL .)
    INT_CONST_OCT   reduce using rule 176 (assignment_operator -> DIVEQUAL .)
    INT_CONST_HEX   reduce using rule 176 (assignment_operator -> DIVEQUAL .)
    FLOAT_CONST     reduce using rule 176 (assignment_operator -> DIVEQUAL .)
    HEX_FLOAT_CONST reduce using rule 176 (assignment_operator -> DIVEQUAL .)
    CHAR_CONST      reduce using rule 176 (assignment_operator -> DIVEQUAL .)
    WCHAR_CONST     reduce using rule 176 (assignment_operator -> DIVEQUAL .)
    STRING_LITERAL  reduce using rule 176 (assignment_operator -> DIVEQUAL .)
    WSTRING_LITERAL reduce using rule 176 (assignment_operator -> DIVEQUAL .)


state 250

    (175) assignment_operator -> TIMESEQUAL .

    PLUSPLUS        reduce using rule 175 (assignment_operator -> TIMESEQUAL .)
    MINUSMINUS      reduce using rule 175 (assignment_operator -> TIMESEQUAL .)
    SIZEOF          reduce using rule 175 (assignment_operator -> TIMESEQUAL .)
    LPAREN          reduce using rule 175 (assignment_operator -> TIMESEQUAL .)
    AND             reduce using rule 175 (assignment_operator -> TIMESEQUAL .)
    TIMES           reduce using rule 175 (assignment_operator -> TIMESEQUAL .)
    PLUS            reduce using rule 175 (assignment_operator -> TIMESEQUAL .)
    MINUS           reduce using rule 175 (assignment_operator -> TIMESEQUAL .)
    NOT             reduce using rule 175 (assignment_operator -> TIMESEQUAL .)
    LNOT            reduce using rule 175 (assignment_operator -> TIMESEQUAL .)
    ID              reduce using rule 175 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_DEC   reduce using rule 175 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_OCT   reduce using rule 175 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_HEX   reduce using rule 175 (assignment_operator -> TIMESEQUAL .)
    FLOAT_CONST     reduce using rule 175 (assignment_operator -> TIMESEQUAL .)
    HEX_FLOAT_CONST reduce using rule 175 (assignment_operator -> TIMESEQUAL .)
    CHAR_CONST      reduce using rule 175 (assignment_operator -> TIMESEQUAL .)
    WCHAR_CONST     reduce using rule 175 (assignment_operator -> TIMESEQUAL .)
    STRING_LITERAL  reduce using rule 175 (assignment_operator -> TIMESEQUAL .)
    WSTRING_LITERAL reduce using rule 175 (assignment_operator -> TIMESEQUAL .)


state 251

    (181) assignment_operator -> RSHIFTEQUAL .

    PLUSPLUS        reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)
    SIZEOF          reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)
    LPAREN          reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)
    AND             reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)
    TIMES           reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)
    NOT             reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)
    LNOT            reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)
    ID              reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_DEC   reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_OCT   reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_HEX   reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)
    FLOAT_CONST     reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)
    HEX_FLOAT_CONST reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)
    CHAR_CONST      reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)
    WCHAR_CONST     reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)
    STRING_LITERAL  reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)
    WSTRING_LITERAL reduce using rule 181 (assignment_operator -> RSHIFTEQUAL .)


state 252

    (180) assignment_operator -> LSHIFTEQUAL .

    PLUSPLUS        reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)
    SIZEOF          reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)
    LPAREN          reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)
    AND             reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)
    TIMES           reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)
    NOT             reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)
    LNOT            reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)
    ID              reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_DEC   reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_OCT   reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_HEX   reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)
    FLOAT_CONST     reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)
    HEX_FLOAT_CONST reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)
    CHAR_CONST      reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)
    WCHAR_CONST     reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)
    STRING_LITERAL  reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)
    WSTRING_LITERAL reduce using rule 180 (assignment_operator -> LSHIFTEQUAL .)


state 253

    (183) assignment_operator -> OREQUAL .

    PLUSPLUS        reduce using rule 183 (assignment_operator -> OREQUAL .)
    MINUSMINUS      reduce using rule 183 (assignment_operator -> OREQUAL .)
    SIZEOF          reduce using rule 183 (assignment_operator -> OREQUAL .)
    LPAREN          reduce using rule 183 (assignment_operator -> OREQUAL .)
    AND             reduce using rule 183 (assignment_operator -> OREQUAL .)
    TIMES           reduce using rule 183 (assignment_operator -> OREQUAL .)
    PLUS            reduce using rule 183 (assignment_operator -> OREQUAL .)
    MINUS           reduce using rule 183 (assignment_operator -> OREQUAL .)
    NOT             reduce using rule 183 (assignment_operator -> OREQUAL .)
    LNOT            reduce using rule 183 (assignment_operator -> OREQUAL .)
    ID              reduce using rule 183 (assignment_operator -> OREQUAL .)
    INT_CONST_DEC   reduce using rule 183 (assignment_operator -> OREQUAL .)
    INT_CONST_OCT   reduce using rule 183 (assignment_operator -> OREQUAL .)
    INT_CONST_HEX   reduce using rule 183 (assignment_operator -> OREQUAL .)
    FLOAT_CONST     reduce using rule 183 (assignment_operator -> OREQUAL .)
    HEX_FLOAT_CONST reduce using rule 183 (assignment_operator -> OREQUAL .)
    CHAR_CONST      reduce using rule 183 (assignment_operator -> OREQUAL .)
    WCHAR_CONST     reduce using rule 183 (assignment_operator -> OREQUAL .)
    STRING_LITERAL  reduce using rule 183 (assignment_operator -> OREQUAL .)
    WSTRING_LITERAL reduce using rule 183 (assignment_operator -> OREQUAL .)


state 254

    (173) assignment_operator -> EQUALS .

    PLUSPLUS        reduce using rule 173 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 173 (assignment_operator -> EQUALS .)
    SIZEOF          reduce using rule 173 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 173 (assignment_operator -> EQUALS .)
    AND             reduce using rule 173 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 173 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 173 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 173 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 173 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 173 (assignment_operator -> EQUALS .)
    ID              reduce using rule 173 (assignment_operator -> EQUALS .)
    INT_CONST_DEC   reduce using rule 173 (assignment_operator -> EQUALS .)
    INT_CONST_OCT   reduce using rule 173 (assignment_operator -> EQUALS .)
    INT_CONST_HEX   reduce using rule 173 (assignment_operator -> EQUALS .)
    FLOAT_CONST     reduce using rule 173 (assignment_operator -> EQUALS .)
    HEX_FLOAT_CONST reduce using rule 173 (assignment_operator -> EQUALS .)
    CHAR_CONST      reduce using rule 173 (assignment_operator -> EQUALS .)
    WCHAR_CONST     reduce using rule 173 (assignment_operator -> EQUALS .)
    STRING_LITERAL  reduce using rule 173 (assignment_operator -> EQUALS .)
    WSTRING_LITERAL reduce using rule 173 (assignment_operator -> EQUALS .)


state 255

    (182) assignment_operator -> ANDEQUAL .

    PLUSPLUS        reduce using rule 182 (assignment_operator -> ANDEQUAL .)
    MINUSMINUS      reduce using rule 182 (assignment_operator -> ANDEQUAL .)
    SIZEOF          reduce using rule 182 (assignment_operator -> ANDEQUAL .)
    LPAREN          reduce using rule 182 (assignment_operator -> ANDEQUAL .)
    AND             reduce using rule 182 (assignment_operator -> ANDEQUAL .)
    TIMES           reduce using rule 182 (assignment_operator -> ANDEQUAL .)
    PLUS            reduce using rule 182 (assignment_operator -> ANDEQUAL .)
    MINUS           reduce using rule 182 (assignment_operator -> ANDEQUAL .)
    NOT             reduce using rule 182 (assignment_operator -> ANDEQUAL .)
    LNOT            reduce using rule 182 (assignment_operator -> ANDEQUAL .)
    ID              reduce using rule 182 (assignment_operator -> ANDEQUAL .)
    INT_CONST_DEC   reduce using rule 182 (assignment_operator -> ANDEQUAL .)
    INT_CONST_OCT   reduce using rule 182 (assignment_operator -> ANDEQUAL .)
    INT_CONST_HEX   reduce using rule 182 (assignment_operator -> ANDEQUAL .)
    FLOAT_CONST     reduce using rule 182 (assignment_operator -> ANDEQUAL .)
    HEX_FLOAT_CONST reduce using rule 182 (assignment_operator -> ANDEQUAL .)
    CHAR_CONST      reduce using rule 182 (assignment_operator -> ANDEQUAL .)
    WCHAR_CONST     reduce using rule 182 (assignment_operator -> ANDEQUAL .)
    STRING_LITERAL  reduce using rule 182 (assignment_operator -> ANDEQUAL .)
    WSTRING_LITERAL reduce using rule 182 (assignment_operator -> ANDEQUAL .)


state 256

    (178) assignment_operator -> PLUSEQUAL .

    PLUSPLUS        reduce using rule 178 (assignment_operator -> PLUSEQUAL .)
    MINUSMINUS      reduce using rule 178 (assignment_operator -> PLUSEQUAL .)
    SIZEOF          reduce using rule 178 (assignment_operator -> PLUSEQUAL .)
    LPAREN          reduce using rule 178 (assignment_operator -> PLUSEQUAL .)
    AND             reduce using rule 178 (assignment_operator -> PLUSEQUAL .)
    TIMES           reduce using rule 178 (assignment_operator -> PLUSEQUAL .)
    PLUS            reduce using rule 178 (assignment_operator -> PLUSEQUAL .)
    MINUS           reduce using rule 178 (assignment_operator -> PLUSEQUAL .)
    NOT             reduce using rule 178 (assignment_operator -> PLUSEQUAL .)
    LNOT            reduce using rule 178 (assignment_operator -> PLUSEQUAL .)
    ID              reduce using rule 178 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_DEC   reduce using rule 178 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_OCT   reduce using rule 178 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_HEX   reduce using rule 178 (assignment_operator -> PLUSEQUAL .)
    FLOAT_CONST     reduce using rule 178 (assignment_operator -> PLUSEQUAL .)
    HEX_FLOAT_CONST reduce using rule 178 (assignment_operator -> PLUSEQUAL .)
    CHAR_CONST      reduce using rule 178 (assignment_operator -> PLUSEQUAL .)
    WCHAR_CONST     reduce using rule 178 (assignment_operator -> PLUSEQUAL .)
    STRING_LITERAL  reduce using rule 178 (assignment_operator -> PLUSEQUAL .)
    WSTRING_LITERAL reduce using rule 178 (assignment_operator -> PLUSEQUAL .)


state 257

    (174) assignment_operator -> XOREQUAL .

    PLUSPLUS        reduce using rule 174 (assignment_operator -> XOREQUAL .)
    MINUSMINUS      reduce using rule 174 (assignment_operator -> XOREQUAL .)
    SIZEOF          reduce using rule 174 (assignment_operator -> XOREQUAL .)
    LPAREN          reduce using rule 174 (assignment_operator -> XOREQUAL .)
    AND             reduce using rule 174 (assignment_operator -> XOREQUAL .)
    TIMES           reduce using rule 174 (assignment_operator -> XOREQUAL .)
    PLUS            reduce using rule 174 (assignment_operator -> XOREQUAL .)
    MINUS           reduce using rule 174 (assignment_operator -> XOREQUAL .)
    NOT             reduce using rule 174 (assignment_operator -> XOREQUAL .)
    LNOT            reduce using rule 174 (assignment_operator -> XOREQUAL .)
    ID              reduce using rule 174 (assignment_operator -> XOREQUAL .)
    INT_CONST_DEC   reduce using rule 174 (assignment_operator -> XOREQUAL .)
    INT_CONST_OCT   reduce using rule 174 (assignment_operator -> XOREQUAL .)
    INT_CONST_HEX   reduce using rule 174 (assignment_operator -> XOREQUAL .)
    FLOAT_CONST     reduce using rule 174 (assignment_operator -> XOREQUAL .)
    HEX_FLOAT_CONST reduce using rule 174 (assignment_operator -> XOREQUAL .)
    CHAR_CONST      reduce using rule 174 (assignment_operator -> XOREQUAL .)
    WCHAR_CONST     reduce using rule 174 (assignment_operator -> XOREQUAL .)
    STRING_LITERAL  reduce using rule 174 (assignment_operator -> XOREQUAL .)
    WSTRING_LITERAL reduce using rule 174 (assignment_operator -> XOREQUAL .)


state 258

    (172) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    conditional_expression         shift and go to state 145
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 136
    assignment_expression          shift and go to state 345
    cast_expression                shift and go to state 142

state 259

    (179) assignment_operator -> MINUSEQUAL .

    PLUSPLUS        reduce using rule 179 (assignment_operator -> MINUSEQUAL .)
    MINUSMINUS      reduce using rule 179 (assignment_operator -> MINUSEQUAL .)
    SIZEOF          reduce using rule 179 (assignment_operator -> MINUSEQUAL .)
    LPAREN          reduce using rule 179 (assignment_operator -> MINUSEQUAL .)
    AND             reduce using rule 179 (assignment_operator -> MINUSEQUAL .)
    TIMES           reduce using rule 179 (assignment_operator -> MINUSEQUAL .)
    PLUS            reduce using rule 179 (assignment_operator -> MINUSEQUAL .)
    MINUS           reduce using rule 179 (assignment_operator -> MINUSEQUAL .)
    NOT             reduce using rule 179 (assignment_operator -> MINUSEQUAL .)
    LNOT            reduce using rule 179 (assignment_operator -> MINUSEQUAL .)
    ID              reduce using rule 179 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_DEC   reduce using rule 179 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_OCT   reduce using rule 179 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_HEX   reduce using rule 179 (assignment_operator -> MINUSEQUAL .)
    FLOAT_CONST     reduce using rule 179 (assignment_operator -> MINUSEQUAL .)
    HEX_FLOAT_CONST reduce using rule 179 (assignment_operator -> MINUSEQUAL .)
    CHAR_CONST      reduce using rule 179 (assignment_operator -> MINUSEQUAL .)
    WCHAR_CONST     reduce using rule 179 (assignment_operator -> MINUSEQUAL .)
    STRING_LITERAL  reduce using rule 179 (assignment_operator -> MINUSEQUAL .)
    WSTRING_LITERAL reduce using rule 179 (assignment_operator -> MINUSEQUAL .)


state 260

    (110) direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    CONST           reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    RESTRICT        reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    VOLATILE        reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    VOID            reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    _BOOL           reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    CHAR            reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    SHORT           reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    INT             reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    LONG            reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    FLOAT           reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    DOUBLE          reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    _COMPLEX        reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    SIGNED          reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    UNSIGNED        reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    AUTO            reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    REGISTER        reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    STATIC          reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    EXTERN          reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    TYPEDEF         reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    INLINE          reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    TYPEID          reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    ENUM            reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    STRUCT          reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    UNION           reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    LBRACE          reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    EQUALS          reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    SEMI            reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)
    COLON           reduce using rule 110 (direct_declarator -> direct_declarator LBRACKET assignment_expression_opt RBRACKET .)


state 261

    (207) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (228) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list COMMA brace_close
    (234) primary_expression -> LPAREN . expression RPAREN
    (136) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (79) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (80) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    primary_expression             shift and go to state 115
    struct_or_union_specifier      shift and go to state 31
    postfix_expression             shift and go to state 136
    specifier_qualifier_list       shift and go to state 238
    conditional_expression         shift and go to state 145
    enum_specifier                 shift and go to state 8
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    type_qualifier                 shift and go to state 99
    type_specifier                 shift and go to state 100
    constant                       shift and go to state 124
    expression                     shift and go to state 239
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    type_name                      shift and go to state 346
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    cast_expression                shift and go to state 142
    assignment_expression          shift and go to state 159
    typedef_name                   shift and go to state 48
    struct_or_union                shift and go to state 29

state 262

    (206) cast_expression -> unary_expression .

    CONDOP          reduce using rule 206 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 206 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 206 (cast_expression -> unary_expression .)
    MOD             reduce using rule 206 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 206 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 206 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 206 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 206 (cast_expression -> unary_expression .)
    LT              reduce using rule 206 (cast_expression -> unary_expression .)
    LE              reduce using rule 206 (cast_expression -> unary_expression .)
    GE              reduce using rule 206 (cast_expression -> unary_expression .)
    GT              reduce using rule 206 (cast_expression -> unary_expression .)
    EQ              reduce using rule 206 (cast_expression -> unary_expression .)
    NE              reduce using rule 206 (cast_expression -> unary_expression .)
    AND             reduce using rule 206 (cast_expression -> unary_expression .)
    OR              reduce using rule 206 (cast_expression -> unary_expression .)
    XOR             reduce using rule 206 (cast_expression -> unary_expression .)
    LAND            reduce using rule 206 (cast_expression -> unary_expression .)
    LOR             reduce using rule 206 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 206 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 206 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 206 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 206 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 206 (cast_expression -> unary_expression .)
    COLON           reduce using rule 206 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 206 (cast_expression -> unary_expression .)
    XOREQUAL        reduce using rule 206 (cast_expression -> unary_expression .)
    TIMESEQUAL      reduce using rule 206 (cast_expression -> unary_expression .)
    DIVEQUAL        reduce using rule 206 (cast_expression -> unary_expression .)
    MODEQUAL        reduce using rule 206 (cast_expression -> unary_expression .)
    PLUSEQUAL       reduce using rule 206 (cast_expression -> unary_expression .)
    MINUSEQUAL      reduce using rule 206 (cast_expression -> unary_expression .)
    LSHIFTEQUAL     reduce using rule 206 (cast_expression -> unary_expression .)
    RSHIFTEQUAL     reduce using rule 206 (cast_expression -> unary_expression .)
    ANDEQUAL        reduce using rule 206 (cast_expression -> unary_expression .)
    OREQUAL         reduce using rule 206 (cast_expression -> unary_expression .)


state 263

    (211) unary_expression -> unary_operator cast_expression .

    TIMES           reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    CONDOP          reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    XOREQUAL        reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    TIMESEQUAL      reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    DIVEQUAL        reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    MODEQUAL        reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    PLUSEQUAL       reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    MINUSEQUAL      reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    LSHIFTEQUAL     reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    RSHIFTEQUAL     reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    ANDEQUAL        reduce using rule 211 (unary_expression -> unary_operator cast_expression .)
    OREQUAL         reduce using rule 211 (unary_expression -> unary_operator cast_expression .)


state 264

    (99) enum_specifier -> ENUM ID brace_open enumerator_list brace_close .

    CONST           reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    RESTRICT        reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    VOLATILE        reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    VOID            reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    _BOOL           reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    CHAR            reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    SHORT           reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    INT             reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    LONG            reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    FLOAT           reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    DOUBLE          reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    _COMPLEX        reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    SIGNED          reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    UNSIGNED        reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    AUTO            reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    REGISTER        reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    STATIC          reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    EXTERN          reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    TYPEDEF         reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    INLINE          reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    TYPEID          reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    ENUM            reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    STRUCT          reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    UNION           reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    ID              reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    LPAREN          reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    TIMES           reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    LBRACKET        reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    COMMA           reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    RPAREN          reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    COLON           reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    SEMI            reduce using rule 99 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)


state 265

    (100) enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .

    CONST           reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    RESTRICT        reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    VOLATILE        reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    VOID            reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    _BOOL           reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    CHAR            reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    SHORT           reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    INT             reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    LONG            reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    FLOAT           reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    DOUBLE          reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    _COMPLEX        reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    SIGNED          reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    UNSIGNED        reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    AUTO            reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    REGISTER        reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    STATIC          reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    EXTERN          reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    TYPEDEF         reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    INLINE          reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    TYPEID          reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    ENUM            reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    STRUCT          reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    UNION           reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    ID              reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    LPAREN          reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    TIMES           reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    LBRACKET        reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    COMMA           reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    RPAREN          reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    COLON           reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    SEMI            reduce using rule 100 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)


state 266

    (105) enumerator -> ID EQUALS constant_expression .

    COMMA           reduce using rule 105 (enumerator -> ID EQUALS constant_expression .)
    RBRACE          reduce using rule 105 (enumerator -> ID EQUALS constant_expression .)


state 267

    (184) constant_expression -> conditional_expression .

    COLON           reduce using rule 184 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 184 (constant_expression -> conditional_expression .)
    RBRACE          reduce using rule 184 (constant_expression -> conditional_expression .)
    SEMI            reduce using rule 184 (constant_expression -> conditional_expression .)
    RBRACKET        reduce using rule 184 (constant_expression -> conditional_expression .)


state 268

    (103) enumerator_list -> enumerator_list COMMA enumerator .

    COMMA           reduce using rule 103 (enumerator_list -> enumerator_list COMMA enumerator .)
    RBRACE          reduce using rule 103 (enumerator_list -> enumerator_list COMMA enumerator .)


state 269

    (159) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMI

    WHILE           shift and go to state 347


state 270

    (13) expression_opt -> empty .

    SEMI            reduce using rule 13 (expression_opt -> empty .)
    RPAREN          reduce using rule 13 (expression_opt -> empty .)


state 271

    (157) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    binary_expression              shift and go to state 128
    unary_operator                 shift and go to state 146
    expression                     shift and go to state 348
    conditional_expression         shift and go to state 145
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    assignment_expression          shift and go to state 159
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 272

    (164) jump_statement -> CONTINUE SEMI .

    ID              reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    CASE            reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    IF              reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    DO              reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    FOR             reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    GOTO            reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    CONST           reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    RESTRICT        reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    VOLATILE        reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    VOID            reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    _BOOL           reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    CHAR            reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    SHORT           reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    INT             reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    LONG            reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    FLOAT           reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    DOUBLE          reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    _COMPLEX        reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    SIGNED          reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    UNSIGNED        reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    AUTO            reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    REGISTER        reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    STATIC          reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    EXTERN          reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    TYPEDEF         reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    INLINE          reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    TYPEID          reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    ENUM            reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    STRUCT          reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    UNION           reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    PLUSPLUS        reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    MINUSMINUS      reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    SIZEOF          reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    AND             reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    TIMES           reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    NOT             reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    LNOT            reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_DEC   reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_OCT   reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_HEX   reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    FLOAT_CONST     reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    HEX_FLOAT_CONST reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    CHAR_CONST      reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    WCHAR_CONST     reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    STRING_LITERAL  reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    WSTRING_LITERAL reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    RBRACE          reduce using rule 164 (jump_statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 164 (jump_statement -> CONTINUE SEMI .)


state 273

    (152) labeled_statement -> ID COLON . statement
    (38) statement -> . labeled_statement
    (39) statement -> . expression_statement
    (40) statement -> . compound_statement
    (41) statement -> . selection_statement
    (42) statement -> . iteration_statement
    (43) statement -> . jump_statement
    (152) labeled_statement -> . ID COLON statement
    (153) labeled_statement -> . CASE constant_expression COLON statement
    (154) labeled_statement -> . DEFAULT COLON statement
    (167) expression_statement -> . expression_opt SEMI
    (151) compound_statement -> . brace_open block_item_list_opt brace_close
    (155) selection_statement -> . IF LPAREN expression RPAREN statement
    (156) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (157) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (158) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (159) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (160) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (161) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (162) jump_statement -> . GOTO ID SEMI
    (163) jump_statement -> . BREAK SEMI
    (164) jump_statement -> . CONTINUE SEMI
    (165) jump_statement -> . RETURN expression SEMI
    (166) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (249) brace_open -> . LBRACE
    (251) empty -> .
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 160
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 165
    IF              shift and go to state 161
    SWITCH          shift and go to state 155
    WHILE           shift and go to state 180
    DO              shift and go to state 154
    FOR             shift and go to state 164
    GOTO            shift and go to state 167
    BREAK           shift and go to state 177
    CONTINUE        shift and go to state 158
    RETURN          shift and go to state 179
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 251 (empty -> .)
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    expression_opt                 shift and go to state 173
    compound_statement             shift and go to state 163
    brace_open                     shift and go to state 91
    jump_statement                 shift and go to state 174
    postfix_expression             shift and go to state 136
    expression                     shift and go to state 175
    conditional_expression         shift and go to state 145
    statement                      shift and go to state 349
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    cast_expression                shift and go to state 142
    labeled_statement              shift and go to state 169
    unified_string_literal         shift and go to state 125
    iteration_statement            shift and go to state 156
    unary_operator                 shift and go to state 146
    selection_statement            shift and go to state 157
    empty                          shift and go to state 270
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    expression_statement           shift and go to state 178
    assignment_expression          shift and go to state 159

state 274

    (155) selection_statement -> IF LPAREN . expression RPAREN statement
    (156) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    binary_expression              shift and go to state 128
    unary_operator                 shift and go to state 146
    expression                     shift and go to state 350
    conditional_expression         shift and go to state 145
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    assignment_expression          shift and go to state 159
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 275

    (160) iteration_statement -> FOR LPAREN . expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (161) iteration_statement -> FOR LPAREN . declaration expression_opt SEMI expression_opt RPAREN statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (45) declaration -> . decl_body SEMI
    (251) empty -> .
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (44) decl_body -> . declaration_specifiers init_declarator_list_opt
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (48) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (49) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (50) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (51) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (52) storage_class_specifier -> . AUTO
    (53) storage_class_specifier -> . REGISTER
    (54) storage_class_specifier -> . STATIC
    (55) storage_class_specifier -> . EXTERN
    (56) storage_class_specifier -> . TYPEDEF
    (57) function_specifier -> . INLINE
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    SEMI            reduce using rule 251 (empty -> .)
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    AUTO            shift and go to state 35
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 4
    EXTERN          shift and go to state 34
    TYPEDEF         shift and go to state 42
    INLINE          shift and go to state 16
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    primary_expression             shift and go to state 115
    expression_opt                 shift and go to state 352
    struct_or_union_specifier      shift and go to state 31
    storage_class_specifier        shift and go to state 7
    postfix_expression             shift and go to state 136
    expression                     shift and go to state 175
    conditional_expression         shift and go to state 145
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    decl_body                      shift and go to state 38
    type_qualifier                 shift and go to state 39
    cast_expression                shift and go to state 142
    constant                       shift and go to state 124
    struct_or_union                shift and go to state 29
    declaration                    shift and go to state 351
    unified_string_literal         shift and go to state 125
    function_specifier             shift and go to state 20
    unary_operator                 shift and go to state 146
    empty                          shift and go to state 270
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    type_specifier                 shift and go to state 14
    assignment_expression          shift and go to state 159
    declaration_specifiers         shift and go to state 68
    typedef_name                   shift and go to state 48
    enum_specifier                 shift and go to state 8

state 276

    (154) labeled_statement -> DEFAULT COLON . statement
    (38) statement -> . labeled_statement
    (39) statement -> . expression_statement
    (40) statement -> . compound_statement
    (41) statement -> . selection_statement
    (42) statement -> . iteration_statement
    (43) statement -> . jump_statement
    (152) labeled_statement -> . ID COLON statement
    (153) labeled_statement -> . CASE constant_expression COLON statement
    (154) labeled_statement -> . DEFAULT COLON statement
    (167) expression_statement -> . expression_opt SEMI
    (151) compound_statement -> . brace_open block_item_list_opt brace_close
    (155) selection_statement -> . IF LPAREN expression RPAREN statement
    (156) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (157) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (158) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (159) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (160) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (161) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (162) jump_statement -> . GOTO ID SEMI
    (163) jump_statement -> . BREAK SEMI
    (164) jump_statement -> . CONTINUE SEMI
    (165) jump_statement -> . RETURN expression SEMI
    (166) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (249) brace_open -> . LBRACE
    (251) empty -> .
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 160
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 165
    IF              shift and go to state 161
    SWITCH          shift and go to state 155
    WHILE           shift and go to state 180
    DO              shift and go to state 154
    FOR             shift and go to state 164
    GOTO            shift and go to state 167
    BREAK           shift and go to state 177
    CONTINUE        shift and go to state 158
    RETURN          shift and go to state 179
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 251 (empty -> .)
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    expression_opt                 shift and go to state 173
    compound_statement             shift and go to state 163
    brace_open                     shift and go to state 91
    jump_statement                 shift and go to state 174
    postfix_expression             shift and go to state 136
    expression                     shift and go to state 175
    conditional_expression         shift and go to state 145
    statement                      shift and go to state 353
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    cast_expression                shift and go to state 142
    labeled_statement              shift and go to state 169
    unified_string_literal         shift and go to state 125
    iteration_statement            shift and go to state 156
    unary_operator                 shift and go to state 146
    selection_statement            shift and go to state 157
    empty                          shift and go to state 270
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    expression_statement           shift and go to state 178
    assignment_expression          shift and go to state 159

state 277

    (162) jump_statement -> GOTO ID . SEMI

    SEMI            shift and go to state 354


state 278

    (153) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 355


state 279

    (150) block_item_list -> block_item_list block_item .

    ID              reduce using rule 150 (block_item_list -> block_item_list block_item .)
    CASE            reduce using rule 150 (block_item_list -> block_item_list block_item .)
    DEFAULT         reduce using rule 150 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 150 (block_item_list -> block_item_list block_item .)
    SWITCH          reduce using rule 150 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 150 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 150 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 150 (block_item_list -> block_item_list block_item .)
    GOTO            reduce using rule 150 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 150 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 150 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 150 (block_item_list -> block_item_list block_item .)
    LBRACE          reduce using rule 150 (block_item_list -> block_item_list block_item .)
    CONST           reduce using rule 150 (block_item_list -> block_item_list block_item .)
    RESTRICT        reduce using rule 150 (block_item_list -> block_item_list block_item .)
    VOLATILE        reduce using rule 150 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 150 (block_item_list -> block_item_list block_item .)
    _BOOL           reduce using rule 150 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 150 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 150 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 150 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 150 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 150 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 150 (block_item_list -> block_item_list block_item .)
    _COMPLEX        reduce using rule 150 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 150 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 150 (block_item_list -> block_item_list block_item .)
    AUTO            reduce using rule 150 (block_item_list -> block_item_list block_item .)
    REGISTER        reduce using rule 150 (block_item_list -> block_item_list block_item .)
    STATIC          reduce using rule 150 (block_item_list -> block_item_list block_item .)
    EXTERN          reduce using rule 150 (block_item_list -> block_item_list block_item .)
    TYPEDEF         reduce using rule 150 (block_item_list -> block_item_list block_item .)
    INLINE          reduce using rule 150 (block_item_list -> block_item_list block_item .)
    TYPEID          reduce using rule 150 (block_item_list -> block_item_list block_item .)
    ENUM            reduce using rule 150 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 150 (block_item_list -> block_item_list block_item .)
    UNION           reduce using rule 150 (block_item_list -> block_item_list block_item .)
    PLUSPLUS        reduce using rule 150 (block_item_list -> block_item_list block_item .)
    MINUSMINUS      reduce using rule 150 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 150 (block_item_list -> block_item_list block_item .)
    LPAREN          reduce using rule 150 (block_item_list -> block_item_list block_item .)
    AND             reduce using rule 150 (block_item_list -> block_item_list block_item .)
    TIMES           reduce using rule 150 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 150 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 150 (block_item_list -> block_item_list block_item .)
    NOT             reduce using rule 150 (block_item_list -> block_item_list block_item .)
    LNOT            reduce using rule 150 (block_item_list -> block_item_list block_item .)
    INT_CONST_DEC   reduce using rule 150 (block_item_list -> block_item_list block_item .)
    INT_CONST_OCT   reduce using rule 150 (block_item_list -> block_item_list block_item .)
    INT_CONST_HEX   reduce using rule 150 (block_item_list -> block_item_list block_item .)
    FLOAT_CONST     reduce using rule 150 (block_item_list -> block_item_list block_item .)
    HEX_FLOAT_CONST reduce using rule 150 (block_item_list -> block_item_list block_item .)
    CHAR_CONST      reduce using rule 150 (block_item_list -> block_item_list block_item .)
    WCHAR_CONST     reduce using rule 150 (block_item_list -> block_item_list block_item .)
    STRING_LITERAL  reduce using rule 150 (block_item_list -> block_item_list block_item .)
    WSTRING_LITERAL reduce using rule 150 (block_item_list -> block_item_list block_item .)
    SEMI            reduce using rule 150 (block_item_list -> block_item_list block_item .)
    RBRACE          reduce using rule 150 (block_item_list -> block_item_list block_item .)


state 280

    (167) expression_statement -> expression_opt SEMI .

    ID              reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    CASE            reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    DEFAULT         reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    IF              reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    SWITCH          reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    DO              reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    GOTO            reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    CONTINUE        reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    LBRACE          reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    CONST           reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    RESTRICT        reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    VOLATILE        reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    VOID            reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    _BOOL           reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    CHAR            reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    SHORT           reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    INT             reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    LONG            reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    FLOAT           reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    DOUBLE          reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    _COMPLEX        reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    SIGNED          reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    UNSIGNED        reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    AUTO            reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    REGISTER        reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    STATIC          reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    EXTERN          reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    TYPEDEF         reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    INLINE          reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    TYPEID          reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    ENUM            reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    STRUCT          reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    UNION           reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    PLUSPLUS        reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    MINUSMINUS      reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    SIZEOF          reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    AND             reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    TIMES           reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    PLUS            reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    MINUS           reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    NOT             reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    LNOT            reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    INT_CONST_DEC   reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    INT_CONST_OCT   reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    INT_CONST_HEX   reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    FLOAT_CONST     reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    HEX_FLOAT_CONST reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    CHAR_CONST      reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    WCHAR_CONST     reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    STRING_LITERAL  reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    WSTRING_LITERAL reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    RBRACE          reduce using rule 167 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 167 (expression_statement -> expression_opt SEMI .)


state 281

    (169) expression -> expression COMMA . assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    binary_expression              shift and go to state 128
    unary_operator                 shift and go to state 146
    conditional_expression         shift and go to state 145
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 136
    assignment_expression          shift and go to state 356
    cast_expression                shift and go to state 142

state 282

    (151) compound_statement -> brace_open block_item_list_opt brace_close .

    ID              reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CASE            reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    DEFAULT         reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    IF              reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SWITCH          reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    WHILE           reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    DO              reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    FOR             reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    GOTO            reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    BREAK           reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CONTINUE        reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    RETURN          reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LBRACE          reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CONST           reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    RESTRICT        reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    VOLATILE        reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    VOID            reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    _BOOL           reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CHAR            reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SHORT           reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT             reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LONG            reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    FLOAT           reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    DOUBLE          reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    _COMPLEX        reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SIGNED          reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    UNSIGNED        reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    AUTO            reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    REGISTER        reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    STATIC          reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    EXTERN          reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    TYPEDEF         reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INLINE          reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    TYPEID          reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ENUM            reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    STRUCT          reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    UNION           reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PLUSPLUS        reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    MINUSMINUS      reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SIZEOF          reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LPAREN          reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    AND             reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    TIMES           reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PLUS            reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    MINUS           reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    NOT             reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LNOT            reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_DEC   reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_OCT   reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_HEX   reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    FLOAT_CONST     reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    HEX_FLOAT_CONST reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CHAR_CONST      reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    WCHAR_CONST     reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    STRING_LITERAL  reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    WSTRING_LITERAL reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SEMI            reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    RBRACE          reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ELSE            reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PPHASH          reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)
    $end            reduce using rule 151 (compound_statement -> brace_open block_item_list_opt brace_close .)


state 283

    (163) jump_statement -> BREAK SEMI .

    ID              reduce using rule 163 (jump_statement -> BREAK SEMI .)
    CASE            reduce using rule 163 (jump_statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 163 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 163 (jump_statement -> BREAK SEMI .)
    SWITCH          reduce using rule 163 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 163 (jump_statement -> BREAK SEMI .)
    DO              reduce using rule 163 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 163 (jump_statement -> BREAK SEMI .)
    GOTO            reduce using rule 163 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 163 (jump_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 163 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 163 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 163 (jump_statement -> BREAK SEMI .)
    CONST           reduce using rule 163 (jump_statement -> BREAK SEMI .)
    RESTRICT        reduce using rule 163 (jump_statement -> BREAK SEMI .)
    VOLATILE        reduce using rule 163 (jump_statement -> BREAK SEMI .)
    VOID            reduce using rule 163 (jump_statement -> BREAK SEMI .)
    _BOOL           reduce using rule 163 (jump_statement -> BREAK SEMI .)
    CHAR            reduce using rule 163 (jump_statement -> BREAK SEMI .)
    SHORT           reduce using rule 163 (jump_statement -> BREAK SEMI .)
    INT             reduce using rule 163 (jump_statement -> BREAK SEMI .)
    LONG            reduce using rule 163 (jump_statement -> BREAK SEMI .)
    FLOAT           reduce using rule 163 (jump_statement -> BREAK SEMI .)
    DOUBLE          reduce using rule 163 (jump_statement -> BREAK SEMI .)
    _COMPLEX        reduce using rule 163 (jump_statement -> BREAK SEMI .)
    SIGNED          reduce using rule 163 (jump_statement -> BREAK SEMI .)
    UNSIGNED        reduce using rule 163 (jump_statement -> BREAK SEMI .)
    AUTO            reduce using rule 163 (jump_statement -> BREAK SEMI .)
    REGISTER        reduce using rule 163 (jump_statement -> BREAK SEMI .)
    STATIC          reduce using rule 163 (jump_statement -> BREAK SEMI .)
    EXTERN          reduce using rule 163 (jump_statement -> BREAK SEMI .)
    TYPEDEF         reduce using rule 163 (jump_statement -> BREAK SEMI .)
    INLINE          reduce using rule 163 (jump_statement -> BREAK SEMI .)
    TYPEID          reduce using rule 163 (jump_statement -> BREAK SEMI .)
    ENUM            reduce using rule 163 (jump_statement -> BREAK SEMI .)
    STRUCT          reduce using rule 163 (jump_statement -> BREAK SEMI .)
    UNION           reduce using rule 163 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 163 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 163 (jump_statement -> BREAK SEMI .)
    SIZEOF          reduce using rule 163 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 163 (jump_statement -> BREAK SEMI .)
    AND             reduce using rule 163 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 163 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 163 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 163 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 163 (jump_statement -> BREAK SEMI .)
    LNOT            reduce using rule 163 (jump_statement -> BREAK SEMI .)
    INT_CONST_DEC   reduce using rule 163 (jump_statement -> BREAK SEMI .)
    INT_CONST_OCT   reduce using rule 163 (jump_statement -> BREAK SEMI .)
    INT_CONST_HEX   reduce using rule 163 (jump_statement -> BREAK SEMI .)
    FLOAT_CONST     reduce using rule 163 (jump_statement -> BREAK SEMI .)
    HEX_FLOAT_CONST reduce using rule 163 (jump_statement -> BREAK SEMI .)
    CHAR_CONST      reduce using rule 163 (jump_statement -> BREAK SEMI .)
    WCHAR_CONST     reduce using rule 163 (jump_statement -> BREAK SEMI .)
    STRING_LITERAL  reduce using rule 163 (jump_statement -> BREAK SEMI .)
    WSTRING_LITERAL reduce using rule 163 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 163 (jump_statement -> BREAK SEMI .)
    RBRACE          reduce using rule 163 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 163 (jump_statement -> BREAK SEMI .)


state 284

    (166) jump_statement -> RETURN SEMI .

    ID              reduce using rule 166 (jump_statement -> RETURN SEMI .)
    CASE            reduce using rule 166 (jump_statement -> RETURN SEMI .)
    DEFAULT         reduce using rule 166 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 166 (jump_statement -> RETURN SEMI .)
    SWITCH          reduce using rule 166 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 166 (jump_statement -> RETURN SEMI .)
    DO              reduce using rule 166 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 166 (jump_statement -> RETURN SEMI .)
    GOTO            reduce using rule 166 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 166 (jump_statement -> RETURN SEMI .)
    CONTINUE        reduce using rule 166 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 166 (jump_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 166 (jump_statement -> RETURN SEMI .)
    CONST           reduce using rule 166 (jump_statement -> RETURN SEMI .)
    RESTRICT        reduce using rule 166 (jump_statement -> RETURN SEMI .)
    VOLATILE        reduce using rule 166 (jump_statement -> RETURN SEMI .)
    VOID            reduce using rule 166 (jump_statement -> RETURN SEMI .)
    _BOOL           reduce using rule 166 (jump_statement -> RETURN SEMI .)
    CHAR            reduce using rule 166 (jump_statement -> RETURN SEMI .)
    SHORT           reduce using rule 166 (jump_statement -> RETURN SEMI .)
    INT             reduce using rule 166 (jump_statement -> RETURN SEMI .)
    LONG            reduce using rule 166 (jump_statement -> RETURN SEMI .)
    FLOAT           reduce using rule 166 (jump_statement -> RETURN SEMI .)
    DOUBLE          reduce using rule 166 (jump_statement -> RETURN SEMI .)
    _COMPLEX        reduce using rule 166 (jump_statement -> RETURN SEMI .)
    SIGNED          reduce using rule 166 (jump_statement -> RETURN SEMI .)
    UNSIGNED        reduce using rule 166 (jump_statement -> RETURN SEMI .)
    AUTO            reduce using rule 166 (jump_statement -> RETURN SEMI .)
    REGISTER        reduce using rule 166 (jump_statement -> RETURN SEMI .)
    STATIC          reduce using rule 166 (jump_statement -> RETURN SEMI .)
    EXTERN          reduce using rule 166 (jump_statement -> RETURN SEMI .)
    TYPEDEF         reduce using rule 166 (jump_statement -> RETURN SEMI .)
    INLINE          reduce using rule 166 (jump_statement -> RETURN SEMI .)
    TYPEID          reduce using rule 166 (jump_statement -> RETURN SEMI .)
    ENUM            reduce using rule 166 (jump_statement -> RETURN SEMI .)
    STRUCT          reduce using rule 166 (jump_statement -> RETURN SEMI .)
    UNION           reduce using rule 166 (jump_statement -> RETURN SEMI .)
    PLUSPLUS        reduce using rule 166 (jump_statement -> RETURN SEMI .)
    MINUSMINUS      reduce using rule 166 (jump_statement -> RETURN SEMI .)
    SIZEOF          reduce using rule 166 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 166 (jump_statement -> RETURN SEMI .)
    AND             reduce using rule 166 (jump_statement -> RETURN SEMI .)
    TIMES           reduce using rule 166 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 166 (jump_statement -> RETURN SEMI .)
    MINUS           reduce using rule 166 (jump_statement -> RETURN SEMI .)
    NOT             reduce using rule 166 (jump_statement -> RETURN SEMI .)
    LNOT            reduce using rule 166 (jump_statement -> RETURN SEMI .)
    INT_CONST_DEC   reduce using rule 166 (jump_statement -> RETURN SEMI .)
    INT_CONST_OCT   reduce using rule 166 (jump_statement -> RETURN SEMI .)
    INT_CONST_HEX   reduce using rule 166 (jump_statement -> RETURN SEMI .)
    FLOAT_CONST     reduce using rule 166 (jump_statement -> RETURN SEMI .)
    HEX_FLOAT_CONST reduce using rule 166 (jump_statement -> RETURN SEMI .)
    CHAR_CONST      reduce using rule 166 (jump_statement -> RETURN SEMI .)
    WCHAR_CONST     reduce using rule 166 (jump_statement -> RETURN SEMI .)
    STRING_LITERAL  reduce using rule 166 (jump_statement -> RETURN SEMI .)
    WSTRING_LITERAL reduce using rule 166 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 166 (jump_statement -> RETURN SEMI .)
    RBRACE          reduce using rule 166 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 166 (jump_statement -> RETURN SEMI .)


state 285

    (165) jump_statement -> RETURN expression . SEMI
    (169) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 357
    COMMA           shift and go to state 281


state 286

    (158) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    binary_expression              shift and go to state 128
    unary_operator                 shift and go to state 146
    expression                     shift and go to state 358
    conditional_expression         shift and go to state 145
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    assignment_expression          shift and go to state 159
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 287

    (84) struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .

    CONST           reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    RESTRICT        reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    VOLATILE        reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    VOID            reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    _BOOL           reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    CHAR            reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    SHORT           reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    INT             reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    LONG            reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    FLOAT           reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    DOUBLE          reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    _COMPLEX        reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    SIGNED          reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    UNSIGNED        reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    AUTO            reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    REGISTER        reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    STATIC          reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    EXTERN          reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    TYPEDEF         reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    INLINE          reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    TYPEID          reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    ENUM            reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    STRUCT          reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    UNION           reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    ID              reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    LPAREN          reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    TIMES           reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    SEMI            reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    LBRACKET        reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    COMMA           reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    RPAREN          reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    COLON           reduce using rule 84 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)


state 288

    (85) struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .

    CONST           reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    RESTRICT        reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    VOLATILE        reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    VOID            reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    _BOOL           reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    CHAR            reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    SHORT           reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    INT             reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    LONG            reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    FLOAT           reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    DOUBLE          reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    _COMPLEX        reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    SIGNED          reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    UNSIGNED        reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    AUTO            reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    REGISTER        reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    STATIC          reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    EXTERN          reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    TYPEDEF         reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    INLINE          reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    TYPEID          reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    ENUM            reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    STRUCT          reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    UNION           reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    ID              reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    LPAREN          reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    TIMES           reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    SEMI            reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    LBRACKET        reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    COMMA           reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    RPAREN          reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    COLON           reduce using rule 85 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)


state 289

    (92) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (93) struct_declarator -> . declarator
    (94) struct_declarator -> . declarator COLON constant_expression
    (95) struct_declarator -> . COLON constant_expression
    (106) declarator -> . direct_declarator
    (107) declarator -> . pointer direct_declarator
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . LPAREN declarator RPAREN
    (110) direct_declarator -> . direct_declarator LBRACKET assignment_expression_opt RBRACKET
    (111) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (112) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (113) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (114) pointer -> . TIMES type_qualifier_list_opt
    (115) pointer -> . TIMES type_qualifier_list_opt pointer

    COLON           shift and go to state 189
    ID              shift and go to state 46
    LPAREN          shift and go to state 32
    TIMES           shift and go to state 11

    pointer                        shift and go to state 28
    struct_declarator              shift and go to state 359
    declarator                     shift and go to state 190
    direct_declarator              shift and go to state 44

state 290

    (90) struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .

    RBRACE          reduce using rule 90 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    CONST           reduce using rule 90 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    RESTRICT        reduce using rule 90 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    VOLATILE        reduce using rule 90 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    VOID            reduce using rule 90 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    _BOOL           reduce using rule 90 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    CHAR            reduce using rule 90 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    SHORT           reduce using rule 90 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    INT             reduce using rule 90 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    LONG            reduce using rule 90 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    FLOAT           reduce using rule 90 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    DOUBLE          reduce using rule 90 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    _COMPLEX        reduce using rule 90 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    SIGNED          reduce using rule 90 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    UNSIGNED        reduce using rule 90 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    TYPEID          reduce using rule 90 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    ENUM            reduce using rule 90 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    STRUCT          reduce using rule 90 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    UNION           reduce using rule 90 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)


state 291

    (95) struct_declarator -> COLON constant_expression .

    COMMA           reduce using rule 95 (struct_declarator -> COLON constant_expression .)
    SEMI            reduce using rule 95 (struct_declarator -> COLON constant_expression .)


state 292

    (94) struct_declarator -> declarator COLON . constant_expression
    (184) constant_expression -> . conditional_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    conditional_expression         shift and go to state 267
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    constant_expression            shift and go to state 360
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 293

    (132) designator_list -> designator .

    EQUALS          reduce using rule 132 (designator_list -> designator .)
    LBRACKET        reduce using rule 132 (designator_list -> designator .)
    PERIOD          reduce using rule 132 (designator_list -> designator .)


state 294

    (12) designation_opt -> designation .

    LBRACE          reduce using rule 12 (designation_opt -> designation .)
    PLUSPLUS        reduce using rule 12 (designation_opt -> designation .)
    MINUSMINUS      reduce using rule 12 (designation_opt -> designation .)
    SIZEOF          reduce using rule 12 (designation_opt -> designation .)
    LPAREN          reduce using rule 12 (designation_opt -> designation .)
    AND             reduce using rule 12 (designation_opt -> designation .)
    TIMES           reduce using rule 12 (designation_opt -> designation .)
    PLUS            reduce using rule 12 (designation_opt -> designation .)
    MINUS           reduce using rule 12 (designation_opt -> designation .)
    NOT             reduce using rule 12 (designation_opt -> designation .)
    LNOT            reduce using rule 12 (designation_opt -> designation .)
    ID              reduce using rule 12 (designation_opt -> designation .)
    INT_CONST_DEC   reduce using rule 12 (designation_opt -> designation .)
    INT_CONST_OCT   reduce using rule 12 (designation_opt -> designation .)
    INT_CONST_HEX   reduce using rule 12 (designation_opt -> designation .)
    FLOAT_CONST     reduce using rule 12 (designation_opt -> designation .)
    HEX_FLOAT_CONST reduce using rule 12 (designation_opt -> designation .)
    CHAR_CONST      reduce using rule 12 (designation_opt -> designation .)
    WCHAR_CONST     reduce using rule 12 (designation_opt -> designation .)
    STRING_LITERAL  reduce using rule 12 (designation_opt -> designation .)
    WSTRING_LITERAL reduce using rule 12 (designation_opt -> designation .)


state 295

    (127) initializer -> brace_open initializer_list . brace_close
    (128) initializer -> brace_open initializer_list . COMMA brace_close
    (130) initializer_list -> initializer_list . COMMA designation_opt initializer
    (250) brace_close -> . RBRACE

    COMMA           shift and go to state 361
    RBRACE          shift and go to state 150

    brace_close                    shift and go to state 362

state 296

    (129) initializer_list -> designation_opt . initializer
    (126) initializer -> . assignment_expression
    (127) initializer -> . brace_open initializer_list brace_close
    (128) initializer -> . brace_open initializer_list COMMA brace_close
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (249) brace_open -> . LBRACE
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LBRACE          shift and go to state 54
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    brace_open                     shift and go to state 197
    binary_expression              shift and go to state 128
    conditional_expression         shift and go to state 145
    unary_operator                 shift and go to state 146
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    assignment_expression          shift and go to state 198
    postfix_expression             shift and go to state 136
    initializer                    shift and go to state 363
    cast_expression                shift and go to state 142

state 297

    (11) designation_opt -> empty .

    LBRACE          reduce using rule 11 (designation_opt -> empty .)
    PLUSPLUS        reduce using rule 11 (designation_opt -> empty .)
    MINUSMINUS      reduce using rule 11 (designation_opt -> empty .)
    SIZEOF          reduce using rule 11 (designation_opt -> empty .)
    LPAREN          reduce using rule 11 (designation_opt -> empty .)
    AND             reduce using rule 11 (designation_opt -> empty .)
    TIMES           reduce using rule 11 (designation_opt -> empty .)
    PLUS            reduce using rule 11 (designation_opt -> empty .)
    MINUS           reduce using rule 11 (designation_opt -> empty .)
    NOT             reduce using rule 11 (designation_opt -> empty .)
    LNOT            reduce using rule 11 (designation_opt -> empty .)
    ID              reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_DEC   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_OCT   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_HEX   reduce using rule 11 (designation_opt -> empty .)
    FLOAT_CONST     reduce using rule 11 (designation_opt -> empty .)
    HEX_FLOAT_CONST reduce using rule 11 (designation_opt -> empty .)
    CHAR_CONST      reduce using rule 11 (designation_opt -> empty .)
    WCHAR_CONST     reduce using rule 11 (designation_opt -> empty .)
    STRING_LITERAL  reduce using rule 11 (designation_opt -> empty .)
    WSTRING_LITERAL reduce using rule 11 (designation_opt -> empty .)


state 298

    (135) designator -> PERIOD . identifier
    (237) identifier -> . ID

    ID              shift and go to state 111

    identifier                     shift and go to state 364

state 299

    (131) designation -> designator_list . EQUALS
    (133) designator_list -> designator_list . designator
    (134) designator -> . LBRACKET constant_expression RBRACKET
    (135) designator -> . PERIOD identifier

    EQUALS          shift and go to state 365
    LBRACKET        shift and go to state 300
    PERIOD          shift and go to state 298

    designator                     shift and go to state 366

state 300

    (134) designator -> LBRACKET . constant_expression RBRACKET
    (184) constant_expression -> . conditional_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    binary_expression              shift and go to state 128
    unary_operator                 shift and go to state 146
    conditional_expression         shift and go to state 267
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    constant_expression            shift and go to state 367
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 301

    (125) identifier_list -> identifier_list COMMA identifier .

    COMMA           reduce using rule 125 (identifier_list -> identifier_list COMMA identifier .)
    RPAREN          reduce using rule 125 (identifier_list -> identifier_list COMMA identifier .)


state 302

    (121) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 121 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 121 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 303

    (119) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RPAREN          reduce using rule 119 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 304

    (138) abstract_declarator -> pointer direct_abstract_declarator .
    (141) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET assignment_expression_opt RBRACKET
    (143) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET TIMES RBRACKET
    (145) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list_opt RPAREN

    RPAREN          reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    COMMA           reduce using rule 138 (abstract_declarator -> pointer direct_abstract_declarator .)
    LBRACKET        shift and go to state 306
    LPAREN          shift and go to state 305


state 305

    (145) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list_opt RPAREN
    (19) parameter_type_list_opt -> . empty
    (20) parameter_type_list_opt -> . parameter_type_list
    (251) empty -> .
    (118) parameter_type_list -> . parameter_list
    (119) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (120) parameter_list -> . parameter_declaration
    (121) parameter_list -> . parameter_list COMMA parameter_declaration
    (122) parameter_declaration -> . declaration_specifiers declarator
    (123) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (48) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (49) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (50) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (51) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (52) storage_class_specifier -> . AUTO
    (53) storage_class_specifier -> . REGISTER
    (54) storage_class_specifier -> . STATIC
    (55) storage_class_specifier -> . EXTERN
    (56) storage_class_specifier -> . TYPEDEF
    (57) function_specifier -> . INLINE
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    RPAREN          reduce using rule 251 (empty -> .)
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    AUTO            shift and go to state 35
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 4
    EXTERN          shift and go to state 34
    TYPEDEF         shift and go to state 42
    INLINE          shift and go to state 16
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    storage_class_specifier        shift and go to state 7
    parameter_type_list            shift and go to state 310
    struct_or_union_specifier      shift and go to state 31
    parameter_declaration          shift and go to state 109
    struct_or_union                shift and go to state 29
    parameter_list                 shift and go to state 110
    type_qualifier                 shift and go to state 39
    parameter_type_list_opt        shift and go to state 368
    type_specifier                 shift and go to state 14
    function_specifier             shift and go to state 20
    empty                          shift and go to state 307
    declaration_specifiers         shift and go to state 113
    typedef_name                   shift and go to state 48
    enum_specifier                 shift and go to state 8

state 306

    (141) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . assignment_expression_opt RBRACKET
    (143) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . TIMES RBRACKET
    (3) assignment_expression_opt -> . empty
    (4) assignment_expression_opt -> . assignment_expression
    (251) empty -> .
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    TIMES           shift and go to state 369
    RBRACKET        reduce using rule 251 (empty -> .)
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    primary_expression             shift and go to state 115
    assignment_expression_opt      shift and go to state 370
    postfix_expression             shift and go to state 136
    conditional_expression         shift and go to state 145
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    cast_expression                shift and go to state 142
    constant                       shift and go to state 124
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    empty                          shift and go to state 127
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    assignment_expression          shift and go to state 131

state 307

    (19) parameter_type_list_opt -> empty .

    RPAREN          reduce using rule 19 (parameter_type_list_opt -> empty .)


state 308

    (146) direct_abstract_declarator -> LPAREN parameter_type_list_opt . RPAREN

    RPAREN          shift and go to state 371


state 309

    (140) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN

    RPAREN          shift and go to state 372


state 310

    (20) parameter_type_list_opt -> parameter_type_list .

    RPAREN          reduce using rule 20 (parameter_type_list_opt -> parameter_type_list .)


state 311

    (144) direct_abstract_declarator -> LBRACKET TIMES . RBRACKET
    (215) unary_operator -> TIMES .

    RBRACKET        shift and go to state 373
    LPAREN          reduce using rule 215 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 215 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 215 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 215 (unary_operator -> TIMES .)
    AND             reduce using rule 215 (unary_operator -> TIMES .)
    TIMES           reduce using rule 215 (unary_operator -> TIMES .)
    PLUS            reduce using rule 215 (unary_operator -> TIMES .)
    MINUS           reduce using rule 215 (unary_operator -> TIMES .)
    NOT             reduce using rule 215 (unary_operator -> TIMES .)
    LNOT            reduce using rule 215 (unary_operator -> TIMES .)
    ID              reduce using rule 215 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 215 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 215 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 215 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 215 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 215 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 215 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 215 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 215 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 215 (unary_operator -> TIMES .)


state 312

    (142) direct_abstract_declarator -> LBRACKET assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 374


state 313

    (228) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list COMMA brace_close

    RPAREN          shift and go to state 375


state 314

    (193) binary_expression -> binary_expression RSHIFT binary_expression .
    (188) binary_expression -> binary_expression . TIMES binary_expression
    (189) binary_expression -> binary_expression . DIVIDE binary_expression
    (190) binary_expression -> binary_expression . MOD binary_expression
    (191) binary_expression -> binary_expression . PLUS binary_expression
    (192) binary_expression -> binary_expression . MINUS binary_expression
    (193) binary_expression -> binary_expression . RSHIFT binary_expression
    (194) binary_expression -> binary_expression . LSHIFT binary_expression
    (195) binary_expression -> binary_expression . LT binary_expression
    (196) binary_expression -> binary_expression . LE binary_expression
    (197) binary_expression -> binary_expression . GE binary_expression
    (198) binary_expression -> binary_expression . GT binary_expression
    (199) binary_expression -> binary_expression . EQ binary_expression
    (200) binary_expression -> binary_expression . NE binary_expression
    (201) binary_expression -> binary_expression . AND binary_expression
    (202) binary_expression -> binary_expression . OR binary_expression
    (203) binary_expression -> binary_expression . XOR binary_expression
    (204) binary_expression -> binary_expression . LAND binary_expression
    (205) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RSHIFT          reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LSHIFT          reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LT              reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LE              reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    GE              reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    GT              reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    EQ              reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    NE              reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    AND             reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    OR              reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    XOR             reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LAND            reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LOR             reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RBRACKET        reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    COMMA           reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RBRACE          reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    SEMI            reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RPAREN          reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    COLON           reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .)
    TIMES           shift and go to state 224
    DIVIDE          shift and go to state 223
    MOD             shift and go to state 230
    PLUS            shift and go to state 229
    MINUS           shift and go to state 233

  ! TIMES           [ reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! MOD             [ reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! PLUS            [ reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! MINUS           [ reduce using rule 193 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! RSHIFT          [ shift and go to state 218 ]
  ! LSHIFT          [ shift and go to state 234 ]
  ! LT              [ shift and go to state 231 ]
  ! LE              [ shift and go to state 236 ]
  ! GE              [ shift and go to state 235 ]
  ! GT              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 221 ]
  ! NE              [ shift and go to state 228 ]
  ! AND             [ shift and go to state 219 ]
  ! OR              [ shift and go to state 232 ]
  ! XOR             [ shift and go to state 226 ]
  ! LAND            [ shift and go to state 220 ]
  ! LOR             [ shift and go to state 227 ]


state 315

    (201) binary_expression -> binary_expression AND binary_expression .
    (188) binary_expression -> binary_expression . TIMES binary_expression
    (189) binary_expression -> binary_expression . DIVIDE binary_expression
    (190) binary_expression -> binary_expression . MOD binary_expression
    (191) binary_expression -> binary_expression . PLUS binary_expression
    (192) binary_expression -> binary_expression . MINUS binary_expression
    (193) binary_expression -> binary_expression . RSHIFT binary_expression
    (194) binary_expression -> binary_expression . LSHIFT binary_expression
    (195) binary_expression -> binary_expression . LT binary_expression
    (196) binary_expression -> binary_expression . LE binary_expression
    (197) binary_expression -> binary_expression . GE binary_expression
    (198) binary_expression -> binary_expression . GT binary_expression
    (199) binary_expression -> binary_expression . EQ binary_expression
    (200) binary_expression -> binary_expression . NE binary_expression
    (201) binary_expression -> binary_expression . AND binary_expression
    (202) binary_expression -> binary_expression . OR binary_expression
    (203) binary_expression -> binary_expression . XOR binary_expression
    (204) binary_expression -> binary_expression . LAND binary_expression
    (205) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .)
    AND             reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .)
    XOR             reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .)
    LAND            reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .)
    LOR             reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .)
    COLON           reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 224
    DIVIDE          shift and go to state 223
    MOD             shift and go to state 230
    PLUS            shift and go to state 229
    MINUS           shift and go to state 233
    RSHIFT          shift and go to state 218
    LSHIFT          shift and go to state 234
    LT              shift and go to state 231
    LE              shift and go to state 236
    GE              shift and go to state 235
    GT              shift and go to state 222
    EQ              shift and go to state 221
    NE              shift and go to state 228

  ! TIMES           [ reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .) ]
  ! RSHIFT          [ reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LSHIFT          [ reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LE              [ reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GE              [ reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GT              [ reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQ              [ reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .) ]
  ! NE              [ reduce using rule 201 (binary_expression -> binary_expression AND binary_expression .) ]
  ! AND             [ shift and go to state 219 ]
  ! OR              [ shift and go to state 232 ]
  ! XOR             [ shift and go to state 226 ]
  ! LAND            [ shift and go to state 220 ]
  ! LOR             [ shift and go to state 227 ]


state 316

    (204) binary_expression -> binary_expression LAND binary_expression .
    (188) binary_expression -> binary_expression . TIMES binary_expression
    (189) binary_expression -> binary_expression . DIVIDE binary_expression
    (190) binary_expression -> binary_expression . MOD binary_expression
    (191) binary_expression -> binary_expression . PLUS binary_expression
    (192) binary_expression -> binary_expression . MINUS binary_expression
    (193) binary_expression -> binary_expression . RSHIFT binary_expression
    (194) binary_expression -> binary_expression . LSHIFT binary_expression
    (195) binary_expression -> binary_expression . LT binary_expression
    (196) binary_expression -> binary_expression . LE binary_expression
    (197) binary_expression -> binary_expression . GE binary_expression
    (198) binary_expression -> binary_expression . GT binary_expression
    (199) binary_expression -> binary_expression . EQ binary_expression
    (200) binary_expression -> binary_expression . NE binary_expression
    (201) binary_expression -> binary_expression . AND binary_expression
    (202) binary_expression -> binary_expression . OR binary_expression
    (203) binary_expression -> binary_expression . XOR binary_expression
    (204) binary_expression -> binary_expression . LAND binary_expression
    (205) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .)
    LAND            reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .)
    LOR             reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .)
    RBRACKET        reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .)
    COMMA           reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .)
    RBRACE          reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .)
    SEMI            reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .)
    RPAREN          reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .)
    COLON           reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .)
    TIMES           shift and go to state 224
    DIVIDE          shift and go to state 223
    MOD             shift and go to state 230
    PLUS            shift and go to state 229
    MINUS           shift and go to state 233
    RSHIFT          shift and go to state 218
    LSHIFT          shift and go to state 234
    LT              shift and go to state 231
    LE              shift and go to state 236
    GE              shift and go to state 235
    GT              shift and go to state 222
    EQ              shift and go to state 221
    NE              shift and go to state 228
    AND             shift and go to state 219
    OR              shift and go to state 232
    XOR             shift and go to state 226

  ! TIMES           [ reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! MOD             [ reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! PLUS            [ reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! MINUS           [ reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! RSHIFT          [ reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LSHIFT          [ reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LT              [ reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LE              [ reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! GE              [ reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! GT              [ reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! EQ              [ reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! NE              [ reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! AND             [ reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! OR              [ reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! XOR             [ reduce using rule 204 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LAND            [ shift and go to state 220 ]
  ! LOR             [ shift and go to state 227 ]


state 317

    (199) binary_expression -> binary_expression EQ binary_expression .
    (188) binary_expression -> binary_expression . TIMES binary_expression
    (189) binary_expression -> binary_expression . DIVIDE binary_expression
    (190) binary_expression -> binary_expression . MOD binary_expression
    (191) binary_expression -> binary_expression . PLUS binary_expression
    (192) binary_expression -> binary_expression . MINUS binary_expression
    (193) binary_expression -> binary_expression . RSHIFT binary_expression
    (194) binary_expression -> binary_expression . LSHIFT binary_expression
    (195) binary_expression -> binary_expression . LT binary_expression
    (196) binary_expression -> binary_expression . LE binary_expression
    (197) binary_expression -> binary_expression . GE binary_expression
    (198) binary_expression -> binary_expression . GT binary_expression
    (199) binary_expression -> binary_expression . EQ binary_expression
    (200) binary_expression -> binary_expression . NE binary_expression
    (201) binary_expression -> binary_expression . AND binary_expression
    (202) binary_expression -> binary_expression . OR binary_expression
    (203) binary_expression -> binary_expression . XOR binary_expression
    (204) binary_expression -> binary_expression . LAND binary_expression
    (205) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .)
    EQ              reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .)
    NE              reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .)
    OR              reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .)
    XOR             reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .)
    LAND            reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .)
    LOR             reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .)
    SEMI            reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .)
    COLON           reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .)
    TIMES           shift and go to state 224
    DIVIDE          shift and go to state 223
    MOD             shift and go to state 230
    PLUS            shift and go to state 229
    MINUS           shift and go to state 233
    RSHIFT          shift and go to state 218
    LSHIFT          shift and go to state 234
    LT              shift and go to state 231
    LE              shift and go to state 236
    GE              shift and go to state 235
    GT              shift and go to state 222

  ! TIMES           [ reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MOD             [ reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! PLUS            [ reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! RSHIFT          [ reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LSHIFT          [ reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LT              [ reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LE              [ reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GE              [ reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GT              [ reduce using rule 199 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! EQ              [ shift and go to state 221 ]
  ! NE              [ shift and go to state 228 ]
  ! AND             [ shift and go to state 219 ]
  ! OR              [ shift and go to state 232 ]
  ! XOR             [ shift and go to state 226 ]
  ! LAND            [ shift and go to state 220 ]
  ! LOR             [ shift and go to state 227 ]


state 318

    (198) binary_expression -> binary_expression GT binary_expression .
    (188) binary_expression -> binary_expression . TIMES binary_expression
    (189) binary_expression -> binary_expression . DIVIDE binary_expression
    (190) binary_expression -> binary_expression . MOD binary_expression
    (191) binary_expression -> binary_expression . PLUS binary_expression
    (192) binary_expression -> binary_expression . MINUS binary_expression
    (193) binary_expression -> binary_expression . RSHIFT binary_expression
    (194) binary_expression -> binary_expression . LSHIFT binary_expression
    (195) binary_expression -> binary_expression . LT binary_expression
    (196) binary_expression -> binary_expression . LE binary_expression
    (197) binary_expression -> binary_expression . GE binary_expression
    (198) binary_expression -> binary_expression . GT binary_expression
    (199) binary_expression -> binary_expression . EQ binary_expression
    (200) binary_expression -> binary_expression . NE binary_expression
    (201) binary_expression -> binary_expression . AND binary_expression
    (202) binary_expression -> binary_expression . OR binary_expression
    (203) binary_expression -> binary_expression . XOR binary_expression
    (204) binary_expression -> binary_expression . LAND binary_expression
    (205) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .)
    LT              reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .)
    LE              reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .)
    GE              reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .)
    GT              reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .)
    EQ              reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .)
    NE              reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .)
    AND             reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .)
    OR              reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .)
    XOR             reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .)
    LAND            reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .)
    LOR             reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .)
    RBRACKET        reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .)
    COMMA           reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .)
    RBRACE          reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .)
    SEMI            reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .)
    RPAREN          reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .)
    COLON           reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .)
    TIMES           shift and go to state 224
    DIVIDE          shift and go to state 223
    MOD             shift and go to state 230
    PLUS            shift and go to state 229
    MINUS           shift and go to state 233
    RSHIFT          shift and go to state 218
    LSHIFT          shift and go to state 234

  ! TIMES           [ reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MOD             [ reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .) ]
  ! PLUS            [ reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MINUS           [ reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .) ]
  ! RSHIFT          [ reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LSHIFT          [ reduce using rule 198 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LT              [ shift and go to state 231 ]
  ! LE              [ shift and go to state 236 ]
  ! GE              [ shift and go to state 235 ]
  ! GT              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 221 ]
  ! NE              [ shift and go to state 228 ]
  ! AND             [ shift and go to state 219 ]
  ! OR              [ shift and go to state 232 ]
  ! XOR             [ shift and go to state 226 ]
  ! LAND            [ shift and go to state 220 ]
  ! LOR             [ shift and go to state 227 ]


state 319

    (189) binary_expression -> binary_expression DIVIDE binary_expression .
    (188) binary_expression -> binary_expression . TIMES binary_expression
    (189) binary_expression -> binary_expression . DIVIDE binary_expression
    (190) binary_expression -> binary_expression . MOD binary_expression
    (191) binary_expression -> binary_expression . PLUS binary_expression
    (192) binary_expression -> binary_expression . MINUS binary_expression
    (193) binary_expression -> binary_expression . RSHIFT binary_expression
    (194) binary_expression -> binary_expression . LSHIFT binary_expression
    (195) binary_expression -> binary_expression . LT binary_expression
    (196) binary_expression -> binary_expression . LE binary_expression
    (197) binary_expression -> binary_expression . GE binary_expression
    (198) binary_expression -> binary_expression . GT binary_expression
    (199) binary_expression -> binary_expression . EQ binary_expression
    (200) binary_expression -> binary_expression . NE binary_expression
    (201) binary_expression -> binary_expression . AND binary_expression
    (202) binary_expression -> binary_expression . OR binary_expression
    (203) binary_expression -> binary_expression . XOR binary_expression
    (204) binary_expression -> binary_expression . LAND binary_expression
    (205) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    TIMES           reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RSHIFT          reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LSHIFT          reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LT              reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LE              reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GE              reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GT              reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQ              reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    NE              reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    XOR             reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LAND            reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LOR             reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COLON           reduce using rule 189 (binary_expression -> binary_expression DIVIDE binary_expression .)

  ! TIMES           [ shift and go to state 224 ]
  ! DIVIDE          [ shift and go to state 223 ]
  ! MOD             [ shift and go to state 230 ]
  ! PLUS            [ shift and go to state 229 ]
  ! MINUS           [ shift and go to state 233 ]
  ! RSHIFT          [ shift and go to state 218 ]
  ! LSHIFT          [ shift and go to state 234 ]
  ! LT              [ shift and go to state 231 ]
  ! LE              [ shift and go to state 236 ]
  ! GE              [ shift and go to state 235 ]
  ! GT              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 221 ]
  ! NE              [ shift and go to state 228 ]
  ! AND             [ shift and go to state 219 ]
  ! OR              [ shift and go to state 232 ]
  ! XOR             [ shift and go to state 226 ]
  ! LAND            [ shift and go to state 220 ]
  ! LOR             [ shift and go to state 227 ]


state 320

    (188) binary_expression -> binary_expression TIMES binary_expression .
    (188) binary_expression -> binary_expression . TIMES binary_expression
    (189) binary_expression -> binary_expression . DIVIDE binary_expression
    (190) binary_expression -> binary_expression . MOD binary_expression
    (191) binary_expression -> binary_expression . PLUS binary_expression
    (192) binary_expression -> binary_expression . MINUS binary_expression
    (193) binary_expression -> binary_expression . RSHIFT binary_expression
    (194) binary_expression -> binary_expression . LSHIFT binary_expression
    (195) binary_expression -> binary_expression . LT binary_expression
    (196) binary_expression -> binary_expression . LE binary_expression
    (197) binary_expression -> binary_expression . GE binary_expression
    (198) binary_expression -> binary_expression . GT binary_expression
    (199) binary_expression -> binary_expression . EQ binary_expression
    (200) binary_expression -> binary_expression . NE binary_expression
    (201) binary_expression -> binary_expression . AND binary_expression
    (202) binary_expression -> binary_expression . OR binary_expression
    (203) binary_expression -> binary_expression . XOR binary_expression
    (204) binary_expression -> binary_expression . LAND binary_expression
    (205) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    TIMES           reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    RSHIFT          reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    LSHIFT          reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    LE              reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    GE              reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    GT              reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    NE              reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    XOR             reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    LAND            reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    LOR             reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)
    COLON           reduce using rule 188 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 224 ]
  ! DIVIDE          [ shift and go to state 223 ]
  ! MOD             [ shift and go to state 230 ]
  ! PLUS            [ shift and go to state 229 ]
  ! MINUS           [ shift and go to state 233 ]
  ! RSHIFT          [ shift and go to state 218 ]
  ! LSHIFT          [ shift and go to state 234 ]
  ! LT              [ shift and go to state 231 ]
  ! LE              [ shift and go to state 236 ]
  ! GE              [ shift and go to state 235 ]
  ! GT              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 221 ]
  ! NE              [ shift and go to state 228 ]
  ! AND             [ shift and go to state 219 ]
  ! OR              [ shift and go to state 232 ]
  ! XOR             [ shift and go to state 226 ]
  ! LAND            [ shift and go to state 220 ]
  ! LOR             [ shift and go to state 227 ]


state 321

    (186) conditional_expression -> binary_expression CONDOP expression . COLON conditional_expression
    (169) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 376
    COMMA           shift and go to state 281


state 322

    (203) binary_expression -> binary_expression XOR binary_expression .
    (188) binary_expression -> binary_expression . TIMES binary_expression
    (189) binary_expression -> binary_expression . DIVIDE binary_expression
    (190) binary_expression -> binary_expression . MOD binary_expression
    (191) binary_expression -> binary_expression . PLUS binary_expression
    (192) binary_expression -> binary_expression . MINUS binary_expression
    (193) binary_expression -> binary_expression . RSHIFT binary_expression
    (194) binary_expression -> binary_expression . LSHIFT binary_expression
    (195) binary_expression -> binary_expression . LT binary_expression
    (196) binary_expression -> binary_expression . LE binary_expression
    (197) binary_expression -> binary_expression . GE binary_expression
    (198) binary_expression -> binary_expression . GT binary_expression
    (199) binary_expression -> binary_expression . EQ binary_expression
    (200) binary_expression -> binary_expression . NE binary_expression
    (201) binary_expression -> binary_expression . AND binary_expression
    (202) binary_expression -> binary_expression . OR binary_expression
    (203) binary_expression -> binary_expression . XOR binary_expression
    (204) binary_expression -> binary_expression . LAND binary_expression
    (205) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .)
    OR              reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .)
    XOR             reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .)
    LAND            reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .)
    LOR             reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .)
    RBRACKET        reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .)
    COMMA           reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .)
    RBRACE          reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .)
    SEMI            reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .)
    RPAREN          reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .)
    COLON           reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .)
    TIMES           shift and go to state 224
    DIVIDE          shift and go to state 223
    MOD             shift and go to state 230
    PLUS            shift and go to state 229
    MINUS           shift and go to state 233
    RSHIFT          shift and go to state 218
    LSHIFT          shift and go to state 234
    LT              shift and go to state 231
    LE              shift and go to state 236
    GE              shift and go to state 235
    GT              shift and go to state 222
    EQ              shift and go to state 221
    NE              shift and go to state 228
    AND             shift and go to state 219

  ! TIMES           [ reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! MOD             [ reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! PLUS            [ reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! MINUS           [ reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LT              [ reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LE              [ reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! GE              [ reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! GT              [ reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! EQ              [ reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! NE              [ reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! AND             [ reduce using rule 203 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! OR              [ shift and go to state 232 ]
  ! XOR             [ shift and go to state 226 ]
  ! LAND            [ shift and go to state 220 ]
  ! LOR             [ shift and go to state 227 ]


state 323

    (205) binary_expression -> binary_expression LOR binary_expression .
    (188) binary_expression -> binary_expression . TIMES binary_expression
    (189) binary_expression -> binary_expression . DIVIDE binary_expression
    (190) binary_expression -> binary_expression . MOD binary_expression
    (191) binary_expression -> binary_expression . PLUS binary_expression
    (192) binary_expression -> binary_expression . MINUS binary_expression
    (193) binary_expression -> binary_expression . RSHIFT binary_expression
    (194) binary_expression -> binary_expression . LSHIFT binary_expression
    (195) binary_expression -> binary_expression . LT binary_expression
    (196) binary_expression -> binary_expression . LE binary_expression
    (197) binary_expression -> binary_expression . GE binary_expression
    (198) binary_expression -> binary_expression . GT binary_expression
    (199) binary_expression -> binary_expression . EQ binary_expression
    (200) binary_expression -> binary_expression . NE binary_expression
    (201) binary_expression -> binary_expression . AND binary_expression
    (202) binary_expression -> binary_expression . OR binary_expression
    (203) binary_expression -> binary_expression . XOR binary_expression
    (204) binary_expression -> binary_expression . LAND binary_expression
    (205) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .)
    LOR             reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .)
    RBRACKET        reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .)
    COMMA           reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .)
    RBRACE          reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .)
    SEMI            reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .)
    RPAREN          reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .)
    COLON           reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .)
    TIMES           shift and go to state 224
    DIVIDE          shift and go to state 223
    MOD             shift and go to state 230
    PLUS            shift and go to state 229
    MINUS           shift and go to state 233
    RSHIFT          shift and go to state 218
    LSHIFT          shift and go to state 234
    LT              shift and go to state 231
    LE              shift and go to state 236
    GE              shift and go to state 235
    GT              shift and go to state 222
    EQ              shift and go to state 221
    NE              shift and go to state 228
    AND             shift and go to state 219
    OR              shift and go to state 232
    XOR             shift and go to state 226
    LAND            shift and go to state 220

  ! TIMES           [ reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! MOD             [ reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! PLUS            [ reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! MINUS           [ reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LT              [ reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LE              [ reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! GE              [ reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! GT              [ reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! EQ              [ reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! NE              [ reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! AND             [ reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! OR              [ reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! XOR             [ reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LAND            [ reduce using rule 205 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LOR             [ shift and go to state 227 ]


state 324

    (200) binary_expression -> binary_expression NE binary_expression .
    (188) binary_expression -> binary_expression . TIMES binary_expression
    (189) binary_expression -> binary_expression . DIVIDE binary_expression
    (190) binary_expression -> binary_expression . MOD binary_expression
    (191) binary_expression -> binary_expression . PLUS binary_expression
    (192) binary_expression -> binary_expression . MINUS binary_expression
    (193) binary_expression -> binary_expression . RSHIFT binary_expression
    (194) binary_expression -> binary_expression . LSHIFT binary_expression
    (195) binary_expression -> binary_expression . LT binary_expression
    (196) binary_expression -> binary_expression . LE binary_expression
    (197) binary_expression -> binary_expression . GE binary_expression
    (198) binary_expression -> binary_expression . GT binary_expression
    (199) binary_expression -> binary_expression . EQ binary_expression
    (200) binary_expression -> binary_expression . NE binary_expression
    (201) binary_expression -> binary_expression . AND binary_expression
    (202) binary_expression -> binary_expression . OR binary_expression
    (203) binary_expression -> binary_expression . XOR binary_expression
    (204) binary_expression -> binary_expression . LAND binary_expression
    (205) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .)
    EQ              reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .)
    NE              reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .)
    AND             reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .)
    OR              reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .)
    XOR             reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .)
    LAND            reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .)
    LOR             reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .)
    RBRACKET        reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .)
    COMMA           reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .)
    RBRACE          reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .)
    SEMI            reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .)
    RPAREN          reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .)
    COLON           reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .)
    TIMES           shift and go to state 224
    DIVIDE          shift and go to state 223
    MOD             shift and go to state 230
    PLUS            shift and go to state 229
    MINUS           shift and go to state 233
    RSHIFT          shift and go to state 218
    LSHIFT          shift and go to state 234
    LT              shift and go to state 231
    LE              shift and go to state 236
    GE              shift and go to state 235
    GT              shift and go to state 222

  ! TIMES           [ reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MOD             [ reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .) ]
  ! PLUS            [ reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MINUS           [ reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LT              [ reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LE              [ reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GE              [ reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GT              [ reduce using rule 200 (binary_expression -> binary_expression NE binary_expression .) ]
  ! EQ              [ shift and go to state 221 ]
  ! NE              [ shift and go to state 228 ]
  ! AND             [ shift and go to state 219 ]
  ! OR              [ shift and go to state 232 ]
  ! XOR             [ shift and go to state 226 ]
  ! LAND            [ shift and go to state 220 ]
  ! LOR             [ shift and go to state 227 ]


state 325

    (191) binary_expression -> binary_expression PLUS binary_expression .
    (188) binary_expression -> binary_expression . TIMES binary_expression
    (189) binary_expression -> binary_expression . DIVIDE binary_expression
    (190) binary_expression -> binary_expression . MOD binary_expression
    (191) binary_expression -> binary_expression . PLUS binary_expression
    (192) binary_expression -> binary_expression . MINUS binary_expression
    (193) binary_expression -> binary_expression . RSHIFT binary_expression
    (194) binary_expression -> binary_expression . LSHIFT binary_expression
    (195) binary_expression -> binary_expression . LT binary_expression
    (196) binary_expression -> binary_expression . LE binary_expression
    (197) binary_expression -> binary_expression . GE binary_expression
    (198) binary_expression -> binary_expression . GT binary_expression
    (199) binary_expression -> binary_expression . EQ binary_expression
    (200) binary_expression -> binary_expression . NE binary_expression
    (201) binary_expression -> binary_expression . AND binary_expression
    (202) binary_expression -> binary_expression . OR binary_expression
    (203) binary_expression -> binary_expression . XOR binary_expression
    (204) binary_expression -> binary_expression . LAND binary_expression
    (205) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    PLUS            reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    RSHIFT          reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    LSHIFT          reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    LE              reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    GE              reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    GT              reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    NE              reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    XOR             reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    LAND            reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    LOR             reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    COLON           reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 224
    DIVIDE          shift and go to state 223
    MOD             shift and go to state 230

  ! TIMES           [ reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 191 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 229 ]
  ! MINUS           [ shift and go to state 233 ]
  ! RSHIFT          [ shift and go to state 218 ]
  ! LSHIFT          [ shift and go to state 234 ]
  ! LT              [ shift and go to state 231 ]
  ! LE              [ shift and go to state 236 ]
  ! GE              [ shift and go to state 235 ]
  ! GT              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 221 ]
  ! NE              [ shift and go to state 228 ]
  ! AND             [ shift and go to state 219 ]
  ! OR              [ shift and go to state 232 ]
  ! XOR             [ shift and go to state 226 ]
  ! LAND            [ shift and go to state 220 ]
  ! LOR             [ shift and go to state 227 ]


state 326

    (190) binary_expression -> binary_expression MOD binary_expression .
    (188) binary_expression -> binary_expression . TIMES binary_expression
    (189) binary_expression -> binary_expression . DIVIDE binary_expression
    (190) binary_expression -> binary_expression . MOD binary_expression
    (191) binary_expression -> binary_expression . PLUS binary_expression
    (192) binary_expression -> binary_expression . MINUS binary_expression
    (193) binary_expression -> binary_expression . RSHIFT binary_expression
    (194) binary_expression -> binary_expression . LSHIFT binary_expression
    (195) binary_expression -> binary_expression . LT binary_expression
    (196) binary_expression -> binary_expression . LE binary_expression
    (197) binary_expression -> binary_expression . GE binary_expression
    (198) binary_expression -> binary_expression . GT binary_expression
    (199) binary_expression -> binary_expression . EQ binary_expression
    (200) binary_expression -> binary_expression . NE binary_expression
    (201) binary_expression -> binary_expression . AND binary_expression
    (202) binary_expression -> binary_expression . OR binary_expression
    (203) binary_expression -> binary_expression . XOR binary_expression
    (204) binary_expression -> binary_expression . LAND binary_expression
    (205) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    TIMES           reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    RSHIFT          reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    LSHIFT          reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    LE              reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    GE              reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    GT              reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    NE              reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    XOR             reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    LAND            reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    LOR             reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)
    COLON           reduce using rule 190 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 224 ]
  ! DIVIDE          [ shift and go to state 223 ]
  ! MOD             [ shift and go to state 230 ]
  ! PLUS            [ shift and go to state 229 ]
  ! MINUS           [ shift and go to state 233 ]
  ! RSHIFT          [ shift and go to state 218 ]
  ! LSHIFT          [ shift and go to state 234 ]
  ! LT              [ shift and go to state 231 ]
  ! LE              [ shift and go to state 236 ]
  ! GE              [ shift and go to state 235 ]
  ! GT              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 221 ]
  ! NE              [ shift and go to state 228 ]
  ! AND             [ shift and go to state 219 ]
  ! OR              [ shift and go to state 232 ]
  ! XOR             [ shift and go to state 226 ]
  ! LAND            [ shift and go to state 220 ]
  ! LOR             [ shift and go to state 227 ]


state 327

    (195) binary_expression -> binary_expression LT binary_expression .
    (188) binary_expression -> binary_expression . TIMES binary_expression
    (189) binary_expression -> binary_expression . DIVIDE binary_expression
    (190) binary_expression -> binary_expression . MOD binary_expression
    (191) binary_expression -> binary_expression . PLUS binary_expression
    (192) binary_expression -> binary_expression . MINUS binary_expression
    (193) binary_expression -> binary_expression . RSHIFT binary_expression
    (194) binary_expression -> binary_expression . LSHIFT binary_expression
    (195) binary_expression -> binary_expression . LT binary_expression
    (196) binary_expression -> binary_expression . LE binary_expression
    (197) binary_expression -> binary_expression . GE binary_expression
    (198) binary_expression -> binary_expression . GT binary_expression
    (199) binary_expression -> binary_expression . EQ binary_expression
    (200) binary_expression -> binary_expression . NE binary_expression
    (201) binary_expression -> binary_expression . AND binary_expression
    (202) binary_expression -> binary_expression . OR binary_expression
    (203) binary_expression -> binary_expression . XOR binary_expression
    (204) binary_expression -> binary_expression . LAND binary_expression
    (205) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .)
    LT              reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .)
    LE              reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .)
    GE              reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .)
    GT              reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .)
    NE              reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .)
    OR              reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .)
    XOR             reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .)
    LAND            reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .)
    LOR             reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .)
    COLON           reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .)
    TIMES           shift and go to state 224
    DIVIDE          shift and go to state 223
    MOD             shift and go to state 230
    PLUS            shift and go to state 229
    MINUS           shift and go to state 233
    RSHIFT          shift and go to state 218
    LSHIFT          shift and go to state 234

  ! TIMES           [ reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MOD             [ reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .) ]
  ! PLUS            [ reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .) ]
  ! RSHIFT          [ reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LSHIFT          [ reduce using rule 195 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LT              [ shift and go to state 231 ]
  ! LE              [ shift and go to state 236 ]
  ! GE              [ shift and go to state 235 ]
  ! GT              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 221 ]
  ! NE              [ shift and go to state 228 ]
  ! AND             [ shift and go to state 219 ]
  ! OR              [ shift and go to state 232 ]
  ! XOR             [ shift and go to state 226 ]
  ! LAND            [ shift and go to state 220 ]
  ! LOR             [ shift and go to state 227 ]


state 328

    (202) binary_expression -> binary_expression OR binary_expression .
    (188) binary_expression -> binary_expression . TIMES binary_expression
    (189) binary_expression -> binary_expression . DIVIDE binary_expression
    (190) binary_expression -> binary_expression . MOD binary_expression
    (191) binary_expression -> binary_expression . PLUS binary_expression
    (192) binary_expression -> binary_expression . MINUS binary_expression
    (193) binary_expression -> binary_expression . RSHIFT binary_expression
    (194) binary_expression -> binary_expression . LSHIFT binary_expression
    (195) binary_expression -> binary_expression . LT binary_expression
    (196) binary_expression -> binary_expression . LE binary_expression
    (197) binary_expression -> binary_expression . GE binary_expression
    (198) binary_expression -> binary_expression . GT binary_expression
    (199) binary_expression -> binary_expression . EQ binary_expression
    (200) binary_expression -> binary_expression . NE binary_expression
    (201) binary_expression -> binary_expression . AND binary_expression
    (202) binary_expression -> binary_expression . OR binary_expression
    (203) binary_expression -> binary_expression . XOR binary_expression
    (204) binary_expression -> binary_expression . LAND binary_expression
    (205) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .)
    OR              reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .)
    LAND            reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .)
    LOR             reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .)
    COLON           reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 224
    DIVIDE          shift and go to state 223
    MOD             shift and go to state 230
    PLUS            shift and go to state 229
    MINUS           shift and go to state 233
    RSHIFT          shift and go to state 218
    LSHIFT          shift and go to state 234
    LT              shift and go to state 231
    LE              shift and go to state 236
    GE              shift and go to state 235
    GT              shift and go to state 222
    EQ              shift and go to state 221
    NE              shift and go to state 228
    AND             shift and go to state 219
    XOR             shift and go to state 226

  ! TIMES           [ reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LE              [ reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GE              [ reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GT              [ reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQ              [ reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .) ]
  ! NE              [ reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .) ]
  ! XOR             [ reduce using rule 202 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 232 ]
  ! LAND            [ shift and go to state 220 ]
  ! LOR             [ shift and go to state 227 ]


state 329

    (192) binary_expression -> binary_expression MINUS binary_expression .
    (188) binary_expression -> binary_expression . TIMES binary_expression
    (189) binary_expression -> binary_expression . DIVIDE binary_expression
    (190) binary_expression -> binary_expression . MOD binary_expression
    (191) binary_expression -> binary_expression . PLUS binary_expression
    (192) binary_expression -> binary_expression . MINUS binary_expression
    (193) binary_expression -> binary_expression . RSHIFT binary_expression
    (194) binary_expression -> binary_expression . LSHIFT binary_expression
    (195) binary_expression -> binary_expression . LT binary_expression
    (196) binary_expression -> binary_expression . LE binary_expression
    (197) binary_expression -> binary_expression . GE binary_expression
    (198) binary_expression -> binary_expression . GT binary_expression
    (199) binary_expression -> binary_expression . EQ binary_expression
    (200) binary_expression -> binary_expression . NE binary_expression
    (201) binary_expression -> binary_expression . AND binary_expression
    (202) binary_expression -> binary_expression . OR binary_expression
    (203) binary_expression -> binary_expression . XOR binary_expression
    (204) binary_expression -> binary_expression . LAND binary_expression
    (205) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    PLUS            reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    RSHIFT          reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    LSHIFT          reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    LE              reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    GE              reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    GT              reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    NE              reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    XOR             reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    LAND            reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    LOR             reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    COLON           reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 224
    DIVIDE          shift and go to state 223
    MOD             shift and go to state 230

  ! TIMES           [ reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 192 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 229 ]
  ! MINUS           [ shift and go to state 233 ]
  ! RSHIFT          [ shift and go to state 218 ]
  ! LSHIFT          [ shift and go to state 234 ]
  ! LT              [ shift and go to state 231 ]
  ! LE              [ shift and go to state 236 ]
  ! GE              [ shift and go to state 235 ]
  ! GT              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 221 ]
  ! NE              [ shift and go to state 228 ]
  ! AND             [ shift and go to state 219 ]
  ! OR              [ shift and go to state 232 ]
  ! XOR             [ shift and go to state 226 ]
  ! LAND            [ shift and go to state 220 ]
  ! LOR             [ shift and go to state 227 ]


state 330

    (194) binary_expression -> binary_expression LSHIFT binary_expression .
    (188) binary_expression -> binary_expression . TIMES binary_expression
    (189) binary_expression -> binary_expression . DIVIDE binary_expression
    (190) binary_expression -> binary_expression . MOD binary_expression
    (191) binary_expression -> binary_expression . PLUS binary_expression
    (192) binary_expression -> binary_expression . MINUS binary_expression
    (193) binary_expression -> binary_expression . RSHIFT binary_expression
    (194) binary_expression -> binary_expression . LSHIFT binary_expression
    (195) binary_expression -> binary_expression . LT binary_expression
    (196) binary_expression -> binary_expression . LE binary_expression
    (197) binary_expression -> binary_expression . GE binary_expression
    (198) binary_expression -> binary_expression . GT binary_expression
    (199) binary_expression -> binary_expression . EQ binary_expression
    (200) binary_expression -> binary_expression . NE binary_expression
    (201) binary_expression -> binary_expression . AND binary_expression
    (202) binary_expression -> binary_expression . OR binary_expression
    (203) binary_expression -> binary_expression . XOR binary_expression
    (204) binary_expression -> binary_expression . LAND binary_expression
    (205) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RSHIFT          reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LSHIFT          reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LT              reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LE              reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    GE              reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    GT              reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    EQ              reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    NE              reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    AND             reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    OR              reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    XOR             reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LAND            reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LOR             reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RBRACKET        reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    COMMA           reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RBRACE          reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    SEMI            reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RPAREN          reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    COLON           reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .)
    TIMES           shift and go to state 224
    DIVIDE          shift and go to state 223
    MOD             shift and go to state 230
    PLUS            shift and go to state 229
    MINUS           shift and go to state 233

  ! TIMES           [ reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! MOD             [ reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! PLUS            [ reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! MINUS           [ reduce using rule 194 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! RSHIFT          [ shift and go to state 218 ]
  ! LSHIFT          [ shift and go to state 234 ]
  ! LT              [ shift and go to state 231 ]
  ! LE              [ shift and go to state 236 ]
  ! GE              [ shift and go to state 235 ]
  ! GT              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 221 ]
  ! NE              [ shift and go to state 228 ]
  ! AND             [ shift and go to state 219 ]
  ! OR              [ shift and go to state 232 ]
  ! XOR             [ shift and go to state 226 ]
  ! LAND            [ shift and go to state 220 ]
  ! LOR             [ shift and go to state 227 ]


state 331

    (197) binary_expression -> binary_expression GE binary_expression .
    (188) binary_expression -> binary_expression . TIMES binary_expression
    (189) binary_expression -> binary_expression . DIVIDE binary_expression
    (190) binary_expression -> binary_expression . MOD binary_expression
    (191) binary_expression -> binary_expression . PLUS binary_expression
    (192) binary_expression -> binary_expression . MINUS binary_expression
    (193) binary_expression -> binary_expression . RSHIFT binary_expression
    (194) binary_expression -> binary_expression . LSHIFT binary_expression
    (195) binary_expression -> binary_expression . LT binary_expression
    (196) binary_expression -> binary_expression . LE binary_expression
    (197) binary_expression -> binary_expression . GE binary_expression
    (198) binary_expression -> binary_expression . GT binary_expression
    (199) binary_expression -> binary_expression . EQ binary_expression
    (200) binary_expression -> binary_expression . NE binary_expression
    (201) binary_expression -> binary_expression . AND binary_expression
    (202) binary_expression -> binary_expression . OR binary_expression
    (203) binary_expression -> binary_expression . XOR binary_expression
    (204) binary_expression -> binary_expression . LAND binary_expression
    (205) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .)
    LT              reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .)
    LE              reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .)
    GE              reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .)
    GT              reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .)
    EQ              reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .)
    NE              reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .)
    AND             reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .)
    OR              reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .)
    XOR             reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .)
    LAND            reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .)
    LOR             reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .)
    RBRACKET        reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .)
    COMMA           reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .)
    RBRACE          reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .)
    SEMI            reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .)
    RPAREN          reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .)
    COLON           reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .)
    TIMES           shift and go to state 224
    DIVIDE          shift and go to state 223
    MOD             shift and go to state 230
    PLUS            shift and go to state 229
    MINUS           shift and go to state 233
    RSHIFT          shift and go to state 218
    LSHIFT          shift and go to state 234

  ! TIMES           [ reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MOD             [ reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .) ]
  ! PLUS            [ reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MINUS           [ reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 197 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LT              [ shift and go to state 231 ]
  ! LE              [ shift and go to state 236 ]
  ! GE              [ shift and go to state 235 ]
  ! GT              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 221 ]
  ! NE              [ shift and go to state 228 ]
  ! AND             [ shift and go to state 219 ]
  ! OR              [ shift and go to state 232 ]
  ! XOR             [ shift and go to state 226 ]
  ! LAND            [ shift and go to state 220 ]
  ! LOR             [ shift and go to state 227 ]


state 332

    (196) binary_expression -> binary_expression LE binary_expression .
    (188) binary_expression -> binary_expression . TIMES binary_expression
    (189) binary_expression -> binary_expression . DIVIDE binary_expression
    (190) binary_expression -> binary_expression . MOD binary_expression
    (191) binary_expression -> binary_expression . PLUS binary_expression
    (192) binary_expression -> binary_expression . MINUS binary_expression
    (193) binary_expression -> binary_expression . RSHIFT binary_expression
    (194) binary_expression -> binary_expression . LSHIFT binary_expression
    (195) binary_expression -> binary_expression . LT binary_expression
    (196) binary_expression -> binary_expression . LE binary_expression
    (197) binary_expression -> binary_expression . GE binary_expression
    (198) binary_expression -> binary_expression . GT binary_expression
    (199) binary_expression -> binary_expression . EQ binary_expression
    (200) binary_expression -> binary_expression . NE binary_expression
    (201) binary_expression -> binary_expression . AND binary_expression
    (202) binary_expression -> binary_expression . OR binary_expression
    (203) binary_expression -> binary_expression . XOR binary_expression
    (204) binary_expression -> binary_expression . LAND binary_expression
    (205) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .)
    LT              reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .)
    LE              reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .)
    GE              reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .)
    GT              reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .)
    EQ              reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .)
    NE              reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .)
    AND             reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .)
    OR              reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .)
    XOR             reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .)
    LAND            reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .)
    LOR             reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .)
    RBRACKET        reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .)
    COMMA           reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .)
    RBRACE          reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .)
    SEMI            reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .)
    RPAREN          reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .)
    COLON           reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .)
    TIMES           shift and go to state 224
    DIVIDE          shift and go to state 223
    MOD             shift and go to state 230
    PLUS            shift and go to state 229
    MINUS           shift and go to state 233
    RSHIFT          shift and go to state 218
    LSHIFT          shift and go to state 234

  ! TIMES           [ reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MOD             [ reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .) ]
  ! PLUS            [ reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MINUS           [ reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 196 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LT              [ shift and go to state 231 ]
  ! LE              [ shift and go to state 236 ]
  ! GE              [ shift and go to state 235 ]
  ! GT              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 221 ]
  ! NE              [ shift and go to state 228 ]
  ! AND             [ shift and go to state 219 ]
  ! OR              [ shift and go to state 232 ]
  ! XOR             [ shift and go to state 226 ]
  ! LAND            [ shift and go to state 220 ]
  ! LOR             [ shift and go to state 227 ]


state 333

    (228) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list brace_close
    (229) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list COMMA brace_close
    (207) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (249) brace_open -> . LBRACE
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LBRACE          shift and go to state 54
    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    brace_open                     shift and go to state 377
    unary_operator                 shift and go to state 146
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 378

state 334

    (136) type_name -> specifier_qualifier_list abstract_declarator_opt .

    RPAREN          reduce using rule 136 (type_name -> specifier_qualifier_list abstract_declarator_opt .)


state 335

    (137) abstract_declarator -> pointer .
    (138) abstract_declarator -> pointer . direct_abstract_declarator
    (140) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (141) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (142) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (143) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (144) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (145) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (146) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    RPAREN          reduce using rule 137 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 336
    LBRACKET        shift and go to state 208

    direct_abstract_declarator     shift and go to state 304

state 336

    (140) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (146) direct_abstract_declarator -> LPAREN . parameter_type_list_opt RPAREN
    (137) abstract_declarator -> . pointer
    (138) abstract_declarator -> . pointer direct_abstract_declarator
    (139) abstract_declarator -> . direct_abstract_declarator
    (19) parameter_type_list_opt -> . empty
    (20) parameter_type_list_opt -> . parameter_type_list
    (114) pointer -> . TIMES type_qualifier_list_opt
    (115) pointer -> . TIMES type_qualifier_list_opt pointer
    (140) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (141) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (142) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (143) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (144) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (145) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (146) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (251) empty -> .
    (118) parameter_type_list -> . parameter_list
    (119) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (120) parameter_list -> . parameter_declaration
    (121) parameter_list -> . parameter_list COMMA parameter_declaration
    (122) parameter_declaration -> . declaration_specifiers declarator
    (123) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (48) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (49) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (50) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (51) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (72) type_qualifier -> . CONST
    (73) type_qualifier -> . RESTRICT
    (74) type_qualifier -> . VOLATILE
    (58) type_specifier -> . VOID
    (59) type_specifier -> . _BOOL
    (60) type_specifier -> . CHAR
    (61) type_specifier -> . SHORT
    (62) type_specifier -> . INT
    (63) type_specifier -> . LONG
    (64) type_specifier -> . FLOAT
    (65) type_specifier -> . DOUBLE
    (66) type_specifier -> . _COMPLEX
    (67) type_specifier -> . SIGNED
    (68) type_specifier -> . UNSIGNED
    (69) type_specifier -> . typedef_name
    (70) type_specifier -> . enum_specifier
    (71) type_specifier -> . struct_or_union_specifier
    (52) storage_class_specifier -> . AUTO
    (53) storage_class_specifier -> . REGISTER
    (54) storage_class_specifier -> . STATIC
    (55) storage_class_specifier -> . EXTERN
    (56) storage_class_specifier -> . TYPEDEF
    (57) function_specifier -> . INLINE
    (170) typedef_name -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM TYPEID
    (98) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (99) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (100) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (81) struct_or_union_specifier -> . struct_or_union ID
    (82) struct_or_union_specifier -> . struct_or_union TYPEID
    (83) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (84) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (85) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (86) struct_or_union -> . STRUCT
    (87) struct_or_union -> . UNION

    TIMES           shift and go to state 11
    LPAREN          shift and go to state 336
    LBRACKET        shift and go to state 208
    RPAREN          reduce using rule 251 (empty -> .)
    CONST           shift and go to state 26
    RESTRICT        shift and go to state 30
    VOLATILE        shift and go to state 37
    VOID            shift and go to state 23
    _BOOL           shift and go to state 15
    CHAR            shift and go to state 19
    SHORT           shift and go to state 43
    INT             shift and go to state 2
    LONG            shift and go to state 10
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 1
    _COMPLEX        shift and go to state 22
    SIGNED          shift and go to state 3
    UNSIGNED        shift and go to state 45
    AUTO            shift and go to state 35
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 4
    EXTERN          shift and go to state 34
    TYPEDEF         shift and go to state 42
    INLINE          shift and go to state 16
    TYPEID          shift and go to state 36
    ENUM            shift and go to state 9
    STRUCT          shift and go to state 33
    UNION           shift and go to state 40

    pointer                        shift and go to state 335
    struct_or_union_specifier      shift and go to state 31
    storage_class_specifier        shift and go to state 7
    direct_abstract_declarator     shift and go to state 206
    parameter_declaration          shift and go to state 109
    enum_specifier                 shift and go to state 8
    parameter_list                 shift and go to state 110
    type_qualifier                 shift and go to state 39
    parameter_type_list_opt        shift and go to state 308
    type_specifier                 shift and go to state 14
    struct_or_union                shift and go to state 29
    abstract_declarator            shift and go to state 309
    empty                          shift and go to state 307
    declaration_specifiers         shift and go to state 113
    typedef_name                   shift and go to state 48
    function_specifier             shift and go to state 20
    parameter_type_list            shift and go to state 310

state 337

    (234) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    PERIOD          reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    XOREQUAL        reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    TIMESEQUAL      reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQUAL        reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    MODEQUAL        reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQUAL     reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQUAL     reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    ANDEQUAL        reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    OREQUAL         reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    CONDOP          reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 234 (primary_expression -> LPAREN expression RPAREN .)


state 338

    (213) unary_expression -> SIZEOF LPAREN type_name . RPAREN
    (228) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list COMMA brace_close

    RPAREN          shift and go to state 379


state 339

    (225) postfix_expression -> postfix_expression ARROW identifier .

    LBRACKET        reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    LPAREN          reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    PERIOD          reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    ARROW           reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    PLUSPLUS        reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    MINUSMINUS      reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    EQUALS          reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    XOREQUAL        reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    TIMESEQUAL      reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    DIVEQUAL        reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    MODEQUAL        reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    PLUSEQUAL       reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    MINUSEQUAL      reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    LSHIFTEQUAL     reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    RSHIFTEQUAL     reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    ANDEQUAL        reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    OREQUAL         reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    CONDOP          reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    TIMES           reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    DIVIDE          reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    MOD             reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    PLUS            reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    MINUS           reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    RSHIFT          reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    LSHIFT          reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    LT              reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    LE              reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    GE              reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    GT              reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    EQ              reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    NE              reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    AND             reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    OR              reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    XOR             reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    LAND            reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    LOR             reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    COMMA           reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    SEMI            reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    RBRACE          reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    COLON           reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    RBRACKET        reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)
    RPAREN          reduce using rule 225 (postfix_expression -> postfix_expression ARROW identifier .)


state 340

    (223) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PERIOD          reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOREQUAL        reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMESEQUAL      reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQUAL        reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQUAL        reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQUAL       reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQUAL      reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQUAL     reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQUAL     reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDEQUAL        reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OREQUAL         reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CONDOP          reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE              reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE              reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR             reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LAND            reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LOR             reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 223 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 341

    (235) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 235 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 235 (argument_expression_list -> assignment_expression .)


state 342

    (222) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (236) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 380
    COMMA           shift and go to state 381


state 343

    (224) postfix_expression -> postfix_expression PERIOD identifier .

    LBRACKET        reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    LPAREN          reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    PERIOD          reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    ARROW           reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    PLUSPLUS        reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    MINUSMINUS      reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    EQUALS          reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    XOREQUAL        reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    TIMESEQUAL      reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    DIVEQUAL        reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    MODEQUAL        reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    PLUSEQUAL       reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    MINUSEQUAL      reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    LSHIFTEQUAL     reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    RSHIFTEQUAL     reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    ANDEQUAL        reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    OREQUAL         reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    CONDOP          reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    TIMES           reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    DIVIDE          reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    MOD             reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    PLUS            reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    MINUS           reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    RSHIFT          reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    LSHIFT          reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    LT              reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    LE              reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    GE              reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    GT              reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    EQ              reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    NE              reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    AND             reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    OR              reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    XOR             reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    LAND            reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    LOR             reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    COMMA           reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    SEMI            reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    RBRACE          reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    COLON           reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    RBRACKET        reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)
    RPAREN          reduce using rule 224 (postfix_expression -> postfix_expression PERIOD identifier .)


state 344

    (221) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (169) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 382
    COMMA           shift and go to state 281


state 345

    (172) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COLON           reduce using rule 172 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 172 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 172 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 172 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 172 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 172 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 346

    (207) cast_expression -> LPAREN type_name . RPAREN cast_expression
    (228) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list COMMA brace_close

    RPAREN          shift and go to state 383


state 347

    (159) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 384


state 348

    (157) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (169) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 385
    COMMA           shift and go to state 281


state 349

    (152) labeled_statement -> ID COLON statement .

    ID              reduce using rule 152 (labeled_statement -> ID COLON statement .)
    CASE            reduce using rule 152 (labeled_statement -> ID COLON statement .)
    DEFAULT         reduce using rule 152 (labeled_statement -> ID COLON statement .)
    IF              reduce using rule 152 (labeled_statement -> ID COLON statement .)
    SWITCH          reduce using rule 152 (labeled_statement -> ID COLON statement .)
    WHILE           reduce using rule 152 (labeled_statement -> ID COLON statement .)
    DO              reduce using rule 152 (labeled_statement -> ID COLON statement .)
    FOR             reduce using rule 152 (labeled_statement -> ID COLON statement .)
    GOTO            reduce using rule 152 (labeled_statement -> ID COLON statement .)
    BREAK           reduce using rule 152 (labeled_statement -> ID COLON statement .)
    CONTINUE        reduce using rule 152 (labeled_statement -> ID COLON statement .)
    RETURN          reduce using rule 152 (labeled_statement -> ID COLON statement .)
    LBRACE          reduce using rule 152 (labeled_statement -> ID COLON statement .)
    CONST           reduce using rule 152 (labeled_statement -> ID COLON statement .)
    RESTRICT        reduce using rule 152 (labeled_statement -> ID COLON statement .)
    VOLATILE        reduce using rule 152 (labeled_statement -> ID COLON statement .)
    VOID            reduce using rule 152 (labeled_statement -> ID COLON statement .)
    _BOOL           reduce using rule 152 (labeled_statement -> ID COLON statement .)
    CHAR            reduce using rule 152 (labeled_statement -> ID COLON statement .)
    SHORT           reduce using rule 152 (labeled_statement -> ID COLON statement .)
    INT             reduce using rule 152 (labeled_statement -> ID COLON statement .)
    LONG            reduce using rule 152 (labeled_statement -> ID COLON statement .)
    FLOAT           reduce using rule 152 (labeled_statement -> ID COLON statement .)
    DOUBLE          reduce using rule 152 (labeled_statement -> ID COLON statement .)
    _COMPLEX        reduce using rule 152 (labeled_statement -> ID COLON statement .)
    SIGNED          reduce using rule 152 (labeled_statement -> ID COLON statement .)
    UNSIGNED        reduce using rule 152 (labeled_statement -> ID COLON statement .)
    AUTO            reduce using rule 152 (labeled_statement -> ID COLON statement .)
    REGISTER        reduce using rule 152 (labeled_statement -> ID COLON statement .)
    STATIC          reduce using rule 152 (labeled_statement -> ID COLON statement .)
    EXTERN          reduce using rule 152 (labeled_statement -> ID COLON statement .)
    TYPEDEF         reduce using rule 152 (labeled_statement -> ID COLON statement .)
    INLINE          reduce using rule 152 (labeled_statement -> ID COLON statement .)
    TYPEID          reduce using rule 152 (labeled_statement -> ID COLON statement .)
    ENUM            reduce using rule 152 (labeled_statement -> ID COLON statement .)
    STRUCT          reduce using rule 152 (labeled_statement -> ID COLON statement .)
    UNION           reduce using rule 152 (labeled_statement -> ID COLON statement .)
    PLUSPLUS        reduce using rule 152 (labeled_statement -> ID COLON statement .)
    MINUSMINUS      reduce using rule 152 (labeled_statement -> ID COLON statement .)
    SIZEOF          reduce using rule 152 (labeled_statement -> ID COLON statement .)
    LPAREN          reduce using rule 152 (labeled_statement -> ID COLON statement .)
    AND             reduce using rule 152 (labeled_statement -> ID COLON statement .)
    TIMES           reduce using rule 152 (labeled_statement -> ID COLON statement .)
    PLUS            reduce using rule 152 (labeled_statement -> ID COLON statement .)
    MINUS           reduce using rule 152 (labeled_statement -> ID COLON statement .)
    NOT             reduce using rule 152 (labeled_statement -> ID COLON statement .)
    LNOT            reduce using rule 152 (labeled_statement -> ID COLON statement .)
    INT_CONST_DEC   reduce using rule 152 (labeled_statement -> ID COLON statement .)
    INT_CONST_OCT   reduce using rule 152 (labeled_statement -> ID COLON statement .)
    INT_CONST_HEX   reduce using rule 152 (labeled_statement -> ID COLON statement .)
    FLOAT_CONST     reduce using rule 152 (labeled_statement -> ID COLON statement .)
    HEX_FLOAT_CONST reduce using rule 152 (labeled_statement -> ID COLON statement .)
    CHAR_CONST      reduce using rule 152 (labeled_statement -> ID COLON statement .)
    WCHAR_CONST     reduce using rule 152 (labeled_statement -> ID COLON statement .)
    STRING_LITERAL  reduce using rule 152 (labeled_statement -> ID COLON statement .)
    WSTRING_LITERAL reduce using rule 152 (labeled_statement -> ID COLON statement .)
    SEMI            reduce using rule 152 (labeled_statement -> ID COLON statement .)
    RBRACE          reduce using rule 152 (labeled_statement -> ID COLON statement .)
    ELSE            reduce using rule 152 (labeled_statement -> ID COLON statement .)


state 350

    (155) selection_statement -> IF LPAREN expression . RPAREN statement
    (156) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (169) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 386
    COMMA           shift and go to state 281


state 351

    (161) iteration_statement -> FOR LPAREN declaration . expression_opt SEMI expression_opt RPAREN statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (251) empty -> .
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    SEMI            reduce using rule 251 (empty -> .)
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    primary_expression             shift and go to state 115
    expression_opt                 shift and go to state 387
    postfix_expression             shift and go to state 136
    expression                     shift and go to state 175
    conditional_expression         shift and go to state 145
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    cast_expression                shift and go to state 142
    constant                       shift and go to state 124
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    empty                          shift and go to state 270
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    assignment_expression          shift and go to state 159

state 352

    (160) iteration_statement -> FOR LPAREN expression_opt . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 388


state 353

    (154) labeled_statement -> DEFAULT COLON statement .

    ID              reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    LBRACE          reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    CONST           reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    RESTRICT        reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    VOLATILE        reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    VOID            reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    _BOOL           reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    CHAR            reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    SHORT           reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    INT             reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    LONG            reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT           reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLE          reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    _COMPLEX        reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    SIGNED          reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    UNSIGNED        reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    AUTO            reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    REGISTER        reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    STATIC          reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    EXTERN          reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    TYPEDEF         reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    INLINE          reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    TYPEID          reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    ENUM            reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    STRUCT          reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    UNION           reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    PLUSPLUS        reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    MINUSMINUS      reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    AND             reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    TIMES           reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    NOT             reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    LNOT            reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    INT_CONST_DEC   reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    INT_CONST_OCT   reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    INT_CONST_HEX   reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT_CONST     reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    HEX_FLOAT_CONST reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    CHAR_CONST      reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    WCHAR_CONST     reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    STRING_LITERAL  reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    WSTRING_LITERAL reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    SEMI            reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    RBRACE          reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 154 (labeled_statement -> DEFAULT COLON statement .)


state 354

    (162) jump_statement -> GOTO ID SEMI .

    ID              reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    CASE            reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    DEFAULT         reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    IF              reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    SWITCH          reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    WHILE           reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    DO              reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    FOR             reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    GOTO            reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    BREAK           reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    CONTINUE        reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    RETURN          reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    LBRACE          reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    CONST           reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    RESTRICT        reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    VOLATILE        reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    VOID            reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    _BOOL           reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    CHAR            reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    SHORT           reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    INT             reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    LONG            reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    FLOAT           reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    DOUBLE          reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    _COMPLEX        reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    SIGNED          reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    UNSIGNED        reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    AUTO            reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    REGISTER        reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    STATIC          reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    EXTERN          reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    TYPEDEF         reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    INLINE          reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    TYPEID          reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    ENUM            reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    STRUCT          reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    UNION           reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    PLUSPLUS        reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    MINUSMINUS      reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    SIZEOF          reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    LPAREN          reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    AND             reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    TIMES           reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    PLUS            reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    MINUS           reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    NOT             reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    LNOT            reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_DEC   reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_OCT   reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_HEX   reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    FLOAT_CONST     reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    HEX_FLOAT_CONST reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    CHAR_CONST      reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    WCHAR_CONST     reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    STRING_LITERAL  reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    WSTRING_LITERAL reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    SEMI            reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    RBRACE          reduce using rule 162 (jump_statement -> GOTO ID SEMI .)
    ELSE            reduce using rule 162 (jump_statement -> GOTO ID SEMI .)


state 355

    (153) labeled_statement -> CASE constant_expression COLON . statement
    (38) statement -> . labeled_statement
    (39) statement -> . expression_statement
    (40) statement -> . compound_statement
    (41) statement -> . selection_statement
    (42) statement -> . iteration_statement
    (43) statement -> . jump_statement
    (152) labeled_statement -> . ID COLON statement
    (153) labeled_statement -> . CASE constant_expression COLON statement
    (154) labeled_statement -> . DEFAULT COLON statement
    (167) expression_statement -> . expression_opt SEMI
    (151) compound_statement -> . brace_open block_item_list_opt brace_close
    (155) selection_statement -> . IF LPAREN expression RPAREN statement
    (156) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (157) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (158) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (159) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (160) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (161) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (162) jump_statement -> . GOTO ID SEMI
    (163) jump_statement -> . BREAK SEMI
    (164) jump_statement -> . CONTINUE SEMI
    (165) jump_statement -> . RETURN expression SEMI
    (166) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (249) brace_open -> . LBRACE
    (251) empty -> .
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 160
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 165
    IF              shift and go to state 161
    SWITCH          shift and go to state 155
    WHILE           shift and go to state 180
    DO              shift and go to state 154
    FOR             shift and go to state 164
    GOTO            shift and go to state 167
    BREAK           shift and go to state 177
    CONTINUE        shift and go to state 158
    RETURN          shift and go to state 179
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 251 (empty -> .)
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    expression_opt                 shift and go to state 173
    compound_statement             shift and go to state 163
    brace_open                     shift and go to state 91
    jump_statement                 shift and go to state 174
    postfix_expression             shift and go to state 136
    expression                     shift and go to state 175
    conditional_expression         shift and go to state 145
    statement                      shift and go to state 389
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    cast_expression                shift and go to state 142
    labeled_statement              shift and go to state 169
    unified_string_literal         shift and go to state 125
    iteration_statement            shift and go to state 156
    unary_operator                 shift and go to state 146
    selection_statement            shift and go to state 157
    empty                          shift and go to state 270
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    expression_statement           shift and go to state 178
    assignment_expression          shift and go to state 159

state 356

    (169) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 169 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 169 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 169 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 169 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 169 (expression -> expression COMMA assignment_expression .)


state 357

    (165) jump_statement -> RETURN expression SEMI .

    ID              reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    CASE            reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    DEFAULT         reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    SWITCH          reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    DO              reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    GOTO            reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    CONTINUE        reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    CONST           reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    RESTRICT        reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    VOLATILE        reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    VOID            reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    _BOOL           reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    CHAR            reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    SHORT           reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    INT             reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    LONG            reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    FLOAT           reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    DOUBLE          reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    _COMPLEX        reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    SIGNED          reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    UNSIGNED        reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    AUTO            reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    REGISTER        reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    STATIC          reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    EXTERN          reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    TYPEDEF         reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    INLINE          reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    TYPEID          reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    ENUM            reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    STRUCT          reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    UNION           reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    PLUSPLUS        reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    MINUSMINUS      reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    SIZEOF          reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    AND             reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    TIMES           reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    NOT             reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    LNOT            reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_DEC   reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_OCT   reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_HEX   reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    FLOAT_CONST     reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    HEX_FLOAT_CONST reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    CHAR_CONST      reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    WCHAR_CONST     reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    STRING_LITERAL  reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    WSTRING_LITERAL reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    RBRACE          reduce using rule 165 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 165 (jump_statement -> RETURN expression SEMI .)


state 358

    (158) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (169) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 390
    COMMA           shift and go to state 281


state 359

    (92) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    COMMA           reduce using rule 92 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    SEMI            reduce using rule 92 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 360

    (94) struct_declarator -> declarator COLON constant_expression .

    COMMA           reduce using rule 94 (struct_declarator -> declarator COLON constant_expression .)
    SEMI            reduce using rule 94 (struct_declarator -> declarator COLON constant_expression .)


state 361

    (128) initializer -> brace_open initializer_list COMMA . brace_close
    (130) initializer_list -> initializer_list COMMA . designation_opt initializer
    (250) brace_close -> . RBRACE
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (251) empty -> .
    (131) designation -> . designator_list EQUALS
    (132) designator_list -> . designator
    (133) designator_list -> . designator_list designator
    (134) designator -> . LBRACKET constant_expression RBRACKET
    (135) designator -> . PERIOD identifier

    RBRACE          shift and go to state 150
    LBRACE          reduce using rule 251 (empty -> .)
    PLUSPLUS        reduce using rule 251 (empty -> .)
    MINUSMINUS      reduce using rule 251 (empty -> .)
    SIZEOF          reduce using rule 251 (empty -> .)
    LPAREN          reduce using rule 251 (empty -> .)
    AND             reduce using rule 251 (empty -> .)
    TIMES           reduce using rule 251 (empty -> .)
    PLUS            reduce using rule 251 (empty -> .)
    MINUS           reduce using rule 251 (empty -> .)
    NOT             reduce using rule 251 (empty -> .)
    LNOT            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)
    INT_CONST_DEC   reduce using rule 251 (empty -> .)
    INT_CONST_OCT   reduce using rule 251 (empty -> .)
    INT_CONST_HEX   reduce using rule 251 (empty -> .)
    FLOAT_CONST     reduce using rule 251 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 251 (empty -> .)
    CHAR_CONST      reduce using rule 251 (empty -> .)
    WCHAR_CONST     reduce using rule 251 (empty -> .)
    STRING_LITERAL  reduce using rule 251 (empty -> .)
    WSTRING_LITERAL reduce using rule 251 (empty -> .)
    LBRACKET        shift and go to state 300
    PERIOD          shift and go to state 298

    empty                          shift and go to state 297
    designator                     shift and go to state 293
    designator_list                shift and go to state 299
    designation                    shift and go to state 294
    brace_close                    shift and go to state 391
    designation_opt                shift and go to state 392

state 362

    (127) initializer -> brace_open initializer_list brace_close .

    COMMA           reduce using rule 127 (initializer -> brace_open initializer_list brace_close .)
    RBRACE          reduce using rule 127 (initializer -> brace_open initializer_list brace_close .)
    SEMI            reduce using rule 127 (initializer -> brace_open initializer_list brace_close .)


state 363

    (129) initializer_list -> designation_opt initializer .

    COMMA           reduce using rule 129 (initializer_list -> designation_opt initializer .)
    RBRACE          reduce using rule 129 (initializer_list -> designation_opt initializer .)


state 364

    (135) designator -> PERIOD identifier .

    EQUALS          reduce using rule 135 (designator -> PERIOD identifier .)
    LBRACKET        reduce using rule 135 (designator -> PERIOD identifier .)
    PERIOD          reduce using rule 135 (designator -> PERIOD identifier .)


state 365

    (131) designation -> designator_list EQUALS .

    LBRACE          reduce using rule 131 (designation -> designator_list EQUALS .)
    PLUSPLUS        reduce using rule 131 (designation -> designator_list EQUALS .)
    MINUSMINUS      reduce using rule 131 (designation -> designator_list EQUALS .)
    SIZEOF          reduce using rule 131 (designation -> designator_list EQUALS .)
    LPAREN          reduce using rule 131 (designation -> designator_list EQUALS .)
    AND             reduce using rule 131 (designation -> designator_list EQUALS .)
    TIMES           reduce using rule 131 (designation -> designator_list EQUALS .)
    PLUS            reduce using rule 131 (designation -> designator_list EQUALS .)
    MINUS           reduce using rule 131 (designation -> designator_list EQUALS .)
    NOT             reduce using rule 131 (designation -> designator_list EQUALS .)
    LNOT            reduce using rule 131 (designation -> designator_list EQUALS .)
    ID              reduce using rule 131 (designation -> designator_list EQUALS .)
    INT_CONST_DEC   reduce using rule 131 (designation -> designator_list EQUALS .)
    INT_CONST_OCT   reduce using rule 131 (designation -> designator_list EQUALS .)
    INT_CONST_HEX   reduce using rule 131 (designation -> designator_list EQUALS .)
    FLOAT_CONST     reduce using rule 131 (designation -> designator_list EQUALS .)
    HEX_FLOAT_CONST reduce using rule 131 (designation -> designator_list EQUALS .)
    CHAR_CONST      reduce using rule 131 (designation -> designator_list EQUALS .)
    WCHAR_CONST     reduce using rule 131 (designation -> designator_list EQUALS .)
    STRING_LITERAL  reduce using rule 131 (designation -> designator_list EQUALS .)
    WSTRING_LITERAL reduce using rule 131 (designation -> designator_list EQUALS .)


state 366

    (133) designator_list -> designator_list designator .

    EQUALS          reduce using rule 133 (designator_list -> designator_list designator .)
    LBRACKET        reduce using rule 133 (designator_list -> designator_list designator .)
    PERIOD          reduce using rule 133 (designator_list -> designator_list designator .)


state 367

    (134) designator -> LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 393


state 368

    (145) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt . RPAREN

    RPAREN          shift and go to state 394


state 369

    (143) direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES . RBRACKET
    (215) unary_operator -> TIMES .

    RBRACKET        shift and go to state 395
    LPAREN          reduce using rule 215 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 215 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 215 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 215 (unary_operator -> TIMES .)
    AND             reduce using rule 215 (unary_operator -> TIMES .)
    TIMES           reduce using rule 215 (unary_operator -> TIMES .)
    PLUS            reduce using rule 215 (unary_operator -> TIMES .)
    MINUS           reduce using rule 215 (unary_operator -> TIMES .)
    NOT             reduce using rule 215 (unary_operator -> TIMES .)
    LNOT            reduce using rule 215 (unary_operator -> TIMES .)
    ID              reduce using rule 215 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 215 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 215 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 215 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 215 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 215 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 215 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 215 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 215 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 215 (unary_operator -> TIMES .)


state 370

    (141) direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 396


state 371

    (146) direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .

    LBRACKET        reduce using rule 146 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    LPAREN          reduce using rule 146 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    RPAREN          reduce using rule 146 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    COMMA           reduce using rule 146 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)


state 372

    (140) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .

    LBRACKET        reduce using rule 140 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LPAREN          reduce using rule 140 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 140 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 140 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 373

    (144) direct_abstract_declarator -> LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 144 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 144 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 144 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 144 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)


state 374

    (142) direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 142 (direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 142 (direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 142 (direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 142 (direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .)


state 375

    (228) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list brace_close
    (229) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list COMMA brace_close
    (249) brace_open -> . LBRACE

    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 377

state 376

    (186) conditional_expression -> binary_expression CONDOP expression COLON . conditional_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    conditional_expression         shift and go to state 397
    unary_operator                 shift and go to state 146
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 377

    (228) postfix_expression -> LPAREN type_name RPAREN brace_open . initializer_list brace_close
    (229) postfix_expression -> LPAREN type_name RPAREN brace_open . initializer_list COMMA brace_close
    (129) initializer_list -> . designation_opt initializer
    (130) initializer_list -> . initializer_list COMMA designation_opt initializer
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (251) empty -> .
    (131) designation -> . designator_list EQUALS
    (132) designator_list -> . designator
    (133) designator_list -> . designator_list designator
    (134) designator -> . LBRACKET constant_expression RBRACKET
    (135) designator -> . PERIOD identifier

    LBRACE          reduce using rule 251 (empty -> .)
    PLUSPLUS        reduce using rule 251 (empty -> .)
    MINUSMINUS      reduce using rule 251 (empty -> .)
    SIZEOF          reduce using rule 251 (empty -> .)
    LPAREN          reduce using rule 251 (empty -> .)
    AND             reduce using rule 251 (empty -> .)
    TIMES           reduce using rule 251 (empty -> .)
    PLUS            reduce using rule 251 (empty -> .)
    MINUS           reduce using rule 251 (empty -> .)
    NOT             reduce using rule 251 (empty -> .)
    LNOT            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)
    INT_CONST_DEC   reduce using rule 251 (empty -> .)
    INT_CONST_OCT   reduce using rule 251 (empty -> .)
    INT_CONST_HEX   reduce using rule 251 (empty -> .)
    FLOAT_CONST     reduce using rule 251 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 251 (empty -> .)
    CHAR_CONST      reduce using rule 251 (empty -> .)
    WCHAR_CONST     reduce using rule 251 (empty -> .)
    STRING_LITERAL  reduce using rule 251 (empty -> .)
    WSTRING_LITERAL reduce using rule 251 (empty -> .)
    LBRACKET        shift and go to state 300
    PERIOD          shift and go to state 298

    designator                     shift and go to state 293
    designation                    shift and go to state 294
    initializer_list               shift and go to state 398
    designation_opt                shift and go to state 296
    empty                          shift and go to state 297
    designator_list                shift and go to state 299

state 378

    (207) cast_expression -> LPAREN type_name RPAREN cast_expression .

    CONDOP          reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    TIMES           reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD             reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LT              reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LE              reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GE              reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GT              reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQ              reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NE              reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND             reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR              reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR             reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LAND            reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LOR             reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACKET        reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMI            reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACE          reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOREQUAL        reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    TIMESEQUAL      reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVEQUAL        reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQUAL        reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQUAL       reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQUAL      reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQUAL     reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQUAL     reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDEQUAL        reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OREQUAL         reduce using rule 207 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 379

    (213) unary_expression -> SIZEOF LPAREN type_name RPAREN .
    (228) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list brace_close
    (229) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list COMMA brace_close
    (249) brace_open -> . LBRACE

    TIMES           reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LT              reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LE              reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GE              reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GT              reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQ              reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NE              reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND             reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR              reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LAND            reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LOR             reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    CONDOP          reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACKET        reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMI            reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQUALS          reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOREQUAL        reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMESEQUAL      reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVEQUAL        reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQUAL        reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQUAL       reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQUAL      reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQUAL     reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQUAL     reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDEQUAL        reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OREQUAL         reduce using rule 213 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 377

state 380

    (222) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LBRACKET        reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PERIOD          reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ARROW           reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSPLUS        reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSMINUS      reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOREQUAL        reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMESEQUAL      reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVEQUAL        reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MODEQUAL        reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSEQUAL       reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSEQUAL      reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFTEQUAL     reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFTEQUAL     reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ANDEQUAL        reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OREQUAL         reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CONDOP          reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFT          reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFT          reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NE              reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR             reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMI            reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 222 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 381

    (236) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    binary_expression              shift and go to state 128
    unary_operator                 shift and go to state 146
    conditional_expression         shift and go to state 145
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    assignment_expression          shift and go to state 399
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 382

    (221) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PERIOD          reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOREQUAL        reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESEQUAL      reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVEQUAL        reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODEQUAL        reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSEQUAL       reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSEQUAL      reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFTEQUAL     reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFTEQUAL     reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ANDEQUAL        reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OREQUAL         reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CONDOP          reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOR             reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LAND            reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOR             reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 221 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 383

    (207) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (228) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list brace_close
    (229) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list COMMA brace_close
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (249) brace_open -> . LBRACE
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 261
    LBRACE          shift and go to state 54
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    brace_open                     shift and go to state 377
    unary_operator                 shift and go to state 146
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 378

state 384

    (159) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMI
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    binary_expression              shift and go to state 128
    unary_operator                 shift and go to state 146
    expression                     shift and go to state 400
    conditional_expression         shift and go to state 145
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    assignment_expression          shift and go to state 159
    postfix_expression             shift and go to state 136
    cast_expression                shift and go to state 142

state 385

    (157) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (38) statement -> . labeled_statement
    (39) statement -> . expression_statement
    (40) statement -> . compound_statement
    (41) statement -> . selection_statement
    (42) statement -> . iteration_statement
    (43) statement -> . jump_statement
    (152) labeled_statement -> . ID COLON statement
    (153) labeled_statement -> . CASE constant_expression COLON statement
    (154) labeled_statement -> . DEFAULT COLON statement
    (167) expression_statement -> . expression_opt SEMI
    (151) compound_statement -> . brace_open block_item_list_opt brace_close
    (155) selection_statement -> . IF LPAREN expression RPAREN statement
    (156) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (157) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (158) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (159) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (160) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (161) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (162) jump_statement -> . GOTO ID SEMI
    (163) jump_statement -> . BREAK SEMI
    (164) jump_statement -> . CONTINUE SEMI
    (165) jump_statement -> . RETURN expression SEMI
    (166) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (249) brace_open -> . LBRACE
    (251) empty -> .
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 160
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 165
    IF              shift and go to state 161
    SWITCH          shift and go to state 155
    WHILE           shift and go to state 180
    DO              shift and go to state 154
    FOR             shift and go to state 164
    GOTO            shift and go to state 167
    BREAK           shift and go to state 177
    CONTINUE        shift and go to state 158
    RETURN          shift and go to state 179
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 251 (empty -> .)
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    expression_opt                 shift and go to state 173
    compound_statement             shift and go to state 163
    brace_open                     shift and go to state 91
    jump_statement                 shift and go to state 174
    postfix_expression             shift and go to state 136
    expression                     shift and go to state 175
    conditional_expression         shift and go to state 145
    statement                      shift and go to state 401
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    cast_expression                shift and go to state 142
    labeled_statement              shift and go to state 169
    unified_string_literal         shift and go to state 125
    iteration_statement            shift and go to state 156
    unary_operator                 shift and go to state 146
    selection_statement            shift and go to state 157
    empty                          shift and go to state 270
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    expression_statement           shift and go to state 178
    assignment_expression          shift and go to state 159

state 386

    (155) selection_statement -> IF LPAREN expression RPAREN . statement
    (156) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (38) statement -> . labeled_statement
    (39) statement -> . expression_statement
    (40) statement -> . compound_statement
    (41) statement -> . selection_statement
    (42) statement -> . iteration_statement
    (43) statement -> . jump_statement
    (152) labeled_statement -> . ID COLON statement
    (153) labeled_statement -> . CASE constant_expression COLON statement
    (154) labeled_statement -> . DEFAULT COLON statement
    (167) expression_statement -> . expression_opt SEMI
    (151) compound_statement -> . brace_open block_item_list_opt brace_close
    (155) selection_statement -> . IF LPAREN expression RPAREN statement
    (156) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (157) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (158) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (159) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (160) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (161) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (162) jump_statement -> . GOTO ID SEMI
    (163) jump_statement -> . BREAK SEMI
    (164) jump_statement -> . CONTINUE SEMI
    (165) jump_statement -> . RETURN expression SEMI
    (166) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (249) brace_open -> . LBRACE
    (251) empty -> .
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 160
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 165
    IF              shift and go to state 161
    SWITCH          shift and go to state 155
    WHILE           shift and go to state 180
    DO              shift and go to state 154
    FOR             shift and go to state 164
    GOTO            shift and go to state 167
    BREAK           shift and go to state 177
    CONTINUE        shift and go to state 158
    RETURN          shift and go to state 179
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 251 (empty -> .)
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    expression_opt                 shift and go to state 173
    compound_statement             shift and go to state 163
    brace_open                     shift and go to state 91
    jump_statement                 shift and go to state 174
    postfix_expression             shift and go to state 136
    expression                     shift and go to state 175
    conditional_expression         shift and go to state 145
    statement                      shift and go to state 402
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    cast_expression                shift and go to state 142
    labeled_statement              shift and go to state 169
    unified_string_literal         shift and go to state 125
    iteration_statement            shift and go to state 156
    unary_operator                 shift and go to state 146
    selection_statement            shift and go to state 157
    empty                          shift and go to state 270
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    expression_statement           shift and go to state 178
    assignment_expression          shift and go to state 159

state 387

    (161) iteration_statement -> FOR LPAREN declaration expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 403


state 388

    (160) iteration_statement -> FOR LPAREN expression_opt SEMI . expression_opt SEMI expression_opt RPAREN statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (251) empty -> .
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    SEMI            reduce using rule 251 (empty -> .)
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    primary_expression             shift and go to state 115
    expression_opt                 shift and go to state 404
    postfix_expression             shift and go to state 136
    expression                     shift and go to state 175
    conditional_expression         shift and go to state 145
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    cast_expression                shift and go to state 142
    constant                       shift and go to state 124
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    empty                          shift and go to state 270
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    assignment_expression          shift and go to state 159

state 389

    (153) labeled_statement -> CASE constant_expression COLON statement .

    ID              reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    LBRACE          reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    CONST           reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    RESTRICT        reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    VOLATILE        reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    VOID            reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    _BOOL           reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR            reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    SHORT           reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    INT             reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    LONG            reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT           reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLE          reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    _COMPLEX        reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    SIGNED          reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    UNSIGNED        reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    AUTO            reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    REGISTER        reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    STATIC          reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    EXTERN          reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEDEF         reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    INLINE          reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEID          reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    ENUM            reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    STRUCT          reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    UNION           reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUSPLUS        reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUSMINUS      reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    AND             reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    TIMES           reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS            reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS           reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    NOT             reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    LNOT            reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    INT_CONST_DEC   reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    INT_CONST_OCT   reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    INT_CONST_HEX   reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT_CONST     reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    HEX_FLOAT_CONST reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR_CONST      reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    WCHAR_CONST     reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING_LITERAL  reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    WSTRING_LITERAL reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMI            reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    RBRACE          reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 153 (labeled_statement -> CASE constant_expression COLON statement .)


state 390

    (158) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (38) statement -> . labeled_statement
    (39) statement -> . expression_statement
    (40) statement -> . compound_statement
    (41) statement -> . selection_statement
    (42) statement -> . iteration_statement
    (43) statement -> . jump_statement
    (152) labeled_statement -> . ID COLON statement
    (153) labeled_statement -> . CASE constant_expression COLON statement
    (154) labeled_statement -> . DEFAULT COLON statement
    (167) expression_statement -> . expression_opt SEMI
    (151) compound_statement -> . brace_open block_item_list_opt brace_close
    (155) selection_statement -> . IF LPAREN expression RPAREN statement
    (156) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (157) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (158) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (159) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (160) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (161) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (162) jump_statement -> . GOTO ID SEMI
    (163) jump_statement -> . BREAK SEMI
    (164) jump_statement -> . CONTINUE SEMI
    (165) jump_statement -> . RETURN expression SEMI
    (166) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (249) brace_open -> . LBRACE
    (251) empty -> .
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 160
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 165
    IF              shift and go to state 161
    SWITCH          shift and go to state 155
    WHILE           shift and go to state 180
    DO              shift and go to state 154
    FOR             shift and go to state 164
    GOTO            shift and go to state 167
    BREAK           shift and go to state 177
    CONTINUE        shift and go to state 158
    RETURN          shift and go to state 179
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 251 (empty -> .)
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    expression_opt                 shift and go to state 173
    compound_statement             shift and go to state 163
    brace_open                     shift and go to state 91
    jump_statement                 shift and go to state 174
    postfix_expression             shift and go to state 136
    expression                     shift and go to state 175
    conditional_expression         shift and go to state 145
    statement                      shift and go to state 405
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    cast_expression                shift and go to state 142
    labeled_statement              shift and go to state 169
    unified_string_literal         shift and go to state 125
    iteration_statement            shift and go to state 156
    unary_operator                 shift and go to state 146
    selection_statement            shift and go to state 157
    empty                          shift and go to state 270
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    expression_statement           shift and go to state 178
    assignment_expression          shift and go to state 159

state 391

    (128) initializer -> brace_open initializer_list COMMA brace_close .

    COMMA           reduce using rule 128 (initializer -> brace_open initializer_list COMMA brace_close .)
    RBRACE          reduce using rule 128 (initializer -> brace_open initializer_list COMMA brace_close .)
    SEMI            reduce using rule 128 (initializer -> brace_open initializer_list COMMA brace_close .)


state 392

    (130) initializer_list -> initializer_list COMMA designation_opt . initializer
    (126) initializer -> . assignment_expression
    (127) initializer -> . brace_open initializer_list brace_close
    (128) initializer -> . brace_open initializer_list COMMA brace_close
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (249) brace_open -> . LBRACE
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LBRACE          shift and go to state 54
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    unified_string_literal         shift and go to state 125
    brace_open                     shift and go to state 197
    binary_expression              shift and go to state 128
    conditional_expression         shift and go to state 145
    unary_operator                 shift and go to state 146
    unified_wstring_literal        shift and go to state 121
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    assignment_expression          shift and go to state 198
    postfix_expression             shift and go to state 136
    initializer                    shift and go to state 406
    cast_expression                shift and go to state 142

state 393

    (134) designator -> LBRACKET constant_expression RBRACKET .

    EQUALS          reduce using rule 134 (designator -> LBRACKET constant_expression RBRACKET .)
    LBRACKET        reduce using rule 134 (designator -> LBRACKET constant_expression RBRACKET .)
    PERIOD          reduce using rule 134 (designator -> LBRACKET constant_expression RBRACKET .)


state 394

    (145) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .

    LBRACKET        reduce using rule 145 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    LPAREN          reduce using rule 145 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    RPAREN          reduce using rule 145 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    COMMA           reduce using rule 145 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)


state 395

    (143) direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 143 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)


state 396

    (141) direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 141 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 141 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 141 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 141 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)


state 397

    (186) conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .

    COMMA           reduce using rule 186 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    SEMI            reduce using rule 186 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    RPAREN          reduce using rule 186 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    COLON           reduce using rule 186 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    RBRACE          reduce using rule 186 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    RBRACKET        reduce using rule 186 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)


state 398

    (228) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list . brace_close
    (229) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list . COMMA brace_close
    (130) initializer_list -> initializer_list . COMMA designation_opt initializer
    (250) brace_close -> . RBRACE

    COMMA           shift and go to state 408
    RBRACE          shift and go to state 150

    brace_close                    shift and go to state 407

state 399

    (236) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 236 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 236 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 400

    (159) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMI
    (169) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 409
    COMMA           shift and go to state 281


state 401

    (157) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    ID              reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONST           reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RESTRICT        reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOID            reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    _BOOL           reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT             reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LONG            reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    _COMPLEX        reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEID          reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNION           reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AND             reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOT             reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT_CONST_DEC   reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT_CONST_OCT   reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT_CONST_HEX   reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    HEX_FLOAT_CONST reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WCHAR_CONST     reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WSTRING_LITERAL reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 157 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 402

    (155) selection_statement -> IF LPAREN expression RPAREN statement .
    (156) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    ID              reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RESTRICT        reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    _BOOL           reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LONG            reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    _COMPLEX        reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEID          reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNION           reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AND             reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST_DEC   reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST_OCT   reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST_HEX   reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    HEX_FLOAT_CONST reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WCHAR_CONST     reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WSTRING_LITERAL reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 410

  ! ELSE            [ reduce using rule 155 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 403

    (161) iteration_statement -> FOR LPAREN declaration expression_opt SEMI . expression_opt RPAREN statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (251) empty -> .
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RPAREN          reduce using rule 251 (empty -> .)
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    primary_expression             shift and go to state 115
    expression_opt                 shift and go to state 411
    postfix_expression             shift and go to state 136
    expression                     shift and go to state 175
    conditional_expression         shift and go to state 145
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    cast_expression                shift and go to state 142
    constant                       shift and go to state 124
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    empty                          shift and go to state 270
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    assignment_expression          shift and go to state 159

state 404

    (160) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 412


state 405

    (158) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    ID              reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONST           reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RESTRICT        reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    _BOOL           reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LONG            reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    _COMPLEX        reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEID          reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNION           reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AND             reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST_DEC   reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST_OCT   reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST_HEX   reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    HEX_FLOAT_CONST reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WCHAR_CONST     reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WSTRING_LITERAL reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 158 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 406

    (130) initializer_list -> initializer_list COMMA designation_opt initializer .

    COMMA           reduce using rule 130 (initializer_list -> initializer_list COMMA designation_opt initializer .)
    RBRACE          reduce using rule 130 (initializer_list -> initializer_list COMMA designation_opt initializer .)


state 407

    (228) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .

    LBRACKET        reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LPAREN          reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    PERIOD          reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    ARROW           reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    PLUSPLUS        reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MINUSMINUS      reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    EQUALS          reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    XOREQUAL        reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    TIMESEQUAL      reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    DIVEQUAL        reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MODEQUAL        reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    PLUSEQUAL       reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MINUSEQUAL      reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LSHIFTEQUAL     reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RSHIFTEQUAL     reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    ANDEQUAL        reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    OREQUAL         reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    CONDOP          reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    TIMES           reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    DIVIDE          reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MOD             reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    PLUS            reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MINUS           reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RSHIFT          reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LSHIFT          reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LT              reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LE              reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    GE              reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    GT              reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    EQ              reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    NE              reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    AND             reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    OR              reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    XOR             reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LAND            reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LOR             reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    COMMA           reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    SEMI            reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RBRACE          reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    COLON           reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RBRACKET        reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RPAREN          reduce using rule 228 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)


state 408

    (229) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA . brace_close
    (130) initializer_list -> initializer_list COMMA . designation_opt initializer
    (250) brace_close -> . RBRACE
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (251) empty -> .
    (131) designation -> . designator_list EQUALS
    (132) designator_list -> . designator
    (133) designator_list -> . designator_list designator
    (134) designator -> . LBRACKET constant_expression RBRACKET
    (135) designator -> . PERIOD identifier

    RBRACE          shift and go to state 150
    LBRACE          reduce using rule 251 (empty -> .)
    PLUSPLUS        reduce using rule 251 (empty -> .)
    MINUSMINUS      reduce using rule 251 (empty -> .)
    SIZEOF          reduce using rule 251 (empty -> .)
    LPAREN          reduce using rule 251 (empty -> .)
    AND             reduce using rule 251 (empty -> .)
    TIMES           reduce using rule 251 (empty -> .)
    PLUS            reduce using rule 251 (empty -> .)
    MINUS           reduce using rule 251 (empty -> .)
    NOT             reduce using rule 251 (empty -> .)
    LNOT            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)
    INT_CONST_DEC   reduce using rule 251 (empty -> .)
    INT_CONST_OCT   reduce using rule 251 (empty -> .)
    INT_CONST_HEX   reduce using rule 251 (empty -> .)
    FLOAT_CONST     reduce using rule 251 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 251 (empty -> .)
    CHAR_CONST      reduce using rule 251 (empty -> .)
    WCHAR_CONST     reduce using rule 251 (empty -> .)
    STRING_LITERAL  reduce using rule 251 (empty -> .)
    WSTRING_LITERAL reduce using rule 251 (empty -> .)
    LBRACKET        shift and go to state 300
    PERIOD          shift and go to state 298

    designator                     shift and go to state 293
    designation                    shift and go to state 294
    brace_close                    shift and go to state 413
    designation_opt                shift and go to state 392
    empty                          shift and go to state 297
    designator_list                shift and go to state 299

state 409

    (159) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 414


state 410

    (156) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (38) statement -> . labeled_statement
    (39) statement -> . expression_statement
    (40) statement -> . compound_statement
    (41) statement -> . selection_statement
    (42) statement -> . iteration_statement
    (43) statement -> . jump_statement
    (152) labeled_statement -> . ID COLON statement
    (153) labeled_statement -> . CASE constant_expression COLON statement
    (154) labeled_statement -> . DEFAULT COLON statement
    (167) expression_statement -> . expression_opt SEMI
    (151) compound_statement -> . brace_open block_item_list_opt brace_close
    (155) selection_statement -> . IF LPAREN expression RPAREN statement
    (156) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (157) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (158) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (159) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (160) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (161) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (162) jump_statement -> . GOTO ID SEMI
    (163) jump_statement -> . BREAK SEMI
    (164) jump_statement -> . CONTINUE SEMI
    (165) jump_statement -> . RETURN expression SEMI
    (166) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (249) brace_open -> . LBRACE
    (251) empty -> .
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 160
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 165
    IF              shift and go to state 161
    SWITCH          shift and go to state 155
    WHILE           shift and go to state 180
    DO              shift and go to state 154
    FOR             shift and go to state 164
    GOTO            shift and go to state 167
    BREAK           shift and go to state 177
    CONTINUE        shift and go to state 158
    RETURN          shift and go to state 179
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 251 (empty -> .)
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    expression_opt                 shift and go to state 173
    compound_statement             shift and go to state 163
    brace_open                     shift and go to state 91
    jump_statement                 shift and go to state 174
    postfix_expression             shift and go to state 136
    expression                     shift and go to state 175
    conditional_expression         shift and go to state 145
    statement                      shift and go to state 415
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    cast_expression                shift and go to state 142
    labeled_statement              shift and go to state 169
    unified_string_literal         shift and go to state 125
    iteration_statement            shift and go to state 156
    unary_operator                 shift and go to state 146
    selection_statement            shift and go to state 157
    empty                          shift and go to state 270
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    expression_statement           shift and go to state 178
    assignment_expression          shift and go to state 159

state 411

    (161) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 416


state 412

    (160) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI . expression_opt RPAREN statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (251) empty -> .
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RPAREN          reduce using rule 251 (empty -> .)
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    ID              shift and go to state 111
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    primary_expression             shift and go to state 115
    expression_opt                 shift and go to state 417
    postfix_expression             shift and go to state 136
    expression                     shift and go to state 175
    conditional_expression         shift and go to state 145
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    cast_expression                shift and go to state 142
    constant                       shift and go to state 124
    unified_string_literal         shift and go to state 125
    unary_operator                 shift and go to state 146
    empty                          shift and go to state 270
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    assignment_expression          shift and go to state 159

state 413

    (229) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .

    LBRACKET        reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LPAREN          reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    PERIOD          reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    ARROW           reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    PLUSPLUS        reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MINUSMINUS      reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    EQUALS          reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    XOREQUAL        reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    TIMESEQUAL      reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    DIVEQUAL        reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MODEQUAL        reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    PLUSEQUAL       reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MINUSEQUAL      reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LSHIFTEQUAL     reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RSHIFTEQUAL     reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    ANDEQUAL        reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    OREQUAL         reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    CONDOP          reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    TIMES           reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    DIVIDE          reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MOD             reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    PLUS            reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MINUS           reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RSHIFT          reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LSHIFT          reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LT              reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LE              reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    GE              reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    GT              reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    EQ              reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    NE              reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    AND             reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    OR              reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    XOR             reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LAND            reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LOR             reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    COMMA           reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    SEMI            reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RBRACE          reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    COLON           reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RBRACKET        reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RPAREN          reduce using rule 229 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)


state 414

    (159) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .

    ID              reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CASE            reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DEFAULT         reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SWITCH          reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DO              reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    GOTO            reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    BREAK           reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CONTINUE        reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LBRACE          reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CONST           reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RESTRICT        reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    VOLATILE        reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    VOID            reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    _BOOL           reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CHAR            reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SHORT           reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT             reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LONG            reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT           reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DOUBLE          reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    _COMPLEX        reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SIGNED          reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    UNSIGNED        reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    AUTO            reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    REGISTER        reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STATIC          reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    EXTERN          reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TYPEDEF         reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INLINE          reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TYPEID          reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ENUM            reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STRUCT          reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    UNION           reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PLUSPLUS        reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    MINUSMINUS      reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SIZEOF          reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    AND             reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TIMES           reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    NOT             reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LNOT            reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST_DEC   reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST_OCT   reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST_HEX   reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    HEX_FLOAT_CONST reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    WCHAR_CONST     reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STRING_LITERAL  reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    WSTRING_LITERAL reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SEMI            reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ELSE            reduce using rule 159 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)


state 415

    (156) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    ID              reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RESTRICT        reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOLATILE        reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    _BOOL           reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SHORT           reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LONG            reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE          reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    _COMPLEX        reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIGNED          reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNSIGNED        reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AUTO            reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    REGISTER        reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STATIC          reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    EXTERN          reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEDEF         reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INLINE          reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEID          reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ENUM            reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRUCT          reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNION           reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AND             reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LNOT            reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST_DEC   reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST_OCT   reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST_HEX   reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_CONST     reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    HEX_FLOAT_CONST reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_CONST      reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WCHAR_CONST     reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_LITERAL  reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WSTRING_LITERAL reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 156 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 416

    (161) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN . statement
    (38) statement -> . labeled_statement
    (39) statement -> . expression_statement
    (40) statement -> . compound_statement
    (41) statement -> . selection_statement
    (42) statement -> . iteration_statement
    (43) statement -> . jump_statement
    (152) labeled_statement -> . ID COLON statement
    (153) labeled_statement -> . CASE constant_expression COLON statement
    (154) labeled_statement -> . DEFAULT COLON statement
    (167) expression_statement -> . expression_opt SEMI
    (151) compound_statement -> . brace_open block_item_list_opt brace_close
    (155) selection_statement -> . IF LPAREN expression RPAREN statement
    (156) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (157) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (158) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (159) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (160) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (161) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (162) jump_statement -> . GOTO ID SEMI
    (163) jump_statement -> . BREAK SEMI
    (164) jump_statement -> . CONTINUE SEMI
    (165) jump_statement -> . RETURN expression SEMI
    (166) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (249) brace_open -> . LBRACE
    (251) empty -> .
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 160
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 165
    IF              shift and go to state 161
    SWITCH          shift and go to state 155
    WHILE           shift and go to state 180
    DO              shift and go to state 154
    FOR             shift and go to state 164
    GOTO            shift and go to state 167
    BREAK           shift and go to state 177
    CONTINUE        shift and go to state 158
    RETURN          shift and go to state 179
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 251 (empty -> .)
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    expression_opt                 shift and go to state 173
    compound_statement             shift and go to state 163
    brace_open                     shift and go to state 91
    jump_statement                 shift and go to state 174
    postfix_expression             shift and go to state 136
    expression                     shift and go to state 175
    conditional_expression         shift and go to state 145
    statement                      shift and go to state 418
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    cast_expression                shift and go to state 142
    labeled_statement              shift and go to state 169
    unified_string_literal         shift and go to state 125
    iteration_statement            shift and go to state 156
    unary_operator                 shift and go to state 146
    selection_statement            shift and go to state 157
    empty                          shift and go to state 270
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    expression_statement           shift and go to state 178
    assignment_expression          shift and go to state 159

state 417

    (160) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 419


state 418

    (161) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .

    ID              reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CASE            reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    DEFAULT         reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SWITCH          reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    DO              reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    GOTO            reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CONTINUE        reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CONST           reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RESTRICT        reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    VOLATILE        reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    _BOOL           reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SHORT           reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LONG            reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    DOUBLE          reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    _COMPLEX        reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SIGNED          reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    UNSIGNED        reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    AUTO            reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    REGISTER        reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STATIC          reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    EXTERN          reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TYPEDEF         reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INLINE          reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TYPEID          reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ENUM            reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STRUCT          reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    UNION           reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SIZEOF          reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    AND             reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LNOT            reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_DEC   reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_OCT   reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_HEX   reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    HEX_FLOAT_CONST reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    WCHAR_CONST     reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STRING_LITERAL  reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    WSTRING_LITERAL reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RBRACE          reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 161 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)


state 419

    (160) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN . statement
    (38) statement -> . labeled_statement
    (39) statement -> . expression_statement
    (40) statement -> . compound_statement
    (41) statement -> . selection_statement
    (42) statement -> . iteration_statement
    (43) statement -> . jump_statement
    (152) labeled_statement -> . ID COLON statement
    (153) labeled_statement -> . CASE constant_expression COLON statement
    (154) labeled_statement -> . DEFAULT COLON statement
    (167) expression_statement -> . expression_opt SEMI
    (151) compound_statement -> . brace_open block_item_list_opt brace_close
    (155) selection_statement -> . IF LPAREN expression RPAREN statement
    (156) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (157) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (158) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (159) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (160) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (161) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (162) jump_statement -> . GOTO ID SEMI
    (163) jump_statement -> . BREAK SEMI
    (164) jump_statement -> . CONTINUE SEMI
    (165) jump_statement -> . RETURN expression SEMI
    (166) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (249) brace_open -> . LBRACE
    (251) empty -> .
    (168) expression -> . assignment_expression
    (169) expression -> . expression COMMA assignment_expression
    (171) assignment_expression -> . conditional_expression
    (172) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (185) conditional_expression -> . binary_expression
    (186) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (208) unary_expression -> . postfix_expression
    (209) unary_expression -> . PLUSPLUS unary_expression
    (210) unary_expression -> . MINUSMINUS unary_expression
    (211) unary_expression -> . unary_operator cast_expression
    (212) unary_expression -> . SIZEOF unary_expression
    (213) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (187) binary_expression -> . cast_expression
    (188) binary_expression -> . binary_expression TIMES binary_expression
    (189) binary_expression -> . binary_expression DIVIDE binary_expression
    (190) binary_expression -> . binary_expression MOD binary_expression
    (191) binary_expression -> . binary_expression PLUS binary_expression
    (192) binary_expression -> . binary_expression MINUS binary_expression
    (193) binary_expression -> . binary_expression RSHIFT binary_expression
    (194) binary_expression -> . binary_expression LSHIFT binary_expression
    (195) binary_expression -> . binary_expression LT binary_expression
    (196) binary_expression -> . binary_expression LE binary_expression
    (197) binary_expression -> . binary_expression GE binary_expression
    (198) binary_expression -> . binary_expression GT binary_expression
    (199) binary_expression -> . binary_expression EQ binary_expression
    (200) binary_expression -> . binary_expression NE binary_expression
    (201) binary_expression -> . binary_expression AND binary_expression
    (202) binary_expression -> . binary_expression OR binary_expression
    (203) binary_expression -> . binary_expression XOR binary_expression
    (204) binary_expression -> . binary_expression LAND binary_expression
    (205) binary_expression -> . binary_expression LOR binary_expression
    (220) postfix_expression -> . primary_expression
    (221) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (222) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (223) postfix_expression -> . postfix_expression LPAREN RPAREN
    (224) postfix_expression -> . postfix_expression PERIOD identifier
    (225) postfix_expression -> . postfix_expression ARROW identifier
    (226) postfix_expression -> . postfix_expression PLUSPLUS
    (227) postfix_expression -> . postfix_expression MINUSMINUS
    (228) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (229) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (214) unary_operator -> . AND
    (215) unary_operator -> . TIMES
    (216) unary_operator -> . PLUS
    (217) unary_operator -> . MINUS
    (218) unary_operator -> . NOT
    (219) unary_operator -> . LNOT
    (206) cast_expression -> . unary_expression
    (207) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (230) primary_expression -> . identifier
    (231) primary_expression -> . constant
    (232) primary_expression -> . unified_string_literal
    (233) primary_expression -> . unified_wstring_literal
    (234) primary_expression -> . LPAREN expression RPAREN
    (237) identifier -> . ID
    (238) constant -> . INT_CONST_DEC
    (239) constant -> . INT_CONST_OCT
    (240) constant -> . INT_CONST_HEX
    (241) constant -> . FLOAT_CONST
    (242) constant -> . HEX_FLOAT_CONST
    (243) constant -> . CHAR_CONST
    (244) constant -> . WCHAR_CONST
    (245) unified_string_literal -> . STRING_LITERAL
    (246) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (247) unified_wstring_literal -> . WSTRING_LITERAL
    (248) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 160
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 165
    IF              shift and go to state 161
    SWITCH          shift and go to state 155
    WHILE           shift and go to state 180
    DO              shift and go to state 154
    FOR             shift and go to state 164
    GOTO            shift and go to state 167
    BREAK           shift and go to state 177
    CONTINUE        shift and go to state 158
    RETURN          shift and go to state 179
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 251 (empty -> .)
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 123
    SIZEOF          shift and go to state 134
    LPAREN          shift and go to state 132
    AND             shift and go to state 117
    TIMES           shift and go to state 166
    PLUS            shift and go to state 114
    MINUS           shift and go to state 126
    NOT             shift and go to state 119
    LNOT            shift and go to state 139
    INT_CONST_DEC   shift and go to state 143
    INT_CONST_OCT   shift and go to state 129
    INT_CONST_HEX   shift and go to state 130
    FLOAT_CONST     shift and go to state 133
    HEX_FLOAT_CONST shift and go to state 141
    CHAR_CONST      shift and go to state 138
    WCHAR_CONST     shift and go to state 137
    STRING_LITERAL  shift and go to state 135
    WSTRING_LITERAL shift and go to state 118

    constant                       shift and go to state 124
    primary_expression             shift and go to state 115
    expression_opt                 shift and go to state 173
    compound_statement             shift and go to state 163
    brace_open                     shift and go to state 91
    jump_statement                 shift and go to state 174
    postfix_expression             shift and go to state 136
    expression                     shift and go to state 175
    conditional_expression         shift and go to state 145
    statement                      shift and go to state 420
    identifier                     shift and go to state 120
    unary_expression               shift and go to state 140
    cast_expression                shift and go to state 142
    labeled_statement              shift and go to state 169
    unified_string_literal         shift and go to state 125
    iteration_statement            shift and go to state 156
    unary_operator                 shift and go to state 146
    selection_statement            shift and go to state 157
    empty                          shift and go to state 270
    binary_expression              shift and go to state 128
    unified_wstring_literal        shift and go to state 121
    expression_statement           shift and go to state 178
    assignment_expression          shift and go to state 159

state 420

    (160) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .

    ID              reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CASE            reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    DEFAULT         reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SWITCH          reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    DO              reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    GOTO            reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CONTINUE        reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CONST           reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RESTRICT        reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    VOLATILE        reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    _BOOL           reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SHORT           reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LONG            reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    DOUBLE          reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    _COMPLEX        reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SIGNED          reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    UNSIGNED        reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    AUTO            reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    REGISTER        reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STATIC          reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    EXTERN          reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TYPEDEF         reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INLINE          reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TYPEID          reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ENUM            reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRUCT          reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    UNION           reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SIZEOF          reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    AND             reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LNOT            reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_DEC   reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_OCT   reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_HEX   reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    HEX_FLOAT_CONST reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WCHAR_CONST     reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRING_LITERAL  reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WSTRING_LITERAL reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RBRACE          reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 160 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 402 resolved as shift
