Coverage No. to test : 0
Coverage 0 requires vlTOPp->reset to be true
It involves Signal : ['reset']
Which is assigned values at {}
Final list of signals on which coverage 0 depends ['reset']

All constraints on final signals are
vlTOPp->reset should be true
Assignments 1 level deep and their coverage no. are {}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are []
Unsatisfiable Coverages are []
Looks like 'Input' so can be assigned any value


Coverage No. to test : 1
Coverage 1 requires ((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) to be true
It involves Signal : ['line2', 'line1']
Which is assigned values at {}
Final list of signals on which coverage 1 depends ['line2', 'line1']

All constraints on final signals are
((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) should be true
Assignments 1 level deep and their coverage no. are {}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are []
Unsatisfiable Coverages are []
Looks like 'Input' so can be assigned any value


Coverage No. to test : 2
Coverage 2 requires ((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) to be false
It involves Signal : ['line2', 'line1']
Which is assigned values at {}
Final list of signals on which coverage 2 depends ['line2', 'line1']

All constraints on final signals are
((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) should be false
Assignments 1 level deep and their coverage no. are {}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are []
Unsatisfiable Coverages are []
Looks like 'Input' so can be assigned any value


Coverage No. to test : 3
Coverage 3 requires (0 == (IData)(vlTOPp->v__DOT__process_1_stato)) to be true
It involves Signal : ['v__DOT__process_1_stato']
Which is assigned values at {'v__DOT__process_1_stato = 5;': 10, 'v__DOT__process_1_stato = 6;': 17, 'v__DOT__process_1_stato = 7;': 16, 'v__DOT__process_1_stato = 2;': 11, 'v__DOT__process_1_stato = 3;': 22, 'v__DOT__process_1_stato = 4;': 4, 'v__DOT__process_1_stato = 0;': 23, 'v__DOT__process_1_stato = 1;': 5}
Final list of signals on which coverage 3 depends ['v__DOT__process_1_stato']

All constraints on final signals are
(0 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be true
((((((((0 == (IData)(vlTOPp->v__DOT__process_1_stato)) | (3 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (1 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (4 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (2 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (5 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (6 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (7 == (IData)(vlTOPp->v__DOT__process_1_stato))) should be true
Assignments 1 level deep and their coverage no. are {'v__DOT__process_1_stato = 5;': 10, 'v__DOT__process_1_stato = 6;': 17, 'v__DOT__process_1_stato = 7;': 16, 'v__DOT__process_1_stato = 2;': 11, 'v__DOT__process_1_stato = 3;': 22, 'v__DOT__process_1_stato = 4;': 4, 'v__DOT__process_1_stato = 0;': 23, 'v__DOT__process_1_stato = 1;': 5}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are [23]
Unsatisfiable Coverages are [10, 17, 16, 11, 22, 4, 5]


Coverage No. to test : 4
Coverage 4 requires ((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) to be true
It involves Signal : ['line2', 'line1']
Which is assigned values at {}
Final list of signals on which coverage 4 depends ['line2', 'line1']

All constraints on final signals are
((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) should be true
Assignments 1 level deep and their coverage no. are {}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are []
Unsatisfiable Coverages are []
Looks like 'Input' so can be assigned any value


Coverage No. to test : 5
Coverage 5 requires ((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) to be false
It involves Signal : ['line2', 'line1']
Which is assigned values at {}
Final list of signals on which coverage 5 depends ['line2', 'line1']

All constraints on final signals are
((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) should be false
Assignments 1 level deep and their coverage no. are {}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are []
Unsatisfiable Coverages are []
Looks like 'Input' so can be assigned any value


Coverage No. to test : 6
Coverage 6 requires (3 == (IData)(vlTOPp->v__DOT__process_1_stato)) to be true
It involves Signal : ['v__DOT__process_1_stato']
Which is assigned values at {'v__DOT__process_1_stato = 5;': 10, 'v__DOT__process_1_stato = 6;': 17, 'v__DOT__process_1_stato = 7;': 16, 'v__DOT__process_1_stato = 2;': 11, 'v__DOT__process_1_stato = 3;': 22, 'v__DOT__process_1_stato = 4;': 4, 'v__DOT__process_1_stato = 0;': 23, 'v__DOT__process_1_stato = 1;': 5}
Final list of signals on which coverage 6 depends ['v__DOT__process_1_stato']

All constraints on final signals are
(3 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be true
((((((((0 == (IData)(vlTOPp->v__DOT__process_1_stato)) | (3 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (1 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (4 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (2 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (5 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (6 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (7 == (IData)(vlTOPp->v__DOT__process_1_stato))) should be true
(0 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
Assignments 1 level deep and their coverage no. are {'v__DOT__process_1_stato = 5;': 10, 'v__DOT__process_1_stato = 6;': 17, 'v__DOT__process_1_stato = 7;': 16, 'v__DOT__process_1_stato = 2;': 11, 'v__DOT__process_1_stato = 3;': 22, 'v__DOT__process_1_stato = 4;': 4, 'v__DOT__process_1_stato = 0;': 23, 'v__DOT__process_1_stato = 1;': 5}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are [22]
Unsatisfiable Coverages are [10, 17, 16, 11, 4, 23, 5]


Coverage No. to test : 7
Coverage 7 requires ((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) to be true
It involves Signal : ['line2', 'line1']
Which is assigned values at {}
Final list of signals on which coverage 7 depends ['line2', 'line1']

All constraints on final signals are
((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) should be true
Assignments 1 level deep and their coverage no. are {}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are []
Unsatisfiable Coverages are []
Looks like 'Input' so can be assigned any value


Coverage No. to test : 8
Coverage 8 requires ((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) to be false
It involves Signal : ['line2', 'line1']
Which is assigned values at {}
Final list of signals on which coverage 8 depends ['line2', 'line1']

All constraints on final signals are
((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) should be false
Assignments 1 level deep and their coverage no. are {}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are []
Unsatisfiable Coverages are []
Looks like 'Input' so can be assigned any value


Coverage No. to test : 9
Coverage 9 requires (1 == (IData)(vlTOPp->v__DOT__process_1_stato)) to be true
It involves Signal : ['v__DOT__process_1_stato']
Which is assigned values at {'v__DOT__process_1_stato = 5;': 10, 'v__DOT__process_1_stato = 6;': 17, 'v__DOT__process_1_stato = 7;': 16, 'v__DOT__process_1_stato = 2;': 11, 'v__DOT__process_1_stato = 3;': 22, 'v__DOT__process_1_stato = 4;': 4, 'v__DOT__process_1_stato = 0;': 23, 'v__DOT__process_1_stato = 1;': 5}
Final list of signals on which coverage 9 depends ['v__DOT__process_1_stato']

All constraints on final signals are
(1 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be true
((((((((0 == (IData)(vlTOPp->v__DOT__process_1_stato)) | (3 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (1 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (4 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (2 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (5 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (6 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (7 == (IData)(vlTOPp->v__DOT__process_1_stato))) should be true
(3 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(0 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
Assignments 1 level deep and their coverage no. are {'v__DOT__process_1_stato = 5;': 10, 'v__DOT__process_1_stato = 6;': 17, 'v__DOT__process_1_stato = 7;': 16, 'v__DOT__process_1_stato = 2;': 11, 'v__DOT__process_1_stato = 3;': 22, 'v__DOT__process_1_stato = 4;': 4, 'v__DOT__process_1_stato = 0;': 23, 'v__DOT__process_1_stato = 1;': 5}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are [5]
Unsatisfiable Coverages are [10, 17, 16, 11, 22, 4, 23]


Coverage No. to test : 10
Coverage 10 requires ((IData)(vlTOPp->line1) | (IData)(vlTOPp->line2)) to be true
It involves Signal : ['line2', 'line1']
Which is assigned values at {}
Final list of signals on which coverage 10 depends ['line2', 'line1']

All constraints on final signals are
((IData)(vlTOPp->line1) | (IData)(vlTOPp->line2)) should be true
Right Now difference between logical Or and Bitwise Or is not implemented
Assignments 1 level deep and their coverage no. are {}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are []
Unsatisfiable Coverages are []
Looks like 'Input' so can be assigned any value


Coverage No. to test : 11
Coverage 11 requires ((IData)(vlTOPp->line1) | (IData)(vlTOPp->line2)) to be false
It involves Signal : ['line2', 'line1']
Which is assigned values at {}
Final list of signals on which coverage 11 depends ['line2', 'line1']

All constraints on final signals are
((IData)(vlTOPp->line1) | (IData)(vlTOPp->line2)) should be false
Error: Right Now difference between logical Or and Bitwise Or is not implemented
Assignments 1 level deep and their coverage no. are {}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are []
Unsatisfiable Coverages are []
Looks like 'Input' so can be assigned any value


Coverage No. to test : 12
Coverage 12 requires (4 == (IData)(vlTOPp->v__DOT__process_1_stato)) to be true
It involves Signal : ['v__DOT__process_1_stato']
Which is assigned values at {'v__DOT__process_1_stato = 5;': 10, 'v__DOT__process_1_stato = 6;': 17, 'v__DOT__process_1_stato = 7;': 16, 'v__DOT__process_1_stato = 2;': 11, 'v__DOT__process_1_stato = 3;': 22, 'v__DOT__process_1_stato = 4;': 4, 'v__DOT__process_1_stato = 0;': 23, 'v__DOT__process_1_stato = 1;': 5}
Final list of signals on which coverage 12 depends ['v__DOT__process_1_stato']

All constraints on final signals are
(4 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be true
((((((((0 == (IData)(vlTOPp->v__DOT__process_1_stato)) | (3 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (1 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (4 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (2 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (5 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (6 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (7 == (IData)(vlTOPp->v__DOT__process_1_stato))) should be true
(1 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(3 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(0 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
Assignments 1 level deep and their coverage no. are {'v__DOT__process_1_stato = 5;': 10, 'v__DOT__process_1_stato = 6;': 17, 'v__DOT__process_1_stato = 7;': 16, 'v__DOT__process_1_stato = 2;': 11, 'v__DOT__process_1_stato = 3;': 22, 'v__DOT__process_1_stato = 4;': 4, 'v__DOT__process_1_stato = 0;': 23, 'v__DOT__process_1_stato = 1;': 5}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are [4]
Unsatisfiable Coverages are [10, 17, 16, 11, 22, 23, 5]


Coverage No. to test : 13
Coverage 13 requires ((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) to be true
It involves Signal : ['line2', 'line1']
Which is assigned values at {}
Final list of signals on which coverage 13 depends ['line2', 'line1']

All constraints on final signals are
((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) should be true
Assignments 1 level deep and their coverage no. are {}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are []
Unsatisfiable Coverages are []
Looks like 'Input' so can be assigned any value


Coverage No. to test : 14
Coverage 14 requires ((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) to be false
It involves Signal : ['line2', 'line1']
Which is assigned values at {}
Final list of signals on which coverage 14 depends ['line2', 'line1']

All constraints on final signals are
((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) should be false
Assignments 1 level deep and their coverage no. are {}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are []
Unsatisfiable Coverages are []
Looks like 'Input' so can be assigned any value


Coverage No. to test : 15
Coverage 15 requires (2 == (IData)(vlTOPp->v__DOT__process_1_stato)) to be true
It involves Signal : ['v__DOT__process_1_stato']
Which is assigned values at {'v__DOT__process_1_stato = 5;': 10, 'v__DOT__process_1_stato = 6;': 17, 'v__DOT__process_1_stato = 7;': 16, 'v__DOT__process_1_stato = 2;': 11, 'v__DOT__process_1_stato = 3;': 22, 'v__DOT__process_1_stato = 4;': 4, 'v__DOT__process_1_stato = 0;': 23, 'v__DOT__process_1_stato = 1;': 5}
Final list of signals on which coverage 15 depends ['v__DOT__process_1_stato']

All constraints on final signals are
(2 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be true
((((((((0 == (IData)(vlTOPp->v__DOT__process_1_stato)) | (3 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (1 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (4 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (2 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (5 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (6 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (7 == (IData)(vlTOPp->v__DOT__process_1_stato))) should be true
(4 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(1 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(3 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(0 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
Assignments 1 level deep and their coverage no. are {'v__DOT__process_1_stato = 5;': 10, 'v__DOT__process_1_stato = 6;': 17, 'v__DOT__process_1_stato = 7;': 16, 'v__DOT__process_1_stato = 2;': 11, 'v__DOT__process_1_stato = 3;': 22, 'v__DOT__process_1_stato = 4;': 4, 'v__DOT__process_1_stato = 0;': 23, 'v__DOT__process_1_stato = 1;': 5}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are [11]
Unsatisfiable Coverages are [10, 17, 16, 22, 4, 23, 5]


Coverage No. to test : 16
Coverage 16 requires ((IData)(vlTOPp->line1) | (IData)(vlTOPp->line2)) to be true
It involves Signal : ['line2', 'line1']
Which is assigned values at {}
Final list of signals on which coverage 16 depends ['line2', 'line1']

All constraints on final signals are
((IData)(vlTOPp->line1) | (IData)(vlTOPp->line2)) should be true
Right Now difference between logical Or and Bitwise Or is not implemented
Assignments 1 level deep and their coverage no. are {}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are []
Unsatisfiable Coverages are []
Looks like 'Input' so can be assigned any value


Coverage No. to test : 17
Coverage 17 requires ((IData)(vlTOPp->line1) | (IData)(vlTOPp->line2)) to be false
It involves Signal : ['line2', 'line1']
Which is assigned values at {}
Final list of signals on which coverage 17 depends ['line2', 'line1']

All constraints on final signals are
((IData)(vlTOPp->line1) | (IData)(vlTOPp->line2)) should be false
Error: Right Now difference between logical Or and Bitwise Or is not implemented
Assignments 1 level deep and their coverage no. are {}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are []
Unsatisfiable Coverages are []
Looks like 'Input' so can be assigned any value


Coverage No. to test : 18
Coverage 18 requires (5 == (IData)(vlTOPp->v__DOT__process_1_stato)) to be true
It involves Signal : ['v__DOT__process_1_stato']
Which is assigned values at {'v__DOT__process_1_stato = 5;': 10, 'v__DOT__process_1_stato = 6;': 17, 'v__DOT__process_1_stato = 7;': 16, 'v__DOT__process_1_stato = 2;': 11, 'v__DOT__process_1_stato = 3;': 22, 'v__DOT__process_1_stato = 4;': 4, 'v__DOT__process_1_stato = 0;': 23, 'v__DOT__process_1_stato = 1;': 5}
Final list of signals on which coverage 18 depends ['v__DOT__process_1_stato']

All constraints on final signals are
(5 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be true
((((((((0 == (IData)(vlTOPp->v__DOT__process_1_stato)) | (3 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (1 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (4 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (2 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (5 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (6 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (7 == (IData)(vlTOPp->v__DOT__process_1_stato))) should be true
(2 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(4 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(1 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(3 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(0 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
Assignments 1 level deep and their coverage no. are {'v__DOT__process_1_stato = 5;': 10, 'v__DOT__process_1_stato = 6;': 17, 'v__DOT__process_1_stato = 7;': 16, 'v__DOT__process_1_stato = 2;': 11, 'v__DOT__process_1_stato = 3;': 22, 'v__DOT__process_1_stato = 4;': 4, 'v__DOT__process_1_stato = 0;': 23, 'v__DOT__process_1_stato = 1;': 5}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are [10]
Unsatisfiable Coverages are [17, 16, 11, 22, 4, 23, 5]


Coverage No. to test : 19
Coverage 19 requires ((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) to be true
It involves Signal : ['line2', 'line1']
Which is assigned values at {}
Final list of signals on which coverage 19 depends ['line2', 'line1']

All constraints on final signals are
((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) should be true
Assignments 1 level deep and their coverage no. are {}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are []
Unsatisfiable Coverages are []
Looks like 'Input' so can be assigned any value


Coverage No. to test : 20
Coverage 20 requires ((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) to be false
It involves Signal : ['line2', 'line1']
Which is assigned values at {}
Final list of signals on which coverage 20 depends ['line2', 'line1']

All constraints on final signals are
((IData)(vlTOPp->line1) & (IData)(vlTOPp->line2)) should be false
Assignments 1 level deep and their coverage no. are {}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are []
Unsatisfiable Coverages are []
Looks like 'Input' so can be assigned any value


Coverage No. to test : 21
Coverage 21 requires (6 == (IData)(vlTOPp->v__DOT__process_1_stato)) to be true
It involves Signal : ['v__DOT__process_1_stato']
Which is assigned values at {'v__DOT__process_1_stato = 5;': 10, 'v__DOT__process_1_stato = 6;': 17, 'v__DOT__process_1_stato = 7;': 16, 'v__DOT__process_1_stato = 2;': 11, 'v__DOT__process_1_stato = 3;': 22, 'v__DOT__process_1_stato = 4;': 4, 'v__DOT__process_1_stato = 0;': 23, 'v__DOT__process_1_stato = 1;': 5}
Final list of signals on which coverage 21 depends ['v__DOT__process_1_stato']

All constraints on final signals are
(6 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be true
((((((((0 == (IData)(vlTOPp->v__DOT__process_1_stato)) | (3 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (1 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (4 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (2 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (5 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (6 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (7 == (IData)(vlTOPp->v__DOT__process_1_stato))) should be true
(5 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(2 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(4 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(1 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(3 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(0 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
Assignments 1 level deep and their coverage no. are {'v__DOT__process_1_stato = 5;': 10, 'v__DOT__process_1_stato = 6;': 17, 'v__DOT__process_1_stato = 7;': 16, 'v__DOT__process_1_stato = 2;': 11, 'v__DOT__process_1_stato = 3;': 22, 'v__DOT__process_1_stato = 4;': 4, 'v__DOT__process_1_stato = 0;': 23, 'v__DOT__process_1_stato = 1;': 5}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are [17]
Unsatisfiable Coverages are [10, 16, 11, 22, 4, 23, 5]


Coverage No. to test : 22
Coverage 22 requires ((IData)(vlTOPp->line1) | (IData)(vlTOPp->line2)) to be true
It involves Signal : ['line2', 'line1']
Which is assigned values at {}
Final list of signals on which coverage 22 depends ['line2', 'line1']

All constraints on final signals are
((IData)(vlTOPp->line1) | (IData)(vlTOPp->line2)) should be true
Right Now difference between logical Or and Bitwise Or is not implemented
Assignments 1 level deep and their coverage no. are {}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are []
Unsatisfiable Coverages are []
Looks like 'Input' so can be assigned any value


Coverage No. to test : 23
Coverage 23 requires ((IData)(vlTOPp->line1) | (IData)(vlTOPp->line2)) to be false
It involves Signal : ['line2', 'line1']
Which is assigned values at {}
Final list of signals on which coverage 23 depends ['line2', 'line1']

All constraints on final signals are
((IData)(vlTOPp->line1) | (IData)(vlTOPp->line2)) should be false
Error: Right Now difference between logical Or and Bitwise Or is not implemented
Assignments 1 level deep and their coverage no. are {}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are []
Unsatisfiable Coverages are []
Looks like 'Input' so can be assigned any value


Coverage No. to test : 24
Coverage 24 requires (6 == (IData)(vlTOPp->v__DOT__process_1_stato)) to be false
It involves Signal : ['v__DOT__process_1_stato']
Which is assigned values at {'v__DOT__process_1_stato = 5;': 10, 'v__DOT__process_1_stato = 6;': 17, 'v__DOT__process_1_stato = 7;': 16, 'v__DOT__process_1_stato = 2;': 11, 'v__DOT__process_1_stato = 3;': 22, 'v__DOT__process_1_stato = 4;': 4, 'v__DOT__process_1_stato = 0;': 23, 'v__DOT__process_1_stato = 1;': 5}
Final list of signals on which coverage 24 depends ['v__DOT__process_1_stato']

All constraints on final signals are
((((((((0 == (IData)(vlTOPp->v__DOT__process_1_stato)) | (3 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (1 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (4 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (2 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (5 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (6 == (IData)(vlTOPp->v__DOT__process_1_stato))) | (7 == (IData)(vlTOPp->v__DOT__process_1_stato))) should be true
(6 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(5 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(2 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(4 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(1 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(3 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
(0 == (IData)(vlTOPp->v__DOT__process_1_stato)) should be false
Assignments 1 level deep and their coverage no. are {'v__DOT__process_1_stato = 5;': 10, 'v__DOT__process_1_stato = 6;': 17, 'v__DOT__process_1_stato = 7;': 16, 'v__DOT__process_1_stato = 2;': 11, 'v__DOT__process_1_stato = 3;': 22, 'v__DOT__process_1_stato = 4;': 4, 'v__DOT__process_1_stato = 0;': 23, 'v__DOT__process_1_stato = 1;': 5}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are [16]
Unsatisfiable Coverages are [10, 17, 11, 22, 4, 23, 5]


Coverage No. to test : 25
Coverage 25 requires vlTOPp->reset to be false
It involves Signal : ['reset']
Which is assigned values at {}
Final list of signals on which coverage 25 depends ['reset']

All constraints on final signals are
vlTOPp->reset should be false
Assignments 1 level deep and their coverage no. are {}
Assignments 2 level deep and their coverage no. are {}
Satisfiable Coverages are []
Unsatisfiable Coverages are []
Looks like 'Input' so can be assigned any value